// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer/CLexerSpec.flex

package lexer;

import model.Token;
import model.OperatorToken;
import model.KeywordToken;
import model.LiteralToken;
import model.IdentifierToken;

import validation.TokenError;
import validation.IllegalTokenException;

import java.util.ArrayList;
import java_cup.runtime.*;
import parser.sym;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class CLexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\6\1\7\1\10\1\0\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\7\25\2\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\0\4\35\1\36\1\35\21\37\1\40\2\37\1\41"+
    "\1\42\1\43\1\44\1\45\1\0\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\57\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\6\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\17\26\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\0\1\42\1\43\1\44"+
    "\2\0\1\45\1\46\3\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\0\1\2\1\54\1\0\1\53\1\55\1\56"+
    "\2\57\1\0\2\17\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\6\26\1\67\6\26\1\70\13\26\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\5\0"+
    "\2\53\1\55\1\56\1\57\1\56\1\57\2\101\1\102"+
    "\1\101\1\102\2\101\1\102\1\101\1\102\2\17\1\60"+
    "\1\103\1\104\13\26\1\105\1\26\1\106\17\26\3\0"+
    "\1\2\1\0\2\57\4\101\1\57\1\60\1\107\1\26"+
    "\1\110\1\111\4\26\1\112\1\113\2\26\1\114\1\115"+
    "\13\26\1\116\2\26\2\0\3\117\1\120\1\121\4\26"+
    "\1\122\2\26\1\123\6\26\1\124\2\26\1\125\1\117"+
    "\2\26\1\126\1\127\1\26\1\130\1\131\1\132\1\133"+
    "\1\134\1\135\4\26\1\136\1\26\1\137\2\26\1\140"+
    "\1\141\1\142\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\206\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\206\0\206\0\u025b\0\u029e\0\206\0\u02e1"+
    "\0\u0324\0\u0367\0\u03aa\0\u03ed\0\206\0\206\0\u0430\0\u0473"+
    "\0\u04b6\0\206\0\u04f9\0\206\0\206\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\206\0\u096c\0\206"+
    "\0\206\0\u09af\0\206\0\u09f2\0\206\0\u0a35\0\206\0\206"+
    "\0\206\0\u0a78\0\u0abb\0\206\0\206\0\u0324\0\u0afe\0\u0b41"+
    "\0\206\0\206\0\206\0\206\0\u0324\0\u0b84\0\u0bc7\0\206"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\u0ea8\0\206\0\206\0\206\0\u0eeb\0\206"+
    "\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103"+
    "\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u04f9\0\u1295\0\u12d8"+
    "\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0"+
    "\0\u1533\0\206\0\206\0\206\0\206\0\206\0\206\0\206"+
    "\0\206\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\206"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\206\0\206\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u04f9"+
    "\0\u1e9f\0\u04f9\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031"+
    "\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249"+
    "\0\u228c\0\u22cf\0\u2312\0\u2355\0\u15fc\0\u2398\0\u23db\0\u241e"+
    "\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u04f9\0\u25f3"+
    "\0\u04f9\0\u04f9\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u04f9\0\u04f9"+
    "\0\u2742\0\u2785\0\u04f9\0\u04f9\0\u27c8\0\u280b\0\u284e\0\u2891"+
    "\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u04f9"+
    "\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2b72\0\u2bb5\0\u2bf8\0\u04f9"+
    "\0\u04f9\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u04f9\0\u2d47\0\u2d8a"+
    "\0\u04f9\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u04f9"+
    "\0\u2f5f\0\u2fa2\0\u04f9\0\u2fe5\0\u3028\0\u306b\0\u04f9\0\u04f9"+
    "\0\u30ae\0\u04f9\0\u04f9\0\u04f9\0\u04f9\0\u04f9\0\u04f9\0\u30f1"+
    "\0\u3134\0\u3177\0\u31ba\0\u04f9\0\u31fd\0\u04f9\0\u3240\0\u3283"+
    "\0\u04f9\0\u04f9\0\u04f9\0\u04f9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\4\1\5\1\6\1\7\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\2\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\4\33\1\34\1\3\1\35\1\36"+
    "\1\33\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\33\1\46\2\33\1\47\4\33\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\3\33\1\56\1\57\1\60\1\61"+
    "\2\62\1\3\2\62\1\3\1\62\1\63\32\62\1\64"+
    "\40\62\105\0\1\4\132\0\1\65\50\0\16\66\1\0"+
    "\64\66\32\0\1\67\62\0\1\70\17\0\1\71\56\0"+
    "\34\72\1\73\40\72\32\0\1\74\67\0\1\75\2\0"+
    "\1\76\1\0\1\77\2\100\3\0\1\101\71\0\1\102"+
    "\1\76\1\0\1\77\2\100\3\0\1\103\1\104\73\0"+
    "\3\105\72\0\1\106\4\0\1\107\6\0\1\110\50\0"+
    "\2\111\4\0\14\111\1\112\1\111\2\113\1\114\6\111"+
    "\3\115\1\116\4\111\27\115\1\116\2\115\1\111\1\117"+
    "\4\111\4\0\14\111\1\112\1\111\1\120\2\121\6\111"+
    "\4\122\4\111\1\115\31\122\4\111\31\0\1\123\1\124"+
    "\102\0\1\125\102\0\1\126\1\127\73\0\3\33\6\0"+
    "\4\33\4\0\32\33\36\0\1\130\74\0\3\33\6\0"+
    "\4\33\4\0\24\33\1\131\5\33\30\0\3\33\6\0"+
    "\4\33\4\0\21\33\1\132\10\33\30\0\3\33\6\0"+
    "\4\33\4\0\1\33\1\133\6\33\1\134\6\33\1\135"+
    "\12\33\30\0\3\33\6\0\4\33\4\0\5\33\1\136"+
    "\11\33\1\137\12\33\30\0\3\33\6\0\4\33\4\0"+
    "\14\33\1\140\1\33\1\141\10\33\1\142\2\33\30\0"+
    "\3\33\6\0\4\33\4\0\14\33\1\143\2\33\1\144"+
    "\12\33\30\0\3\33\6\0\4\33\4\0\17\33\1\145"+
    "\12\33\30\0\3\33\6\0\4\33\4\0\6\33\1\146"+
    "\7\33\1\147\13\33\30\0\3\33\6\0\4\33\4\0"+
    "\17\33\1\150\12\33\30\0\3\33\6\0\4\33\4\0"+
    "\5\33\1\151\24\33\30\0\3\33\6\0\4\33\4\0"+
    "\10\33\1\152\1\153\11\33\1\154\2\33\1\155\3\33"+
    "\30\0\3\33\6\0\4\33\4\0\30\33\1\156\1\33"+
    "\30\0\3\33\6\0\4\33\4\0\16\33\1\157\13\33"+
    "\30\0\3\33\6\0\4\33\4\0\17\33\1\160\12\33"+
    "\30\0\3\33\6\0\4\33\4\0\10\33\1\161\21\33"+
    "\36\0\1\162\45\0\1\163\2\0\2\62\1\0\2\62"+
    "\1\0\1\62\1\0\32\62\1\0\40\62\7\0\1\164"+
    "\53\0\1\165\2\0\1\166\1\0\1\167\21\0\1\170"+
    "\106\0\1\171\102\0\1\72\10\0\1\72\15\0\1\72"+
    "\3\0\2\72\2\0\2\72\7\0\1\72\2\0\1\72"+
    "\1\0\1\72\1\0\1\72\5\0\1\72\2\0\2\111"+
    "\4\0\14\111\1\112\1\111\3\172\56\111\4\0\14\111"+
    "\1\112\1\111\3\173\54\111\16\174\1\175\64\174\2\107"+
    "\1\4\2\107\1\5\75\107\24\0\3\176\100\0\3\177"+
    "\76\0\1\200\1\0\2\201\1\202\6\0\4\203\4\0"+
    "\32\203\26\0\1\200\1\0\2\204\1\202\6\0\4\203"+
    "\4\0\32\203\30\0\3\205\6\0\4\203\4\0\32\203"+
    "\30\0\3\206\6\0\2\207\2\210\4\0\1\203\6\211"+
    "\23\212\30\0\3\213\6\0\2\214\2\215\5\0\6\216"+
    "\23\217\4\0\2\111\4\0\14\111\1\112\1\111\3\220"+
    "\6\111\4\115\4\111\32\115\6\111\4\0\14\111\1\112"+
    "\1\111\1\220\2\221\6\111\4\122\4\111\1\115\31\122"+
    "\4\111\24\0\3\205\6\0\4\222\4\0\1\203\31\222"+
    "\36\0\1\223\102\0\1\224\74\0\3\33\6\0\4\33"+
    "\4\0\23\33\1\225\6\33\30\0\3\33\6\0\4\33"+
    "\4\0\5\33\1\226\24\33\30\0\3\33\6\0\4\33"+
    "\4\0\22\33\1\227\7\33\30\0\3\33\6\0\4\33"+
    "\4\0\1\33\1\230\30\33\30\0\3\33\6\0\4\33"+
    "\4\0\16\33\1\231\13\33\30\0\3\33\6\0\4\33"+
    "\4\0\6\33\1\232\23\33\30\0\3\33\6\0\4\33"+
    "\4\0\24\33\1\233\5\33\30\0\3\33\6\0\4\33"+
    "\4\0\22\33\1\234\7\33\30\0\3\33\6\0\4\33"+
    "\4\0\24\33\1\235\5\33\30\0\3\33\6\0\4\33"+
    "\4\0\23\33\1\236\6\33\30\0\3\33\6\0\4\33"+
    "\4\0\17\33\1\237\12\33\30\0\3\33\6\0\4\33"+
    "\4\0\21\33\1\240\10\33\30\0\3\33\6\0\4\33"+
    "\4\0\23\33\1\241\6\33\30\0\3\33\6\0\4\33"+
    "\4\0\23\33\1\242\6\33\30\0\3\33\6\0\4\33"+
    "\4\0\16\33\1\243\13\33\30\0\3\33\6\0\4\33"+
    "\4\0\7\33\1\244\13\33\1\245\6\33\30\0\3\33"+
    "\6\0\4\33\4\0\17\33\1\246\12\33\30\0\3\33"+
    "\6\0\4\33\4\0\7\33\1\247\21\33\1\250\30\0"+
    "\3\33\6\0\4\33\4\0\1\33\1\251\17\33\1\252"+
    "\10\33\30\0\3\33\6\0\4\33\4\0\11\33\1\253"+
    "\20\33\30\0\3\33\6\0\4\33\4\0\20\33\1\254"+
    "\11\33\30\0\3\33\6\0\4\33\4\0\11\33\1\255"+
    "\10\33\1\256\7\33\30\0\3\33\6\0\4\33\4\0"+
    "\11\33\1\257\2\33\1\260\15\33\30\0\3\33\6\0"+
    "\4\33\4\0\11\33\1\261\20\33\26\0\1\200\1\0"+
    "\3\262\54\0\2\111\4\0\14\111\1\112\1\111\3\263"+
    "\54\111\16\174\1\264\102\174\1\264\4\174\1\265\57\174"+
    "\24\0\3\176\7\0\1\266\13\0\1\266\54\0\3\177"+
    "\7\0\1\266\13\0\1\266\52\0\1\200\1\0\2\201"+
    "\1\202\6\0\1\203\1\267\2\203\4\0\5\203\1\267"+
    "\24\203\26\0\1\200\1\0\2\204\1\202\6\0\1\203"+
    "\1\267\2\203\4\0\5\203\1\267\24\203\30\0\3\203"+
    "\6\0\4\203\4\0\32\203\26\0\1\200\1\0\2\204"+
    "\1\270\6\0\1\203\1\267\2\203\4\0\5\203\1\267"+
    "\24\203\30\0\3\205\6\0\1\203\1\267\2\203\4\0"+
    "\5\203\1\267\24\203\30\0\3\206\6\0\1\207\1\271"+
    "\2\203\4\0\1\203\4\211\1\272\1\211\23\203\30\0"+
    "\3\207\6\0\2\207\2\203\4\0\32\203\30\0\3\203"+
    "\6\0\2\203\2\210\4\0\32\203\30\0\3\211\6\0"+
    "\4\203\4\0\1\203\6\211\23\203\30\0\3\203\6\0"+
    "\4\203\4\0\7\203\23\212\30\0\3\213\6\0\1\214"+
    "\1\273\7\0\4\216\1\274\1\216\53\0\3\214\6\0"+
    "\2\214\103\0\2\215\66\0\3\216\17\0\6\216\103\0"+
    "\23\217\4\0\2\111\4\0\14\111\1\112\1\111\3\220"+
    "\6\111\1\115\1\275\2\115\4\111\5\115\1\275\24\115"+
    "\6\111\4\0\14\111\1\112\1\111\1\220\2\221\6\111"+
    "\1\122\1\276\2\122\4\111\1\115\4\122\1\276\24\122"+
    "\4\111\24\0\3\203\6\0\4\222\4\0\1\203\31\222"+
    "\30\0\3\33\6\0\4\33\4\0\17\33\1\277\12\33"+
    "\30\0\3\33\6\0\4\33\4\0\1\33\1\300\30\33"+
    "\30\0\3\33\6\0\4\33\4\0\5\33\1\301\24\33"+
    "\30\0\3\33\6\0\4\33\4\0\21\33\1\302\10\33"+
    "\30\0\3\33\6\0\4\33\4\0\22\33\1\303\1\304"+
    "\6\33\30\0\3\33\6\0\4\33\4\0\1\33\1\305"+
    "\30\33\30\0\3\33\6\0\4\33\4\0\2\33\1\306"+
    "\27\33\30\0\3\33\6\0\4\33\4\0\5\33\1\307"+
    "\24\33\30\0\3\33\6\0\4\33\4\0\15\33\1\310"+
    "\14\33\30\0\3\33\6\0\4\33\4\0\5\33\1\311"+
    "\24\33\30\0\3\33\6\0\4\33\4\0\1\33\1\312"+
    "\30\33\30\0\3\33\6\0\4\33\4\0\17\33\1\313"+
    "\12\33\30\0\3\33\6\0\4\33\4\0\7\33\1\314"+
    "\22\33\30\0\3\33\6\0\4\33\4\0\11\33\1\315"+
    "\20\33\30\0\3\33\6\0\4\33\4\0\24\33\1\316"+
    "\5\33\30\0\3\33\6\0\4\33\4\0\21\33\1\317"+
    "\10\33\30\0\3\33\6\0\4\33\4\0\16\33\1\320"+
    "\13\33\30\0\3\33\6\0\4\33\4\0\5\33\1\321"+
    "\24\33\30\0\3\33\6\0\4\33\4\0\23\33\1\322"+
    "\6\33\30\0\3\33\6\0\4\33\4\0\24\33\1\323"+
    "\5\33\30\0\3\33\6\0\4\33\4\0\23\33\1\324"+
    "\6\33\30\0\3\33\6\0\4\33\4\0\5\33\1\325"+
    "\24\33\30\0\3\33\6\0\4\33\4\0\17\33\1\326"+
    "\12\33\30\0\3\33\6\0\4\33\4\0\11\33\1\327"+
    "\20\33\30\0\3\33\6\0\4\33\4\0\4\33\1\330"+
    "\25\33\30\0\3\33\6\0\4\33\4\0\1\33\1\331"+
    "\30\33\30\0\3\33\6\0\4\33\4\0\14\33\1\332"+
    "\15\33\26\0\1\200\1\0\3\262\7\0\1\266\13\0"+
    "\1\266\30\0\2\111\4\0\14\111\1\112\1\111\3\263"+
    "\7\111\1\333\13\111\1\333\30\111\16\174\1\264\4\174"+
    "\1\4\57\174\17\0\1\334\1\0\1\334\2\0\3\335"+
    "\73\0\1\334\1\0\1\334\2\0\3\336\6\0\4\203"+
    "\4\0\32\203\26\0\1\200\1\0\3\270\6\0\1\203"+
    "\1\267\2\203\4\0\5\203\1\267\24\203\23\0\1\334"+
    "\1\0\1\334\2\0\3\207\6\0\2\207\2\203\4\0"+
    "\32\203\23\0\1\334\1\0\1\334\2\0\3\211\6\0"+
    "\4\203\4\0\1\203\6\211\23\203\23\0\1\334\1\0"+
    "\1\334\2\0\3\214\6\0\2\214\63\0\1\334\1\0"+
    "\1\334\2\0\3\216\17\0\6\216\46\0\1\334\1\0"+
    "\1\334\2\0\3\337\6\0\4\203\4\0\32\203\23\0"+
    "\1\334\1\0\1\334\2\0\3\337\6\0\4\222\4\0"+
    "\1\203\31\222\30\0\3\33\6\0\4\33\4\0\13\33"+
    "\1\340\16\33\30\0\3\33\6\0\4\33\4\0\23\33"+
    "\1\341\6\33\30\0\3\33\6\0\4\33\4\0\11\33"+
    "\1\342\20\33\30\0\3\33\6\0\4\33\4\0\24\33"+
    "\1\343\5\33\30\0\3\33\6\0\4\33\4\0\14\33"+
    "\1\344\15\33\30\0\3\33\6\0\4\33\4\0\21\33"+
    "\1\345\10\33\30\0\3\33\6\0\4\33\4\0\23\33"+
    "\1\346\6\33\30\0\3\33\6\0\4\33\4\0\22\33"+
    "\1\347\7\33\30\0\3\33\6\0\4\33\4\0\21\33"+
    "\1\350\10\33\30\0\3\33\6\0\4\33\4\0\23\33"+
    "\1\351\6\33\30\0\3\33\6\0\4\33\4\0\5\33"+
    "\1\352\24\33\30\0\3\33\6\0\4\33\4\0\17\33"+
    "\1\353\12\33\30\0\3\33\6\0\4\33\4\0\11\33"+
    "\1\354\20\33\30\0\3\33\6\0\4\33\4\0\3\33"+
    "\1\355\26\33\30\0\3\33\6\0\4\33\4\0\3\33"+
    "\1\356\26\33\30\0\3\33\6\0\4\33\4\0\4\33"+
    "\1\357\25\33\30\0\3\33\6\0\4\33\4\0\16\33"+
    "\1\360\13\33\30\0\3\33\6\0\4\33\4\0\7\33"+
    "\1\361\22\33\30\0\3\33\6\0\4\33\4\0\23\33"+
    "\1\362\6\33\30\0\3\33\6\0\4\33\4\0\5\33"+
    "\1\363\24\33\23\0\1\334\1\0\1\334\2\0\3\364"+
    "\100\0\3\335\100\0\3\336\6\0\4\203\4\0\32\203"+
    "\30\0\3\337\6\0\1\203\1\267\2\203\4\0\5\203"+
    "\1\267\24\203\30\0\3\33\6\0\4\33\4\0\16\33"+
    "\1\365\13\33\30\0\3\33\6\0\4\33\4\0\14\33"+
    "\1\366\15\33\30\0\3\33\6\0\4\33\4\0\5\33"+
    "\1\367\24\33\30\0\3\33\6\0\4\33\4\0\16\33"+
    "\1\370\13\33\30\0\3\33\6\0\4\33\4\0\23\33"+
    "\1\371\6\33\30\0\3\33\6\0\4\33\4\0\16\33"+
    "\1\372\13\33\30\0\3\33\6\0\4\33\4\0\4\33"+
    "\1\373\25\33\30\0\3\33\6\0\4\33\4\0\6\33"+
    "\1\374\23\33\30\0\3\33\6\0\4\33\4\0\3\33"+
    "\1\375\26\33\30\0\3\33\6\0\4\33\4\0\23\33"+
    "\1\376\6\33\30\0\3\33\6\0\4\33\4\0\10\33"+
    "\1\377\21\33\30\0\3\33\6\0\4\33\4\0\5\33"+
    "\1\u0100\24\33\30\0\3\33\6\0\4\33\4\0\16\33"+
    "\1\u0101\13\33\30\0\3\33\6\0\4\33\4\0\11\33"+
    "\1\u0102\20\33\30\0\3\364\7\0\1\266\13\0\1\266"+
    "\54\0\3\33\6\0\4\33\4\0\24\33\1\u0103\5\33"+
    "\30\0\3\33\6\0\4\33\4\0\23\33\1\u0104\6\33"+
    "\30\0\3\33\6\0\4\33\4\0\5\33\1\u0105\24\33"+
    "\30\0\3\33\6\0\4\33\4\0\6\33\1\u0106\23\33"+
    "\30\0\3\33\6\0\4\33\4\0\5\33\1\u0107\24\33"+
    "\30\0\3\33\6\0\4\33\4\0\14\33\1\u0108\15\33"+
    "\30\0\3\33\6\0\4\33\4\0\5\33\1\u0109\24\33"+
    "\30\0\3\33\6\0\4\33\4\0\21\33\1\u010a\10\33"+
    "\30\0\3\33\6\0\4\33\4\0\4\33\1\u010b\25\33"+
    "\30\0\3\33\6\0\4\33\4\0\5\33\1\u010c\24\33"+
    "\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12998];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\6\1\2\11\2\1\1\11\5\1\2\11"+
    "\3\1\1\11\1\1\2\11\20\1\1\11\1\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\0\3\11\2\0\2\11"+
    "\3\0\4\11\1\1\1\0\1\1\1\11\1\0\5\1"+
    "\1\0\4\1\3\11\1\1\1\11\31\1\10\11\5\0"+
    "\1\1\1\11\22\1\2\11\35\1\3\0\1\1\1\0"+
    "\44\1\2\0\60\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[268];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	// string generation with STRING state
	private StringBuffer stringBuilder = new StringBuffer();

	// error lists
	ArrayList<TokenError> errorList = new ArrayList<>();

	public ArrayList<TokenError> getErrorList() {
		ArrayList<TokenError> errorsList = (ArrayList<TokenError>) this.errorList.clone();
		this.errorList.clear();
		return errorsList;
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) throws IllegalTokenException {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new IllegalTokenException(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  throws IllegalTokenException {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public Symbol next_token() throws java.io.IOException, IllegalTokenException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { this.errorList.add(new TokenError(yyline, yycolumn, yytext(), "Illegal character"));
	throw new IllegalTokenException("Illegal character <" + yytext() + ">" + "[Line:" + yyline + ",Column:" + yycolumn + "]");
            }
            // fall through
          case 100: break;
          case 2:
            { /* do nothing */
            }
            // fall through
          case 101: break;
          case 3:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_NEGATION);
            }
            // fall through
          case 102: break;
          case 4:
            { stringBuilder.setLength(0); yybegin(STRING);
            }
            // fall through
          case 103: break;
          case 5:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_MOD);
            }
            // fall through
          case 104: break;
          case 6:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_AND);
            }
            // fall through
          case 105: break;
          case 7:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_WRAPPERPARENTHESISLEFT);
            }
            // fall through
          case 106: break;
          case 8:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_WRAPPERPARENTHESISRIGHT);
            }
            // fall through
          case 107: break;
          case 9:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_MULT);
            }
            // fall through
          case 108: break;
          case 10:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_PLUS);
            }
            // fall through
          case 109: break;
          case 11:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_COMMA);
            }
            // fall through
          case 110: break;
          case 12:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_MINUS);
            }
            // fall through
          case 111: break;
          case 13:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_PROPOPERATOR);
            }
            // fall through
          case 112: break;
          case 14:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_DIV);
            }
            // fall through
          case 113: break;
          case 15:
            { return new LiteralToken(yyline, yycolumn, yytext()).createSymbol(sym.LIT_DECIMALVALUE);
            }
            // fall through
          case 114: break;
          case 16:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_TERNARYOPERATIONDOUBLEDOT);
            }
            // fall through
          case 115: break;
          case 17:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_INSTRUCTIONENDOPERATOR);
            }
            // fall through
          case 116: break;
          case 18:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_LT);
            }
            // fall through
          case 117: break;
          case 19:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_ASIG);
            }
            // fall through
          case 118: break;
          case 20:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_GT);
            }
            // fall through
          case 119: break;
          case 21:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_TERNARYOPERATORQUESTIONMARK);
            }
            // fall through
          case 120: break;
          case 22:
            { return new IdentifierToken(yyline, yycolumn, yytext()).createSymbol(sym.IDENT);
            }
            // fall through
          case 121: break;
          case 23:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_WRAPPERSQUAREPARENTHESISLEFT);
            }
            // fall through
          case 122: break;
          case 24:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_WRAPPERSQUAREPARENTHESISRIGHT);
            }
            // fall through
          case 123: break;
          case 25:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_XOR);
            }
            // fall through
          case 124: break;
          case 26:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_WRAPPERKEYPARENTHESISLEFT);
            }
            // fall through
          case 125: break;
          case 27:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_OR);
            }
            // fall through
          case 126: break;
          case 28:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_WRAPPERKEYPARENTHESISRIGHT);
            }
            // fall through
          case 127: break;
          case 29:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_NOT);
            }
            // fall through
          case 128: break;
          case 30:
            { stringBuilder.append( yytext() );
            }
            // fall through
          case 129: break;
          case 31:
            { yybegin(YYINITIAL);
		return new LiteralToken(yyline, yycolumn, stringBuilder.toString()).createSymbol(sym.LIT_STRINGDEF);
            }
            // fall through
          case 130: break;
          case 32:
            { stringBuilder.append('\\');
            }
            // fall through
          case 131: break;
          case 33:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_NOTEQUALCOMP);
            }
            // fall through
          case 132: break;
          case 34:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_MODASSIGN);
            }
            // fall through
          case 133: break;
          case 35:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_ANDCOMP);
            }
            // fall through
          case 134: break;
          case 36:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_ANDASSIGN);
            }
            // fall through
          case 135: break;
          case 37:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_MULTASSIGN);
            }
            // fall through
          case 136: break;
          case 38:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_PLUSPLUSASSIGN);
            }
            // fall through
          case 137: break;
          case 39:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_PLUSASSIGN);
            }
            // fall through
          case 138: break;
          case 40:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_MINUSMINUSASSIGN);
            }
            // fall through
          case 139: break;
          case 41:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_MINUSASSIGN);
            }
            // fall through
          case 140: break;
          case 42:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_POINTEROPERATOR);
            }
            // fall through
          case 141: break;
          case 43:
            { return new LiteralToken(yyline, yycolumn, yytext()).createSymbol(sym.LIT_FLOATVALUE);
            }
            // fall through
          case 142: break;
          case 44:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_DIVASSIGN);
            }
            // fall through
          case 143: break;
          case 45:
            { return new LiteralToken(yyline, yycolumn, yytext()).createSymbol(sym.LIT_OCTALVALUE);
            }
            // fall through
          case 144: break;
          case 46:
            { this.errorList.add(new TokenError(yyline, yycolumn, yytext(), "Literal octal value must contain [0-7] digits"));
            }
            // fall through
          case 145: break;
          case 47:
            { this.errorList.add(new TokenError(yyline, yycolumn, yytext(), "Identifier cannot start with number(s)"));
            }
            // fall through
          case 146: break;
          case 48:
            { this.errorList.add(new TokenError(yyline, yycolumn, yytext(), "Literal integer value must contain [0-9] digits"));
            }
            // fall through
          case 147: break;
          case 49:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_SHIFTOPLEFT);
            }
            // fall through
          case 148: break;
          case 50:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_LTE);
            }
            // fall through
          case 149: break;
          case 51:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_EQUALCOMP);
            }
            // fall through
          case 150: break;
          case 52:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_GTE);
            }
            // fall through
          case 151: break;
          case 53:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_SHIFTOPRIGHT);
            }
            // fall through
          case 152: break;
          case 54:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_NOTASSIGN);
            }
            // fall through
          case 153: break;
          case 55:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_DO);
            }
            // fall through
          case 154: break;
          case 56:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_IF);
            }
            // fall through
          case 155: break;
          case 57:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_ORASSIGN);
            }
            // fall through
          case 156: break;
          case 58:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_ORCOMP);
            }
            // fall through
          case 157: break;
          case 59:
            { stringBuilder.append('\"');
            }
            // fall through
          case 158: break;
          case 60:
            { stringBuilder.append('\n');
            }
            // fall through
          case 159: break;
          case 61:
            { stringBuilder.append('\r');
            }
            // fall through
          case 160: break;
          case 62:
            { stringBuilder.append('\t');
            }
            // fall through
          case 161: break;
          case 63:
            { return new LiteralToken(yyline, yycolumn, yytext()).createSymbol(sym.LIT_STRINGDEF);
            }
            // fall through
          case 162: break;
          case 64:
            { return new LiteralToken(yyline, yycolumn, yytext()).createSymbol(sym.LIT_CHARVALUE);
            }
            // fall through
          case 163: break;
          case 65:
            { return new LiteralToken(yyline, yycolumn, yytext()).createSymbol(sym.LIT_HEXVALUE);
            }
            // fall through
          case 164: break;
          case 66:
            { this.errorList.add(new TokenError(yyline, yycolumn, yytext(), "Literal hexadecimal value must contain 0-9 or (a-f|A-F) "));
            }
            // fall through
          case 165: break;
          case 67:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_SHIFTLEFTASSIGN);
            }
            // fall through
          case 166: break;
          case 68:
            { return new OperatorToken(yyline, yycolumn, yytext()).createSymbol(sym.OP_SHIFTRIGHTASSIGN);
            }
            // fall through
          case 167: break;
          case 69:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_FOR);
            }
            // fall through
          case 168: break;
          case 70:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_INT);
            }
            // fall through
          case 169: break;
          case 71:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_AUTO);
            }
            // fall through
          case 170: break;
          case 72:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_CASE);
            }
            // fall through
          case 171: break;
          case 73:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_CHAR);
            }
            // fall through
          case 172: break;
          case 74:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_ELSE);
            }
            // fall through
          case 173: break;
          case 75:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_ENUM);
            }
            // fall through
          case 174: break;
          case 76:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_GOTO);
            }
            // fall through
          case 175: break;
          case 77:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_LONG);
            }
            // fall through
          case 176: break;
          case 78:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_VOID);
            }
            // fall through
          case 177: break;
          case 79:
            { return new LiteralToken(yyline, yycolumn, yytext()).createSymbol(sym.LIT_EXPONENTIALDEF);
            }
            // fall through
          case 178: break;
          case 80:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_BREAK);
            }
            // fall through
          case 179: break;
          case 81:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_CONST);
            }
            // fall through
          case 180: break;
          case 82:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_FLOAT);
            }
            // fall through
          case 181: break;
          case 83:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_SHORT);
            }
            // fall through
          case 182: break;
          case 84:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_UNION);
            }
            // fall through
          case 183: break;
          case 85:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_WHILE);
            }
            // fall through
          case 184: break;
          case 86:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_DOUBLE);
            }
            // fall through
          case 185: break;
          case 87:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_EXTERN);
            }
            // fall through
          case 186: break;
          case 88:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_RETURN);
            }
            // fall through
          case 187: break;
          case 89:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_SIGNED);
            }
            // fall through
          case 188: break;
          case 90:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_SIZEOF);
            }
            // fall through
          case 189: break;
          case 91:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_STATIC);
            }
            // fall through
          case 190: break;
          case 92:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_STRUCT);
            }
            // fall through
          case 191: break;
          case 93:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_SWITCH);
            }
            // fall through
          case 192: break;
          case 94:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_DEFAULT);
            }
            // fall through
          case 193: break;
          case 95:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_TYPEDEF);
            }
            // fall through
          case 194: break;
          case 96:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_CONTINUE);
            }
            // fall through
          case 195: break;
          case 97:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_REGISTER);
            }
            // fall through
          case 196: break;
          case 98:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_UNSIGNED);
            }
            // fall through
          case 197: break;
          case 99:
            { return new KeywordToken(yyline, yycolumn, yytext()).createSymbol(sym.KW_VOLATILE);
            }
            // fall through
          case 198: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
