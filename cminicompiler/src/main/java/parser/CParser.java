
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.CLexer;
import handler.Analyzer;
import model.Token;
import errors.SyntaxError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\273\000\002\002\004\000\002\050\003\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\002\000\002\063\004\000\002\063\004\000" +
    "\002\063\005\000\002\063\003\000\002\063\004\000\002" +
    "\063\004\000\002\063\004\000\002\004\007\000\002\002" +
    "\004\000\002\002\003\000\002\003\005\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\054\007\000" +
    "\002\054\007\000\002\054\007\000\002\054\010\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\010" +
    "\000\002\037\004\000\002\037\004\000\002\037\003\000" +
    "\002\037\003\000\002\051\010\000\002\051\010\000\002" +
    "\051\010\000\002\051\006\000\002\051\011\000\002\040" +
    "\007\000\002\041\006\000\002\041\006\000\002\041\006" +
    "\000\002\041\005\000\002\041\003\000\002\057\005\000" +
    "\002\057\006\000\002\057\007\000\002\042\011\000\002" +
    "\042\003\000\002\043\006\000\002\043\006\000\002\043" +
    "\003\000\002\052\011\000\002\052\011\000\002\052\011" +
    "\000\002\052\007\000\002\044\013\000\002\044\003\000" +
    "\002\053\013\000\002\053\013\000\002\053\013\000\002" +
    "\053\013\000\002\053\013\000\002\053\013\000\002\045" +
    "\003\000\002\045\005\000\002\045\003\000\002\045\002" +
    "\000\002\046\005\000\002\046\003\000\002\046\002\000" +
    "\002\014\005\000\002\014\004\000\002\014\004\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\006\000\002\014\005\000\002\014\006" +
    "\000\002\014\002\000\002\030\004\000\002\031\010\000" +
    "\002\060\007\000\002\060\010\000\002\060\011\000\002" +
    "\060\011\000\002\060\011\000\002\060\011\000\002\060" +
    "\011\000\002\032\004\000\002\033\003\000\002\033\005" +
    "\000\002\033\005\000\002\033\007\000\002\056\004\000" +
    "\002\007\005\000\002\007\003\000\002\010\003\000\002" +
    "\011\005\000\002\011\003\000\002\012\004\000\002\012" +
    "\005\000\002\012\007\000\002\061\002\000\002\061\005" +
    "\000\002\061\005\000\002\016\005\000\002\016\003\000" +
    "\002\016\003\000\002\017\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\004\000\002\020\004\000\002\020" +
    "\005\000\002\020\007\000\002\020\004\000\002\020\004" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\004\000\002\021\005\000\002\021\007\000\002" +
    "\022\003\000\002\022\006\000\002\022\005\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\026\003\000\002\026\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\027\005\000\002\027\006\000\002\023\003" +
    "\000\002\023\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\060\002\ufffb\003\027\004\033\010\015\011" +
    "\021\015\013\021\044\025\006\026\045\031\012\042\040" +
    "\066\014\067\011\074\037\075\020\112\036\123\042\124" +
    "\034\125\043\126\031\127\010\130\026\131\007\001\002" +
    "\000\060\002\ufffb\003\027\004\033\010\015\011\021\015" +
    "\013\021\044\025\006\026\045\031\012\042\040\066\014" +
    "\067\011\074\037\075\020\112\036\123\042\124\034\125" +
    "\043\126\031\127\010\130\026\131\007\001\002\000\004" +
    "\002\000\001\002\000\010\003\uff4d\004\uff4d\120\uff4d\001" +
    "\002\000\206\003\uff77\004\uff77\006\uff77\010\uff77\011\uff77" +
    "\012\uff77\015\uff77\016\uff77\021\uff77\022\uff77\024\uff77\025" +
    "\uff77\026\uff77\030\uff77\031\uff77\036\uff77\042\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053" +
    "\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77" +
    "\062\uff77\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070" +
    "\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77" +
    "\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105" +
    "\uff77\106\uff77\107\uff77\110\uff77\112\uff77\113\uff77\116\uff77" +
    "\117\uff77\120\uff77\123\uff77\124\uff77\125\uff77\126\uff77\127" +
    "\uff77\130\uff77\131\uff77\001\002\000\206\003\uff79\004\uff79" +
    "\006\uff79\010\uff79\011\uff79\012\uff79\015\uff79\016\uff79\021" +
    "\uff79\022\uff79\024\uff79\025\uff79\026\uff79\030\uff79\031\uff79" +
    "\036\uff79\042\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79" +
    "\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064\uff79\065" +
    "\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79" +
    "\074\uff79\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79\102" +
    "\uff79\103\uff79\104\uff79\105\uff79\106\uff79\107\uff79\110\uff79" +
    "\112\uff79\113\uff79\116\uff79\117\uff79\120\uff79\123\uff79\124" +
    "\uff79\125\uff79\126\uff79\127\uff79\130\uff79\131\uff79\001\002" +
    "\000\034\004\053\066\014\067\011\074\037\075\020\112" +
    "\036\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\010\003\uff4a\004\uff4a\120\uff4a\001" +
    "\002\000\010\003\uff47\004\uff47\120\uff47\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\010\003\uff4c\004\uff4c\120\uff4c\001\002\000" +
    "\060\002\ufff7\003\ufff7\004\ufff7\010\ufff7\011\ufff7\015\ufff7" +
    "\021\ufff7\025\ufff7\026\ufff7\031\ufff7\042\ufff7\066\ufff7\067" +
    "\ufff7\074\ufff7\075\ufff7\112\ufff7\123\ufff7\124\ufff7\125\ufff7" +
    "\126\ufff7\127\ufff7\130\ufff7\131\ufff7\001\002\000\060\002" +
    "\ufffb\003\027\004\033\010\015\011\021\015\013\021\044" +
    "\025\006\026\045\031\012\042\040\066\014\067\011\074" +
    "\037\075\020\112\036\123\042\124\034\125\043\126\031" +
    "\127\010\130\026\131\007\001\002\000\206\003\uff6c\004" +
    "\uff6c\006\uff6c\010\uff6c\011\uff6c\012\uff6c\015\uff6c\016\uff6c" +
    "\021\uff6c\022\uff6c\024\uff6c\025\uff6c\026\uff6c\030\uff6c\031" +
    "\uff6c\036\uff6c\042\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c" +
    "\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c\055\uff6c\056" +
    "\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c" +
    "\065\uff6c\066\uff6c\067\uff6c\070\uff6c\071\uff6c\072\uff6c\073" +
    "\uff6c\074\uff6c\075\uff6c\076\uff6c\077\uff6c\100\uff6c\101\uff6c" +
    "\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110" +
    "\uff6c\112\uff6c\113\uff6c\116\uff6c\117\uff6c\120\uff6c\123\uff6c" +
    "\124\uff6c\125\uff6c\126\uff6c\127\uff6c\130\uff6c\131\uff6c\001" +
    "\002\000\020\010\015\015\013\021\044\025\006\026\045" +
    "\031\012\042\040\001\002\000\010\003\145\004\147\120" +
    "\144\001\002\000\004\120\143\001\002\000\206\003\uff8d" +
    "\004\uff8d\006\uff8d\010\uff8d\011\uff8d\012\uff8d\015\uff8d\016" +
    "\uff8d\021\uff8d\022\uff8d\024\uff8d\025\uff8d\026\uff8d\030\uff8d" +
    "\031\uff8d\036\uff8d\042\uff8d\044\uff8d\045\uff8d\046\uff8d\047" +
    "\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d" +
    "\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064" +
    "\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d" +
    "\073\uff8d\074\uff8d\075\uff8d\076\uff8d\077\uff8d\100\uff8d\101" +
    "\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d" +
    "\110\uff8d\112\uff8d\113\uff8d\116\uff8d\117\uff8d\120\uff8d\123" +
    "\uff8d\124\uff8d\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d" +
    "\001\002\000\102\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\106\100\115" +
    "\101\105\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\120\uff90\001\002\000\206\003\uff78\004\uff78\006\uff78" +
    "\010\uff78\011\uff78\012\uff78\015\uff78\016\uff78\021\uff78\022" +
    "\uff78\024\uff78\025\uff78\026\uff78\030\uff78\031\uff78\036\uff78" +
    "\042\uff78\044\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066" +
    "\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78" +
    "\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78\102\uff78\103" +
    "\uff78\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78\112\uff78" +
    "\113\uff78\116\uff78\117\uff78\120\uff78\123\uff78\124\uff78\125" +
    "\uff78\126\uff78\127\uff78\130\uff78\131\uff78\001\002\000\010" +
    "\116\141\117\142\120\140\001\002\000\004\004\137\001" +
    "\002\000\206\003\uff7a\004\uff7a\006\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\015\uff7a\016\uff7a\021\uff7a\022\uff7a\024\uff7a\025" +
    "\uff7a\026\uff7a\030\uff7a\031\uff7a\036\uff7a\042\uff7a\044\uff7a" +
    "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070" +
    "\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a" +
    "\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105" +
    "\uff7a\106\uff7a\107\uff7a\110\uff7a\112\uff7a\113\uff7a\116\uff7a" +
    "\117\uff7a\120\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a\127" +
    "\uff7a\130\uff7a\131\uff7a\001\002\000\060\002\ufffb\003\027" +
    "\004\033\010\015\011\021\015\013\021\044\025\006\026" +
    "\045\031\012\042\040\066\014\067\011\074\037\075\020" +
    "\112\036\123\042\124\034\125\043\126\031\127\010\130" +
    "\026\131\007\001\002\000\202\003\uff80\004\uff80\006\uff80" +
    "\010\uff80\011\uff80\012\uff80\015\uff80\016\uff80\021\uff80\022" +
    "\uff80\024\uff80\025\uff80\026\uff80\030\uff80\031\uff80\036\uff80" +
    "\042\uff80\044\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051" +
    "\uff80\053\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80" +
    "\061\uff80\062\uff80\063\uff80\064\uff80\065\uff80\066\uff80\067" +
    "\uff80\070\uff80\071\uff80\072\uff80\073\uff80\074\037\075\020" +
    "\076\uff80\077\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104" +
    "\uff80\106\134\107\uff80\110\uff80\112\123\113\uff80\116\uff80" +
    "\117\uff80\120\uff80\123\uff80\124\uff80\125\uff80\126\uff80\127" +
    "\uff80\130\uff80\131\uff80\001\002\000\206\003\uff7c\004\uff7c" +
    "\006\uff7c\010\uff7c\011\uff7c\012\uff7c\015\uff7c\016\uff7c\021" +
    "\uff7c\022\uff7c\024\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c" +
    "\036\uff7c\042\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050" +
    "\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c" +
    "\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065" +
    "\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c" +
    "\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102" +
    "\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c" +
    "\112\uff7c\113\uff7c\116\uff7c\117\uff7c\120\uff7c\123\uff7c\124" +
    "\uff7c\125\uff7c\126\uff7c\127\uff7c\130\uff7c\131\uff7c\001\002" +
    "\000\206\003\uff8e\004\uff8e\006\uff8e\010\uff8e\011\uff8e\012" +
    "\uff8e\015\uff8e\016\uff8e\021\uff8e\022\uff8e\024\uff8e\025\uff8e" +
    "\026\uff8e\030\uff8e\031\uff8e\036\uff8e\042\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077" +
    "\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e" +
    "\106\uff8e\107\uff8e\110\uff8e\112\uff8e\113\uff8e\116\uff8e\117" +
    "\uff8e\120\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e" +
    "\130\uff8e\131\uff8e\001\002\000\034\004\053\066\014\067" +
    "\011\074\037\075\020\112\036\123\042\124\034\125\043" +
    "\126\031\127\010\130\026\131\007\001\002\000\206\003" +
    "\uff6d\004\uff6d\006\uff6d\010\uff6d\011\uff6d\012\uff6d\015\uff6d" +
    "\016\uff6d\021\uff6d\022\uff6d\024\uff6d\025\uff6d\026\uff6d\030" +
    "\uff6d\031\uff6d\036\uff6d\042\uff6d\044\uff6d\045\uff6d\046\uff6d" +
    "\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\054\uff6d\055" +
    "\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d" +
    "\064\uff6d\065\uff6d\066\uff6d\067\uff6d\070\uff6d\071\uff6d\072" +
    "\uff6d\073\uff6d\074\uff6d\075\uff6d\076\uff6d\077\uff6d\100\uff6d" +
    "\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d\106\uff6d\107" +
    "\uff6d\110\uff6d\112\uff6d\113\uff6d\116\uff6d\117\uff6d\120\uff6d" +
    "\123\uff6d\124\uff6d\125\uff6d\126\uff6d\127\uff6d\130\uff6d\131" +
    "\uff6d\001\002\000\010\003\uff49\004\uff49\120\uff49\001\002" +
    "\000\004\120\052\001\002\000\206\003\uff7d\004\uff7d\006" +
    "\uff7d\010\uff7d\011\uff7d\012\uff7d\015\uff7d\016\uff7d\021\uff7d" +
    "\022\uff7d\024\uff7d\025\uff7d\026\uff7d\030\uff7d\031\uff7d\036" +
    "\uff7d\042\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d" +
    "\051\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d" +
    "\066\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074" +
    "\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d" +
    "\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\112" +
    "\uff7d\113\uff7d\116\uff7d\117\uff7d\120\uff7d\123\uff7d\124\uff7d" +
    "\125\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d\001\002\000" +
    "\206\003\uff7b\004\uff7b\006\uff7b\010\uff7b\011\uff7b\012\uff7b" +
    "\015\uff7b\016\uff7b\021\uff7b\022\uff7b\024\uff7b\025\uff7b\026" +
    "\uff7b\030\uff7b\031\uff7b\036\uff7b\042\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b" +
    "\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071" +
    "\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\106" +
    "\uff7b\107\uff7b\110\uff7b\112\uff7b\113\uff7b\116\uff7b\117\uff7b" +
    "\120\uff7b\123\uff7b\124\uff7b\125\uff7b\126\uff7b\127\uff7b\130" +
    "\uff7b\131\uff7b\001\002\000\010\003\uff48\004\uff48\120\uff48" +
    "\001\002\000\010\003\uff4b\004\uff4b\120\uff4b\001\002\000" +
    "\060\002\ufffb\003\027\004\033\010\015\011\021\015\013" +
    "\021\044\025\006\026\045\031\012\042\040\066\014\067" +
    "\011\074\037\075\020\112\036\123\042\124\034\125\043" +
    "\126\031\127\010\130\026\131\007\001\002\000\004\002" +
    "\050\001\002\000\004\002\001\001\002\000\004\002\ufffc" +
    "\001\002\000\060\002\uffac\003\uffac\004\uffac\010\uffac\011" +
    "\uffac\015\uffac\021\uffac\025\uffac\026\uffac\031\uffac\042\uffac" +
    "\066\uffac\067\uffac\074\uffac\075\uffac\112\uffac\123\uffac\124" +
    "\uffac\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac\001\002" +
    "\000\206\003\uff80\004\uff80\006\uff80\010\uff80\011\uff80\012" +
    "\uff80\015\uff80\016\uff80\021\uff80\022\uff80\024\uff80\025\uff80" +
    "\026\uff80\030\uff80\031\uff80\036\uff80\042\uff80\044\uff80\045" +
    "\uff80\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80" +
    "\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062" +
    "\uff80\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80" +
    "\071\uff80\072\uff80\073\uff80\074\037\075\020\076\uff80\077" +
    "\uff80\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80" +
    "\106\uff80\107\uff80\110\uff80\112\123\113\uff80\116\uff80\117" +
    "\uff80\120\uff80\123\uff80\124\uff80\125\uff80\126\uff80\127\uff80" +
    "\130\uff80\131\uff80\001\002\000\102\045\uff8e\046\uff8e\047" +
    "\uff8e\050\uff8e\051\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\076\uff8e" +
    "\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\106" +
    "\uff8e\107\uff8e\110\uff8e\113\122\001\002\000\100\045\104" +
    "\046\071\047\101\050\107\051\060\053\076\054\066\055" +
    "\070\056\102\057\114\060\064\061\103\062\067\063\061" +
    "\064\112\065\073\067\062\070\072\071\100\072\113\073" +
    "\057\076\056\077\106\100\115\101\105\102\110\103\111" +
    "\104\077\106\063\107\065\110\075\001\002\000\034\004" +
    "\uff53\066\uff53\067\uff53\074\uff53\075\uff53\112\uff53\123\uff53" +
    "\124\uff53\125\uff53\126\uff53\127\uff53\130\uff53\131\uff53\001" +
    "\002\000\034\004\uff54\066\uff54\067\uff54\074\uff54\075\uff54" +
    "\112\uff54\123\uff54\124\uff54\125\uff54\126\uff54\127\uff54\130" +
    "\uff54\131\uff54\001\002\000\034\004\uff67\066\uff67\067\uff67" +
    "\074\uff67\075\uff67\112\uff67\123\uff67\124\uff67\125\uff67\126" +
    "\uff67\127\uff67\130\uff67\131\uff67\001\002\000\034\004\uff5d" +
    "\066\uff5d\067\uff5d\074\uff5d\075\uff5d\112\uff5d\123\uff5d\124" +
    "\uff5d\125\uff5d\126\uff5d\127\uff5d\130\uff5d\131\uff5d\001\002" +
    "\000\034\004\uff5e\066\uff5e\067\uff5e\074\uff5e\075\uff5e\112" +
    "\uff5e\123\uff5e\124\uff5e\125\uff5e\126\uff5e\127\uff5e\130\uff5e" +
    "\131\uff5e\001\002\000\034\004\uff58\066\uff58\067\uff58\074" +
    "\uff58\075\uff58\112\uff58\123\uff58\124\uff58\125\uff58\126\uff58" +
    "\127\uff58\130\uff58\131\uff58\001\002\000\034\004\uff5f\066" +
    "\uff5f\067\uff5f\074\uff5f\075\uff5f\112\uff5f\123\uff5f\124\uff5f" +
    "\125\uff5f\126\uff5f\127\uff5f\130\uff5f\131\uff5f\001\002\000" +
    "\034\004\uff5a\066\uff5a\067\uff5a\074\uff5a\075\uff5a\112\uff5a" +
    "\123\uff5a\124\uff5a\125\uff5a\126\uff5a\127\uff5a\130\uff5a\131" +
    "\uff5a\001\002\000\034\004\uff65\066\uff65\067\uff65\074\uff65" +
    "\075\uff65\112\uff65\123\uff65\124\uff65\125\uff65\126\uff65\127" +
    "\uff65\130\uff65\131\uff65\001\002\000\034\004\uff62\066\uff62" +
    "\067\uff62\074\uff62\075\uff62\112\uff62\123\uff62\124\uff62\125" +
    "\uff62\126\uff62\127\uff62\130\uff62\131\uff62\001\002\000\034" +
    "\004\uff66\066\uff66\067\uff66\074\uff66\075\uff66\112\uff66\123" +
    "\uff66\124\uff66\125\uff66\126\uff66\127\uff66\130\uff66\131\uff66" +
    "\001\002\000\034\004\uff69\066\uff69\067\uff69\074\uff69\075" +
    "\uff69\112\uff69\123\uff69\124\uff69\125\uff69\126\uff69\127\uff69" +
    "\130\uff69\131\uff69\001\002\000\034\004\uff57\066\uff57\067" +
    "\uff57\074\uff57\075\uff57\112\uff57\123\uff57\124\uff57\125\uff57" +
    "\126\uff57\127\uff57\130\uff57\131\uff57\001\002\000\034\004" +
    "\uff5c\066\uff5c\067\uff5c\074\uff5c\075\uff5c\112\uff5c\123\uff5c" +
    "\124\uff5c\125\uff5c\126\uff5c\127\uff5c\130\uff5c\131\uff5c\001" +
    "\002\000\034\004\053\066\014\067\011\074\037\075\020" +
    "\112\036\123\042\124\034\125\043\126\031\127\010\130" +
    "\026\131\007\001\002\000\034\004\uff5b\066\uff5b\067\uff5b" +
    "\074\uff5b\075\uff5b\112\uff5b\123\uff5b\124\uff5b\125\uff5b\126" +
    "\uff5b\127\uff5b\130\uff5b\131\uff5b\001\002\000\034\004\uff63" +
    "\066\uff63\067\uff63\074\uff63\075\uff63\112\uff63\123\uff63\124" +
    "\uff63\125\uff63\126\uff63\127\uff63\130\uff63\131\uff63\001\002" +
    "\000\034\004\053\066\014\067\011\074\037\075\020\112" +
    "\036\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\034\004\uff56\066\uff56\067\uff56\074" +
    "\uff56\075\uff56\112\uff56\123\uff56\124\uff56\125\uff56\126\uff56" +
    "\127\uff56\130\uff56\131\uff56\001\002\000\034\004\uff6b\066" +
    "\uff6b\067\uff6b\074\uff6b\075\uff6b\112\uff6b\123\uff6b\124\uff6b" +
    "\125\uff6b\126\uff6b\127\uff6b\130\uff6b\131\uff6b\001\002\000" +
    "\034\004\uff64\066\uff64\067\uff64\074\uff64\075\uff64\112\uff64" +
    "\123\uff64\124\uff64\125\uff64\126\uff64\127\uff64\130\uff64\131" +
    "\uff64\001\002\000\034\004\uff60\066\uff60\067\uff60\074\uff60" +
    "\075\uff60\112\uff60\123\uff60\124\uff60\125\uff60\126\uff60\127" +
    "\uff60\130\uff60\131\uff60\001\002\000\034\004\uff6a\066\uff6a" +
    "\067\uff6a\074\uff6a\075\uff6a\112\uff6a\123\uff6a\124\uff6a\125" +
    "\uff6a\126\uff6a\127\uff6a\130\uff6a\131\uff6a\001\002\000\034" +
    "\004\uff4f\066\uff4f\067\uff4f\074\uff4f\075\uff4f\112\uff4f\123" +
    "\uff4f\124\uff4f\125\uff4f\126\uff4f\127\uff4f\130\uff4f\131\uff4f" +
    "\001\002\000\034\004\uff4e\066\uff4e\067\uff4e\074\uff4e\075" +
    "\uff4e\112\uff4e\123\uff4e\124\uff4e\125\uff4e\126\uff4e\127\uff4e" +
    "\130\uff4e\131\uff4e\001\002\000\034\004\uff68\066\uff68\067" +
    "\uff68\074\uff68\075\uff68\112\uff68\123\uff68\124\uff68\125\uff68" +
    "\126\uff68\127\uff68\130\uff68\131\uff68\001\002\000\034\004" +
    "\uff52\066\uff52\067\uff52\074\uff52\075\uff52\112\uff52\123\uff52" +
    "\124\uff52\125\uff52\126\uff52\127\uff52\130\uff52\131\uff52\001" +
    "\002\000\034\004\uff51\066\uff51\067\uff51\074\uff51\075\uff51" +
    "\112\uff51\123\uff51\124\uff51\125\uff51\126\uff51\127\uff51\130" +
    "\uff51\131\uff51\001\002\000\034\004\uff59\066\uff59\067\uff59" +
    "\074\uff59\075\uff59\112\uff59\123\uff59\124\uff59\125\uff59\126" +
    "\uff59\127\uff59\130\uff59\131\uff59\001\002\000\034\004\uff55" +
    "\066\uff55\067\uff55\074\uff55\075\uff55\112\uff55\123\uff55\124" +
    "\uff55\125\uff55\126\uff55\127\uff55\130\uff55\131\uff55\001\002" +
    "\000\034\004\uff61\066\uff61\067\uff61\074\uff61\075\uff61\112" +
    "\uff61\123\uff61\124\uff61\125\uff61\126\uff61\127\uff61\130\uff61" +
    "\131\uff61\001\002\000\034\004\uff50\066\uff50\067\uff50\074" +
    "\uff50\075\uff50\112\uff50\123\uff50\124\uff50\125\uff50\126\uff50" +
    "\127\uff50\130\uff50\131\uff50\001\002\000\102\045\104\046" +
    "\071\047\101\050\107\051\060\053\076\054\066\055\070" +
    "\056\102\057\114\060\064\061\103\062\067\063\061\064" +
    "\112\065\073\067\062\070\072\071\100\072\113\073\057" +
    "\076\056\077\106\100\115\101\105\102\110\103\111\104" +
    "\077\105\117\106\063\107\065\110\075\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\206\003\uff89\004\uff89\006\uff89\010\uff89\011" +
    "\uff89\012\uff89\015\uff89\016\uff89\021\uff89\022\uff89\024\uff89" +
    "\025\uff89\026\uff89\030\uff89\031\uff89\036\uff89\042\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\076\054\066\055\070\056\102\057\114\060\064\061" +
    "\103\062\067\063\061\064\112\065\073\066\uff89\067\062" +
    "\070\072\071\100\072\113\073\057\074\uff89\075\uff89\076" +
    "\056\077\106\100\115\101\105\102\110\103\111\104\uff89" +
    "\105\uff89\106\063\107\065\110\075\112\uff89\113\uff89\116" +
    "\uff89\117\uff89\120\uff89\123\uff89\124\uff89\125\uff89\126\uff89" +
    "\127\uff89\130\uff89\131\uff89\001\002\000\206\003\uff8a\004" +
    "\uff8a\006\uff8a\010\uff8a\011\uff8a\012\uff8a\015\uff8a\016\uff8a" +
    "\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026\uff8a\030\uff8a\031" +
    "\uff8a\036\uff8a\042\uff8a\044\uff8a\045\104\046\071\047\101" +
    "\050\107\051\060\052\uff8a\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\066\uff8a\067\062\070\072\071\100\072\113\073" +
    "\057\074\uff8a\075\uff8a\076\056\077\106\100\115\101\105" +
    "\102\110\103\111\104\077\105\uff8a\106\063\107\065\110" +
    "\075\112\uff8a\113\uff8a\116\uff8a\117\uff8a\120\uff8a\123\uff8a" +
    "\124\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\001" +
    "\002\000\206\003\uff8f\004\uff8f\006\uff8f\010\uff8f\011\uff8f" +
    "\012\uff8f\015\uff8f\016\uff8f\021\uff8f\022\uff8f\024\uff8f\025" +
    "\uff8f\026\uff8f\030\uff8f\031\uff8f\036\uff8f\042\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053" +
    "\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f" +
    "\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070" +
    "\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f" +
    "\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105" +
    "\uff8f\106\uff8f\107\uff8f\110\uff8f\112\uff8f\113\uff8f\116\uff8f" +
    "\117\uff8f\120\uff8f\123\uff8f\124\uff8f\125\uff8f\126\uff8f\127" +
    "\uff8f\130\uff8f\131\uff8f\001\002\000\036\004\053\066\014" +
    "\067\011\074\037\075\020\112\036\113\130\123\042\124" +
    "\034\125\043\126\031\127\010\130\026\131\007\001\002" +
    "\000\206\003\uff8b\004\uff8b\006\uff8b\010\uff8b\011\uff8b\012" +
    "\uff8b\015\uff8b\016\uff8b\021\uff8b\022\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\030\uff8b\031\uff8b\036\uff8b\042\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077" +
    "\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b" +
    "\106\uff8b\107\uff8b\110\uff8b\112\uff8b\113\uff8b\116\uff8b\117" +
    "\uff8b\120\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b" +
    "\130\uff8b\131\uff8b\001\002\000\006\052\132\113\uff9c\001" +
    "\002\000\004\113\131\001\002\000\104\045\104\046\071" +
    "\047\101\050\107\051\060\052\uff9b\053\076\054\066\055" +
    "\070\056\102\057\114\060\064\061\103\062\067\063\061" +
    "\064\112\065\073\067\062\070\072\071\100\072\113\073" +
    "\057\076\056\077\106\100\115\101\105\102\110\103\111" +
    "\104\077\106\063\107\065\110\075\113\uff9b\001\002\000" +
    "\206\003\uff7e\004\uff7e\006\uff7e\010\uff7e\011\uff7e\012\uff7e" +
    "\015\uff7e\016\uff7e\021\uff7e\022\uff7e\024\uff7e\025\uff7e\026" +
    "\uff7e\030\uff7e\031\uff7e\036\uff7e\042\uff7e\044\uff7e\045\uff7e" +
    "\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053\uff7e\054" +
    "\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e\062\uff7e" +
    "\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070\uff7e\071" +
    "\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077\uff7e" +
    "\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106" +
    "\uff7e\107\uff7e\110\uff7e\112\uff7e\113\uff7e\116\uff7e\117\uff7e" +
    "\120\uff7e\123\uff7e\124\uff7e\125\uff7e\126\uff7e\127\uff7e\130" +
    "\uff7e\131\uff7e\001\002\000\206\003\uff7f\004\uff7f\006\uff7f" +
    "\010\uff7f\011\uff7f\012\uff7f\015\uff7f\016\uff7f\021\uff7f\022" +
    "\uff7f\024\uff7f\025\uff7f\026\uff7f\030\uff7f\031\uff7f\036\uff7f" +
    "\042\uff7f\044\uff7f\045\uff7f\046\uff7f\047\uff7f\050\uff7f\051" +
    "\uff7f\052\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f\057\uff7f" +
    "\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066" +
    "\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f" +
    "\075\uff7f\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103" +
    "\uff7f\104\uff7f\105\uff7f\106\uff7f\107\uff7f\110\uff7f\112\uff7f" +
    "\113\uff7f\116\uff7f\117\uff7f\120\uff7f\123\uff7f\124\uff7f\125" +
    "\uff7f\126\uff7f\127\uff7f\130\uff7f\131\uff7f\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\004\113\uff9d\001\002\000\034\004\053\066" +
    "\014\067\011\074\037\075\020\112\036\123\042\124\034" +
    "\125\043\126\031\127\010\130\026\131\007\001\002\000" +
    "\174\004\uff92\006\uff92\010\uff92\011\uff92\012\uff92\015\uff92" +
    "\016\uff92\021\uff92\022\uff92\024\uff92\025\uff92\026\uff92\030" +
    "\uff92\031\uff92\036\uff92\042\uff92\044\uff92\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\066\uff92\070\072\071\100\072\113\073\057\074" +
    "\uff92\075\uff92\076\056\077\106\100\115\101\105\102\110" +
    "\103\111\104\077\106\063\107\065\110\075\112\uff92\116" +
    "\uff92\117\uff92\120\uff92\123\uff92\124\uff92\125\uff92\126\uff92" +
    "\127\uff92\130\uff92\131\uff92\001\002\000\004\002\ufffd\001" +
    "\002\000\206\003\uff8c\004\uff8c\006\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\015\uff8c\016\uff8c\021\uff8c\022\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\030\uff8c\031\uff8c\036\uff8c\042\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c" +
    "\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070" +
    "\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c" +
    "\077\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\uff8c\110\uff8c\112\uff8c\113\uff8c\116\uff8c" +
    "\117\uff8c\120\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c\127" +
    "\uff8c\130\uff8c\131\uff8c\001\002\000\060\002\ufff6\003\ufff6" +
    "\004\ufff6\010\ufff6\011\ufff6\015\ufff6\021\ufff6\025\ufff6\026" +
    "\ufff6\031\ufff6\042\ufff6\066\ufff6\067\ufff6\074\ufff6\075\ufff6" +
    "\112\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130" +
    "\ufff6\131\ufff6\001\002\000\060\002\ufff4\003\ufff4\004\ufff4" +
    "\010\ufff4\011\ufff4\015\ufff4\021\ufff4\025\ufff4\026\ufff4\031" +
    "\ufff4\042\ufff4\066\ufff4\067\ufff4\074\ufff4\075\ufff4\112\ufff4" +
    "\123\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131" +
    "\ufff4\001\002\000\060\002\ufff5\003\ufff5\004\ufff5\010\ufff5" +
    "\011\ufff5\015\ufff5\021\ufff5\025\ufff5\026\ufff5\031\ufff5\042" +
    "\ufff5\066\ufff5\067\ufff5\074\ufff5\075\ufff5\112\ufff5\123\ufff5" +
    "\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5\001" +
    "\002\000\060\002\ufff9\003\ufff9\004\ufff9\010\ufff9\011\ufff9" +
    "\015\ufff9\021\ufff9\025\ufff9\026\ufff9\031\ufff9\042\ufff9\066" +
    "\ufff9\067\ufff9\074\ufff9\075\ufff9\112\ufff9\123\ufff9\124\ufff9" +
    "\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\001\002\000" +
    "\060\002\ufffa\003\ufffa\004\ufffa\010\ufffa\011\ufffa\015\ufffa" +
    "\021\ufffa\025\ufffa\026\ufffa\031\ufffa\042\ufffa\066\ufffa\067" +
    "\ufffa\074\ufffa\075\ufffa\112\ufffa\123\ufffa\124\ufffa\125\ufffa" +
    "\126\ufffa\127\ufffa\130\ufffa\131\ufffa\001\002\000\004\120" +
    "\u0143\001\002\000\104\003\uffa3\004\uffa3\006\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\015\uffa3\016\uffa3\021\uffa3\022\uffa3\024" +
    "\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\036\uffa3\042\uffa3" +
    "\044\uffa3\066\uffa3\067\uffa3\074\uffa3\075\uffa3\112\uffa3\116" +
    "\uffa3\117\uffa3\120\uffa3\123\uffa3\124\uffa3\125\uffa3\126\uffa3" +
    "\127\uffa3\130\uffa3\131\uffa3\001\002\000\012\052\151\106" +
    "\152\112\150\120\uffa2\001\002\000\024\010\015\011\165" +
    "\015\013\021\044\025\006\026\045\031\012\042\040\113" +
    "\162\001\002\000\004\004\156\001\002\000\034\004\053" +
    "\066\014\067\011\074\037\075\020\112\036\123\042\124" +
    "\034\125\043\126\031\127\010\130\026\131\007\001\002" +
    "\000\200\003\uffa1\004\uffa1\006\uffa1\010\uffa1\011\uffa1\012" +
    "\uffa1\015\uffa1\016\uffa1\021\uffa1\022\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\030\uffa1\031\uffa1\036\uffa1\042\uffa1\044\uffa1\045" +
    "\104\046\071\047\101\050\107\051\060\052\154\053\076" +
    "\054\066\055\070\056\102\057\114\060\064\061\103\062" +
    "\067\063\061\064\112\065\073\066\uffa1\070\072\071\100" +
    "\072\113\073\057\074\uffa1\075\uffa1\076\056\077\106\100" +
    "\115\101\105\102\110\103\111\104\077\106\063\107\065" +
    "\110\075\112\uffa1\116\uffa1\117\uffa1\120\uffa1\123\uffa1\124" +
    "\uffa1\125\uffa1\126\uffa1\127\uffa1\130\uffa1\131\uffa1\001\002" +
    "\000\004\004\156\001\002\000\104\003\uff9f\004\uff9f\006" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\015\uff9f\016\uff9f\021\uff9f" +
    "\022\uff9f\024\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f\036" +
    "\uff9f\042\uff9f\044\uff9f\066\uff9f\067\uff9f\074\uff9f\075\uff9f" +
    "\112\uff9f\116\uff9f\117\uff9f\120\uff9f\123\uff9f\124\uff9f\125" +
    "\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f\001\002\000\110" +
    "\003\uffa2\004\uffa2\006\uffa2\010\uffa2\011\uffa2\012\uffa2\015" +
    "\uffa2\016\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2" +
    "\030\uffa2\031\uffa2\036\uffa2\042\uffa2\044\uffa2\052\151\066" +
    "\uffa2\067\uffa2\074\uffa2\075\uffa2\106\152\112\uffa2\116\uffa2" +
    "\117\uffa2\120\uffa2\123\uffa2\124\uffa2\125\uffa2\126\uffa2\127" +
    "\uffa2\130\uffa2\131\uffa2\001\002\000\104\003\uffa0\004\uffa0" +
    "\006\uffa0\010\uffa0\011\uffa0\012\uffa0\015\uffa0\016\uffa0\021" +
    "\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0\030\uffa0\031\uffa0" +
    "\036\uffa0\042\uffa0\044\uffa0\066\uffa0\067\uffa0\074\uffa0\075" +
    "\uffa0\112\uffa0\116\uffa0\117\uffa0\120\uffa0\123\uffa0\124\uffa0" +
    "\125\uffa0\126\uffa0\127\uffa0\130\uffa0\131\uffa0\001\002\000" +
    "\006\052\u0141\113\uff99\001\002\000\004\113\u0140\001\002" +
    "\000\004\116\ufff1\001\002\000\004\004\u013f\001\002\000" +
    "\004\116\173\001\002\000\020\010\015\015\013\021\044" +
    "\025\006\026\045\031\012\042\040\001\002\000\004\004" +
    "\167\001\002\000\010\052\uff97\106\170\113\uff97\001\002" +
    "\000\022\004\171\123\042\124\034\125\043\126\031\127" +
    "\010\130\026\131\007\001\002\000\010\052\uff80\112\123" +
    "\113\uff80\001\002\000\006\052\uff96\113\uff96\001\002\000" +
    "\076\004\033\010\015\011\203\015\013\016\221\021\044" +
    "\022\201\024\214\025\006\026\045\030\207\031\012\036" +
    "\213\042\040\044\223\066\014\067\011\074\037\075\020" +
    "\112\036\116\205\117\uffad\120\224\123\042\124\034\125" +
    "\043\126\031\127\010\130\026\131\007\001\002\000\060" +
    "\002\ufff3\003\ufff3\004\ufff3\010\ufff3\011\ufff3\015\ufff3\021" +
    "\ufff3\025\ufff3\026\ufff3\031\ufff3\042\ufff3\066\ufff3\067\ufff3" +
    "\074\ufff3\075\ufff3\112\ufff3\123\ufff3\124\ufff3\125\ufff3\126" +
    "\ufff3\127\ufff3\130\ufff3\131\ufff3\001\002\000\102\004\uffce" +
    "\006\uffce\010\uffce\011\uffce\012\uffce\015\uffce\016\uffce\021" +
    "\uffce\022\uffce\024\uffce\025\uffce\026\uffce\030\uffce\031\uffce" +
    "\036\uffce\042\uffce\044\uffce\066\uffce\067\uffce\074\uffce\075" +
    "\uffce\112\uffce\116\uffce\117\uffce\120\uffce\123\uffce\124\uffce" +
    "\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce\001\002\000" +
    "\102\004\uffe5\006\uffe5\010\uffe5\011\uffe5\012\uffe5\015\uffe5" +
    "\016\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\030" +
    "\uffe5\031\uffe5\036\uffe5\042\uffe5\044\uffe5\066\uffe5\067\uffe5" +
    "\074\uffe5\075\uffe5\112\uffe5\116\uffe5\117\uffe5\120\uffe5\123" +
    "\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5" +
    "\001\002\000\102\004\uffc5\006\uffc5\010\uffc5\011\uffc5\012" +
    "\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\030\uffc5\031\uffc5\036\uffc5\042\uffc5\044\uffc5\066" +
    "\uffc5\067\uffc5\074\uffc5\075\uffc5\112\uffc5\116\uffc5\117\uffc5" +
    "\120\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130" +
    "\uffc5\131\uffc5\001\002\000\102\004\uffe3\006\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\036\uffe3\042\uffe3" +
    "\044\uffe3\066\uffe3\067\uffe3\074\uffe3\075\uffe3\112\uffe3\116" +
    "\uffe3\117\uffe3\120\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3" +
    "\127\uffe3\130\uffe3\131\uffe3\001\002\000\006\003\u0112\112" +
    "\u0111\001\002\000\102\004\uffe8\006\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\015\uffe8\016\uffe8\021\uffe8\022\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\036\uffe8\042\uffe8\044\uffe8" +
    "\066\uffe8\067\uffe8\074\uffe8\075\uffe8\112\uffe8\116\uffe8\117" +
    "\uffe8\120\uffe8\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8" +
    "\130\uffe8\131\uffe8\001\002\000\020\010\015\015\013\021" +
    "\044\025\006\026\045\031\012\042\040\001\002\000\004" +
    "\004\156\001\002\000\076\004\033\010\015\011\203\015" +
    "\013\016\221\021\044\022\201\024\214\025\006\026\045" +
    "\030\207\031\012\036\213\042\040\044\223\066\014\067" +
    "\011\074\037\075\020\112\036\116\205\117\uffad\120\224" +
    "\123\042\124\034\125\043\126\031\127\010\130\026\131" +
    "\007\001\002\000\004\120\305\001\002\000\034\004\053" +
    "\066\014\067\011\074\037\075\020\112\036\123\042\124" +
    "\034\125\043\126\031\127\010\130\026\131\007\001\002" +
    "\000\200\003\310\004\uff90\006\uff90\010\uff90\011\uff90\012" +
    "\uff90\015\uff90\016\uff90\021\uff90\022\uff90\024\uff90\025\uff90" +
    "\026\uff90\030\uff90\031\uff90\036\uff90\042\uff90\044\uff90\045" +
    "\104\046\071\047\101\050\107\051\060\053\076\054\066" +
    "\055\070\056\102\057\114\060\064\061\103\062\067\063" +
    "\061\064\112\065\073\066\uff90\067\062\070\072\071\100" +
    "\072\113\073\057\074\uff90\075\uff90\076\056\077\106\100" +
    "\115\101\105\102\110\103\111\104\077\106\063\107\065" +
    "\110\075\112\uff90\116\uff90\117\uff90\120\307\123\uff90\124" +
    "\uff90\125\uff90\126\uff90\127\uff90\130\uff90\131\uff90\001\002" +
    "\000\102\004\uffe6\006\uffe6\010\uffe6\011\uffe6\012\uffe6\015" +
    "\uffe6\016\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\030\uffe6\031\uffe6\036\uffe6\042\uffe6\044\uffe6\066\uffe6\067" +
    "\uffe6\074\uffe6\075\uffe6\112\uffe6\116\uffe6\117\uffe6\120\uffe6" +
    "\123\uffe6\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131" +
    "\uffe6\001\002\000\102\004\033\006\uffad\010\015\011\203" +
    "\012\uffad\015\013\016\221\021\044\022\201\024\214\025" +
    "\006\026\045\030\207\031\012\036\213\042\040\044\223" +
    "\066\014\067\011\074\037\075\020\112\036\116\205\117" +
    "\uffad\120\224\123\042\124\034\125\043\126\031\127\010" +
    "\130\026\131\007\001\002\000\004\112\335\001\002\000" +
    "\006\003\274\112\273\001\002\000\102\004\uffe7\006\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\015\uffe7\016\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\036\uffe7" +
    "\042\uffe7\044\uffe7\066\uffe7\067\uffe7\074\uffe7\075\uffe7\112" +
    "\uffe7\116\uffe7\117\uffe7\120\uffe7\123\uffe7\124\uffe7\125\uffe7" +
    "\126\uffe7\127\uffe7\130\uffe7\131\uffe7\001\002\000\102\004" +
    "\uffe4\006\uffe4\010\uffe4\011\uffe4\012\uffe4\015\uffe4\016\uffe4" +
    "\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031" +
    "\uffe4\036\uffe4\042\uffe4\044\uffe4\066\uffe4\067\uffe4\074\uffe4" +
    "\075\uffe4\112\uffe4\116\uffe4\117\uffe4\120\uffe4\123\uffe4\124" +
    "\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\001\002" +
    "\000\102\004\033\006\uffad\010\015\011\203\012\uffad\015" +
    "\013\016\221\021\044\022\201\024\214\025\006\026\045" +
    "\030\207\031\012\036\213\042\040\044\223\066\014\067" +
    "\011\074\037\075\020\112\036\116\205\117\uffad\120\224" +
    "\123\042\124\034\125\043\126\031\127\010\130\026\131" +
    "\007\001\002\000\102\004\uff91\006\uff91\010\uff91\011\uff91" +
    "\012\uff91\015\uff91\016\uff91\021\uff91\022\uff91\024\uff91\025" +
    "\uff91\026\uff91\030\uff91\031\uff91\036\uff91\042\uff91\044\uff91" +
    "\066\uff91\067\uff91\074\uff91\075\uff91\112\uff91\116\uff91\117" +
    "\uff91\120\270\123\uff91\124\uff91\125\uff91\126\uff91\127\uff91" +
    "\130\uff91\131\uff91\001\002\000\004\003\266\001\002\000" +
    "\004\117\265\001\002\000\006\003\227\112\226\001\002" +
    "\000\102\004\033\006\uffad\010\015\011\203\012\uffad\015" +
    "\013\016\221\021\044\022\201\024\214\025\006\026\045" +
    "\030\207\031\012\036\213\042\040\044\223\066\014\067" +
    "\011\074\037\075\020\112\036\116\205\117\uffad\120\224" +
    "\123\042\124\034\125\043\126\031\127\010\130\026\131" +
    "\007\001\002\000\102\004\uffb5\006\uffb5\010\uffb5\011\uffb5" +
    "\012\uffb5\015\uffb5\016\uffb5\021\uffb5\022\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\030\uffb5\031\uffb5\036\uffb5\042\uffb5\044\uffb5" +
    "\066\uffb5\067\uffb5\074\uffb5\075\uffb5\112\uffb5\116\uffb5\117" +
    "\uffb5\120\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5" +
    "\130\uffb5\131\uffb5\001\002\000\036\003\250\004\053\066" +
    "\014\067\011\074\037\075\020\112\036\123\042\124\034" +
    "\125\043\126\031\127\010\130\026\131\007\001\002\000" +
    "\036\004\053\066\014\067\011\074\037\075\020\112\036" +
    "\116\231\123\042\124\034\125\043\126\031\127\010\130" +
    "\026\131\007\001\002\000\102\045\104\046\071\047\101" +
    "\050\107\051\060\053\076\054\066\055\070\056\102\057" +
    "\114\060\064\061\103\062\067\063\061\064\112\065\073" +
    "\067\062\070\072\071\100\072\113\073\057\076\056\077" +
    "\106\100\115\101\105\102\110\103\111\104\077\106\063" +
    "\107\065\110\075\113\243\001\002\000\102\004\033\006" +
    "\uffad\010\015\011\203\012\uffad\015\013\016\221\021\044" +
    "\022\201\024\214\025\006\026\045\030\207\031\012\036" +
    "\213\042\040\044\223\066\014\067\011\074\037\075\020" +
    "\112\036\116\205\117\uffad\120\224\123\042\124\034\125" +
    "\043\126\031\127\010\130\026\131\007\001\002\000\004" +
    "\117\242\001\002\000\010\006\234\012\235\117\uffcb\001" +
    "\002\000\004\120\240\001\002\000\004\120\236\001\002" +
    "\000\102\004\033\006\uffad\010\015\011\203\012\uffad\015" +
    "\013\016\221\021\044\022\201\024\214\025\006\026\045" +
    "\030\207\031\012\036\213\042\040\044\223\066\014\067" +
    "\011\074\037\075\020\112\036\116\205\117\uffad\120\224" +
    "\123\042\124\034\125\043\126\031\127\010\130\026\131" +
    "\007\001\002\000\004\117\uffcc\001\002\000\102\004\033" +
    "\006\uffad\010\015\011\203\012\uffad\015\013\016\221\021" +
    "\044\022\201\024\214\025\006\026\045\030\207\031\012" +
    "\036\213\042\040\044\223\066\014\067\011\074\037\075" +
    "\020\112\036\116\205\117\uffad\120\224\123\042\124\034" +
    "\125\043\126\031\127\010\130\026\131\007\001\002\000" +
    "\004\117\uffcd\001\002\000\102\004\uffc7\006\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\015\uffc7\016\uffc7\021\uffc7\022\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\036\uffc7\042\uffc7" +
    "\044\uffc7\066\uffc7\067\uffc7\074\uffc7\075\uffc7\112\uffc7\116" +
    "\uffc7\117\uffc7\120\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7" +
    "\127\uffc7\130\uffc7\131\uffc7\001\002\000\004\116\244\001" +
    "\002\000\102\004\033\006\uffad\010\015\011\203\012\uffad" +
    "\015\013\016\221\021\044\022\201\024\214\025\006\026" +
    "\045\030\207\031\012\036\213\042\040\044\223\066\014" +
    "\067\011\074\037\075\020\112\036\116\205\117\uffad\120" +
    "\224\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\004\117\246\001\002\000\102\004" +
    "\uffca\006\uffca\010\uffca\011\uffca\012\uffca\015\uffca\016\uffca" +
    "\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca\030\uffca\031" +
    "\uffca\036\uffca\042\uffca\044\uffca\066\uffca\067\uffca\074\uffca" +
    "\075\uffca\112\uffca\116\uffca\117\uffca\120\uffca\123\uffca\124" +
    "\uffca\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\001\002" +
    "\000\104\003\255\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\106\100\115" +
    "\101\105\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\113\256\001\002\000\004\113\251\001\002\000\004" +
    "\116\252\001\002\000\102\004\033\006\uffad\010\015\011" +
    "\203\012\uffad\015\013\016\221\021\044\022\201\024\214" +
    "\025\006\026\045\030\207\031\012\036\213\042\040\044" +
    "\223\066\014\067\011\074\037\075\020\112\036\116\205" +
    "\117\uffad\120\224\123\042\124\034\125\043\126\031\127" +
    "\010\130\026\131\007\001\002\000\004\117\254\001\002" +
    "\000\102\004\uffc9\006\uffc9\010\uffc9\011\uffc9\012\uffc9\015" +
    "\uffc9\016\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\030\uffc9\031\uffc9\036\uffc9\042\uffc9\044\uffc9\066\uffc9\067" +
    "\uffc9\074\uffc9\075\uffc9\112\uffc9\116\uffc9\117\uffc9\120\uffc9" +
    "\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131" +
    "\uffc9\001\002\000\004\116\262\001\002\000\004\116\257" +
    "\001\002\000\102\004\033\006\uffad\010\015\011\203\012" +
    "\uffad\015\013\016\221\021\044\022\201\024\214\025\006" +
    "\026\045\030\207\031\012\036\213\042\040\044\223\066" +
    "\014\067\011\074\037\075\020\112\036\116\205\117\uffad" +
    "\120\224\123\042\124\034\125\043\126\031\127\010\130" +
    "\026\131\007\001\002\000\004\117\261\001\002\000\102" +
    "\004\uffcf\006\uffcf\010\uffcf\011\uffcf\012\uffcf\015\uffcf\016" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\036\uffcf\042\uffcf\044\uffcf\066\uffcf\067\uffcf\074" +
    "\uffcf\075\uffcf\112\uffcf\116\uffcf\117\uffcf\120\uffcf\123\uffcf" +
    "\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130\uffcf\131\uffcf\001" +
    "\002\000\102\004\033\006\uffad\010\015\011\203\012\uffad" +
    "\015\013\016\221\021\044\022\201\024\214\025\006\026" +
    "\045\030\207\031\012\036\213\042\040\044\223\066\014" +
    "\067\011\074\037\075\020\112\036\116\205\117\uffad\120" +
    "\224\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\004\117\264\001\002\000\102\004" +
    "\uffc8\006\uffc8\010\uffc8\011\uffc8\012\uffc8\015\uffc8\016\uffc8" +
    "\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031" +
    "\uffc8\036\uffc8\042\uffc8\044\uffc8\066\uffc8\067\uffc8\074\uffc8" +
    "\075\uffc8\112\uffc8\116\uffc8\117\uffc8\120\uffc8\123\uffc8\124" +
    "\uffc8\125\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\001\002" +
    "\000\060\002\ufff0\003\ufff0\004\ufff0\010\ufff0\011\ufff0\015" +
    "\ufff0\021\ufff0\025\ufff0\026\ufff0\031\ufff0\042\ufff0\066\ufff0" +
    "\067\ufff0\074\ufff0\075\ufff0\112\ufff0\123\ufff0\124\ufff0\125" +
    "\ufff0\126\ufff0\127\ufff0\130\ufff0\131\ufff0\001\002\000\102" +
    "\004\033\006\uffad\010\015\011\203\012\uffad\015\013\016" +
    "\221\021\044\022\201\024\214\025\006\026\045\030\207" +
    "\031\012\036\213\042\040\044\223\066\014\067\011\074" +
    "\037\075\020\112\036\116\205\117\uffad\120\224\123\042" +
    "\124\034\125\043\126\031\127\010\130\026\131\007\001" +
    "\002\000\102\004\uffaf\006\uffaf\010\uffaf\011\uffaf\012\uffaf" +
    "\015\uffaf\016\uffaf\021\uffaf\022\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\030\uffaf\031\uffaf\036\uffaf\042\uffaf\044\uffaf\066\uffaf" +
    "\067\uffaf\074\uffaf\075\uffaf\112\uffaf\116\uffaf\117\uffaf\120" +
    "\uffaf\123\uffaf\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf" +
    "\131\uffaf\001\002\000\102\004\033\006\uffad\010\015\011" +
    "\203\012\uffad\015\013\016\221\021\044\022\201\024\214" +
    "\025\006\026\045\030\207\031\012\036\213\042\040\044" +
    "\223\066\014\067\011\074\037\075\020\112\036\116\205" +
    "\117\uffad\120\224\123\042\124\034\125\043\126\031\127" +
    "\010\130\026\131\007\001\002\000\102\004\uffb4\006\uffb4" +
    "\010\uffb4\011\uffb4\012\uffb4\015\uffb4\016\uffb4\021\uffb4\022" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\036\uffb4" +
    "\042\uffb4\044\uffb4\066\uffb4\067\uffb4\074\uffb4\075\uffb4\112" +
    "\uffb4\116\uffb4\117\uffb4\120\uffb4\123\uffb4\124\uffb4\125\uffb4" +
    "\126\uffb4\127\uffb4\130\uffb4\131\uffb4\001\002\000\102\004" +
    "\uffb1\006\uffb1\010\uffb1\011\uffb1\012\uffb1\015\uffb1\016\uffb1" +
    "\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031" +
    "\uffb1\036\uffb1\042\uffb1\044\uffb1\066\uffb1\067\uffb1\074\uffb1" +
    "\075\uffb1\112\uffb1\116\uffb1\117\uffb1\120\uffb1\123\uffb1\124" +
    "\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001\002" +
    "\000\036\003\320\004\053\066\014\067\011\074\037\075" +
    "\020\112\036\123\042\124\034\125\043\126\031\127\010" +
    "\130\026\131\007\001\002\000\102\004\033\006\uffad\010" +
    "\015\011\203\012\uffad\015\013\016\221\021\044\022\201" +
    "\024\214\025\006\026\045\030\207\031\012\036\213\042" +
    "\040\044\223\066\014\067\011\074\037\075\020\112\036" +
    "\116\205\117\uffad\120\224\123\042\124\034\125\043\126" +
    "\031\127\010\130\026\131\007\001\002\000\106\003\310" +
    "\045\104\046\071\047\101\050\107\051\060\053\076\054" +
    "\066\055\070\056\102\057\114\060\064\061\103\062\067" +
    "\063\061\064\112\065\073\067\062\070\072\071\100\072" +
    "\113\073\057\076\056\077\106\100\115\101\105\102\110" +
    "\103\111\104\077\106\063\107\065\110\075\113\311\120" +
    "\307\001\002\000\102\004\033\006\uffad\010\015\011\203" +
    "\012\uffad\015\013\016\301\021\044\022\201\024\214\025" +
    "\006\026\045\030\207\031\012\036\213\042\040\044\223" +
    "\066\014\067\011\074\037\075\020\112\036\116\205\117" +
    "\uffad\120\224\123\042\124\034\125\043\126\031\127\010" +
    "\130\026\131\007\001\002\000\102\004\uffda\006\uffda\010" +
    "\uffda\011\uffda\012\uffda\015\uffda\016\uffda\021\uffda\022\uffda" +
    "\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda\036\uffda\042" +
    "\uffda\044\uffda\066\uffda\067\uffda\074\uffda\075\uffda\112\uffda" +
    "\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126" +
    "\uffda\127\uffda\130\uffda\131\uffda\001\002\000\102\004\uffdf" +
    "\006\uffdf\010\uffdf\011\uffdf\012\uffdf\015\uffdf\016\uffdf\021" +
    "\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf" +
    "\036\uffdf\042\uffdf\044\uffdf\066\uffdf\067\uffdf\074\uffdf\075" +
    "\uffdf\112\uffdf\116\uffdf\117\uffdf\120\305\123\uffdf\124\uffdf" +
    "\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000" +
    "\104\003\266\004\033\006\uffad\010\015\011\203\012\uffad" +
    "\015\013\016\221\021\044\022\201\024\214\025\006\026" +
    "\045\030\207\031\012\036\213\042\040\044\223\066\014" +
    "\067\011\074\037\075\020\112\036\116\205\117\uffad\120" +
    "\224\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\102\004\uffde\006\uffde\010\uffde\011" +
    "\uffde\012\uffde\015\uffde\016\uffde\021\uffde\022\uffde\024\uffde" +
    "\025\uffde\026\uffde\030\uffde\031\uffde\036\uffde\042\uffde\044" +
    "\uffde\066\uffde\067\uffde\074\uffde\075\uffde\112\uffde\116\uffde" +
    "\117\uffde\120\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127" +
    "\uffde\130\uffde\131\uffde\001\002\000\102\004\uffe0\006\uffe0" +
    "\010\uffe0\011\uffe0\012\uffe0\015\uffe0\016\uffe0\021\uffe0\022" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\036\uffe0" +
    "\042\uffe0\044\uffe0\066\uffe0\067\uffe0\074\uffe0\075\uffe0\112" +
    "\uffe0\116\uffe0\117\uffe0\120\uffe0\123\uffe0\124\uffe0\125\uffe0" +
    "\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002\000\102\004" +
    "\uffe1\006\uffe1\010\uffe1\011\uffe1\012\uffe1\015\uffe1\016\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031" +
    "\uffe1\036\uffe1\042\uffe1\044\uffe1\066\uffe1\067\uffe1\074\uffe1" +
    "\075\uffe1\112\uffe1\116\uffe1\117\uffe1\120\uffe1\123\uffe1\124" +
    "\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002" +
    "\000\102\004\033\006\uffad\010\015\011\203\012\uffad\015" +
    "\013\016\221\021\044\022\201\024\214\025\006\026\045" +
    "\030\207\031\012\036\213\042\040\044\223\066\014\067" +
    "\011\074\037\075\020\112\036\116\205\117\uffad\120\224" +
    "\123\042\124\034\125\043\126\031\127\010\130\026\131" +
    "\007\001\002\000\102\004\uffb2\006\uffb2\010\uffb2\011\uffb2" +
    "\012\uffb2\015\uffb2\016\uffb2\021\uffb2\022\uffb2\024\uffb2\025" +
    "\uffb2\026\uffb2\030\uffb2\031\uffb2\036\uffb2\042\uffb2\044\uffb2" +
    "\066\uffb2\067\uffb2\074\uffb2\075\uffb2\112\uffb2\116\uffb2\117" +
    "\uffb2\120\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2" +
    "\130\uffb2\131\uffb2\001\002\000\102\004\033\006\uffad\010" +
    "\015\011\203\012\uffad\015\013\016\221\021\044\022\201" +
    "\024\214\025\006\026\045\030\207\031\012\036\213\042" +
    "\040\044\223\066\014\067\011\074\037\075\020\112\036" +
    "\116\205\117\uffad\120\224\123\042\124\034\125\043\126" +
    "\031\127\010\130\026\131\007\001\002\000\004\120\314" +
    "\001\002\000\102\004\033\006\uffad\010\015\011\203\012" +
    "\uffad\015\013\016\221\021\044\022\201\024\214\025\006" +
    "\026\045\030\207\031\012\036\213\042\040\044\223\066" +
    "\014\067\011\074\037\075\020\112\036\116\205\117\uffad" +
    "\120\224\123\042\124\034\125\043\126\031\127\010\130" +
    "\026\131\007\001\002\000\102\004\033\006\uffad\010\015" +
    "\011\203\012\uffad\015\013\016\301\021\044\022\201\024" +
    "\214\025\006\026\045\030\207\031\012\036\213\042\040" +
    "\044\223\066\014\067\011\074\037\075\020\112\036\116" +
    "\205\117\uffad\120\224\123\042\124\034\125\043\126\031" +
    "\127\010\130\026\131\007\001\002\000\102\004\uffdd\006" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\015\uffdd\016\uffdd\021\uffdd" +
    "\022\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031\uffdd\036" +
    "\uffdd\042\uffdd\044\uffdd\066\uffdd\067\uffdd\074\uffdd\075\uffdd" +
    "\112\uffdd\116\uffdd\117\uffdd\120\uffdd\123\uffdd\124\uffdd\125" +
    "\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\001\002\000\102" +
    "\004\033\006\uffad\010\015\011\203\012\uffad\015\013\016" +
    "\221\021\044\022\201\024\214\025\006\026\045\030\207" +
    "\031\012\036\213\042\040\044\223\066\014\067\011\074" +
    "\037\075\020\112\036\116\205\117\uffad\120\224\123\042" +
    "\124\034\125\043\126\031\127\010\130\026\131\007\001" +
    "\002\000\102\004\uffae\006\uffae\010\uffae\011\uffae\012\uffae" +
    "\015\uffae\016\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026" +
    "\uffae\030\uffae\031\uffae\036\uffae\042\uffae\044\uffae\066\uffae" +
    "\067\uffae\074\uffae\075\uffae\112\uffae\116\uffae\117\uffae\120" +
    "\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae" +
    "\131\uffae\001\002\000\102\004\uffb3\006\uffb3\010\uffb3\011" +
    "\uffb3\012\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\030\uffb3\031\uffb3\036\uffb3\042\uffb3\044" +
    "\uffb3\066\uffb3\067\uffb3\074\uffb3\075\uffb3\112\uffb3\116\uffb3" +
    "\117\uffb3\120\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127" +
    "\uffb3\130\uffb3\131\uffb3\001\002\000\104\003\324\045\104" +
    "\046\071\047\101\050\107\051\060\053\076\054\066\055" +
    "\070\056\102\057\114\060\064\061\103\062\067\063\061" +
    "\064\112\065\073\067\062\070\072\071\100\072\113\073" +
    "\057\076\056\077\106\100\115\101\105\102\110\103\111" +
    "\104\077\106\063\107\065\110\075\113\325\001\002\000" +
    "\004\113\321\001\002\000\102\004\033\006\uffad\010\015" +
    "\011\203\012\uffad\015\013\016\221\021\044\022\201\024" +
    "\214\025\006\026\045\030\207\031\012\036\213\042\040" +
    "\044\223\066\014\067\011\074\037\075\020\112\036\116" +
    "\205\117\uffad\120\224\123\042\124\034\125\043\126\031" +
    "\127\010\130\026\131\007\001\002\000\102\004\033\006" +
    "\uffad\010\015\011\203\012\uffad\015\013\016\301\021\044" +
    "\022\201\024\214\025\006\026\045\030\207\031\012\036" +
    "\213\042\040\044\223\066\014\067\011\074\037\075\020" +
    "\112\036\116\205\117\uffad\120\224\123\042\124\034\125" +
    "\043\126\031\127\010\130\026\131\007\001\002\000\102" +
    "\004\uffdc\006\uffdc\010\uffdc\011\uffdc\012\uffdc\015\uffdc\016" +
    "\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc" +
    "\031\uffdc\036\uffdc\042\uffdc\044\uffdc\066\uffdc\067\uffdc\074" +
    "\uffdc\075\uffdc\112\uffdc\116\uffdc\117\uffdc\120\uffdc\123\uffdc" +
    "\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc\131\uffdc\001" +
    "\002\000\102\004\033\006\uffad\010\015\011\203\012\uffad" +
    "\015\013\016\221\021\044\022\201\024\214\025\006\026" +
    "\045\030\207\031\012\036\213\042\040\044\223\066\014" +
    "\067\011\074\037\075\020\112\036\116\205\117\uffad\120" +
    "\224\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\104\003\326\004\033\006\uffad\010" +
    "\015\011\203\012\uffad\015\013\016\221\021\044\022\201" +
    "\024\214\025\006\026\045\030\207\031\012\036\213\042" +
    "\040\044\223\066\014\067\011\074\037\075\020\112\036" +
    "\116\205\117\uffad\120\224\123\042\124\034\125\043\126" +
    "\031\127\010\130\026\131\007\001\002\000\102\004\033" +
    "\006\uffad\010\015\011\203\012\uffad\015\013\016\221\021" +
    "\044\022\201\024\214\025\006\026\045\030\207\031\012" +
    "\036\213\042\040\044\223\066\014\067\011\074\037\075" +
    "\020\112\036\116\205\117\uffad\120\224\123\042\124\034" +
    "\125\043\126\031\127\010\130\026\131\007\001\002\000" +
    "\102\004\033\006\uffad\010\015\011\203\012\uffad\015\013" +
    "\016\301\021\044\022\201\024\214\025\006\026\045\030" +
    "\207\031\012\036\213\042\040\044\223\066\014\067\011" +
    "\074\037\075\020\112\036\116\205\117\uffad\120\224\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\102\004\uffe2\006\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\015\uffe2\016\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\030\uffe2\031\uffe2\036\uffe2\042\uffe2\044\uffe2\066" +
    "\uffe2\067\uffe2\074\uffe2\075\uffe2\112\uffe2\116\uffe2\117\uffe2" +
    "\120\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130" +
    "\uffe2\131\uffe2\001\002\000\102\004\033\006\uffad\010\015" +
    "\011\203\012\uffad\015\013\016\301\021\044\022\201\024" +
    "\214\025\006\026\045\030\207\031\012\036\213\042\040" +
    "\044\223\066\014\067\011\074\037\075\020\112\036\116" +
    "\205\117\uffad\120\224\123\042\124\034\125\043\126\031" +
    "\127\010\130\026\131\007\001\002\000\102\004\uffd9\006" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\015\uffd9\016\uffd9\021\uffd9" +
    "\022\uffd9\024\uffd9\025\uffd9\026\uffd9\030\uffd9\031\uffd9\036" +
    "\uffd9\042\uffd9\044\uffd9\066\uffd9\067\uffd9\074\uffd9\075\uffd9" +
    "\112\uffd9\116\uffd9\117\uffd9\120\uffd9\123\uffd9\124\uffd9\125" +
    "\uffd9\126\uffd9\127\uffd9\130\uffd9\131\uffd9\001\002\000\102" +
    "\004\033\006\uffad\010\015\011\203\012\uffad\015\013\016" +
    "\301\021\044\022\201\024\214\025\006\026\045\030\207" +
    "\031\012\036\213\042\040\044\223\066\014\067\011\074" +
    "\037\075\020\112\036\116\205\117\uffad\120\224\123\042" +
    "\124\034\125\043\126\031\127\010\130\026\131\007\001" +
    "\002\000\102\004\uffdb\006\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\015\uffdb\016\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\030\uffdb\031\uffdb\036\uffdb\042\uffdb\044\uffdb\066\uffdb" +
    "\067\uffdb\074\uffdb\075\uffdb\112\uffdb\116\uffdb\117\uffdb\120" +
    "\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\127\uffdb\130\uffdb" +
    "\131\uffdb\001\002\000\022\004\337\074\037\075\020\123" +
    "\346\124\342\126\344\127\336\131\341\001\002\000\106" +
    "\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\053\uff71\054" +
    "\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71" +
    "\063\uff71\064\uff71\065\uff71\067\uff71\070\uff71\071\uff71\072" +
    "\uff71\073\uff71\076\uff71\077\uff71\100\uff71\101\uff71\102\uff71" +
    "\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71\113" +
    "\uff71\120\uff71\001\002\000\106\045\uff86\046\uff86\047\uff86" +
    "\050\uff86\051\uff86\053\uff86\054\uff86\055\uff86\056\uff86\057" +
    "\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86" +
    "\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86\076\uff86\077" +
    "\uff86\100\uff86\101\uff86\102\uff86\103\uff86\104\uff86\105\uff86" +
    "\106\uff86\107\uff86\110\uff86\112\u0103\113\uff86\001\002\000" +
    "\104\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\053\uff84" +
    "\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84\062" +
    "\uff84\063\uff84\064\uff84\065\uff84\067\uff84\070\uff84\071\uff84" +
    "\072\uff84\073\uff84\076\uff84\077\uff84\100\uff84\101\uff84\102" +
    "\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110\uff84" +
    "\113\uff84\001\002\000\106\045\uff70\046\uff70\047\uff70\050" +
    "\uff70\051\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70" +
    "\060\uff70\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70\067" +
    "\uff70\070\uff70\071\uff70\072\uff70\073\uff70\076\uff70\077\uff70" +
    "\100\uff70\101\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106" +
    "\uff70\107\uff70\110\uff70\113\uff70\120\uff70\001\002\000\106" +
    "\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\053\uff73\054" +
    "\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73\062\uff73" +
    "\063\uff73\064\uff73\065\uff73\067\uff73\070\uff73\071\uff73\072" +
    "\uff73\073\uff73\076\uff73\077\uff73\100\uff73\101\uff73\102\uff73" +
    "\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\110\uff73\113" +
    "\uff73\120\uff73\001\002\000\104\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85" +
    "\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\076\uff85\077" +
    "\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85" +
    "\106\uff85\107\uff85\110\uff85\113\uff85\001\002\000\106\045" +
    "\uff72\046\uff72\047\uff72\050\uff72\051\uff72\053\uff72\054\uff72" +
    "\055\uff72\056\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063" +
    "\uff72\064\uff72\065\uff72\067\uff72\070\uff72\071\uff72\072\uff72" +
    "\073\uff72\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103" +
    "\uff72\104\uff72\105\uff72\106\uff72\107\uff72\110\uff72\113\uff72" +
    "\120\uff72\001\002\000\102\045\104\046\071\047\101\050" +
    "\107\051\060\053\076\054\066\055\070\056\102\057\114" +
    "\060\064\061\103\062\067\063\061\064\112\065\073\067" +
    "\062\070\072\071\100\072\113\073\057\076\056\077\106" +
    "\100\115\101\105\102\110\103\111\104\352\106\063\107" +
    "\065\110\075\113\357\001\002\000\106\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\051\uff74\053\uff74\054\uff74\055\uff74\056" +
    "\uff74\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74" +
    "\065\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74\076" +
    "\uff74\077\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104\uff74" +
    "\105\uff74\106\uff74\107\uff74\110\uff74\113\uff74\120\uff74\001" +
    "\002\000\022\004\337\074\037\075\020\123\346\124\342" +
    "\126\344\127\336\131\341\001\002\000\104\045\104\046" +
    "\071\047\101\050\107\051\060\053\076\054\066\055\070" +
    "\056\102\057\114\060\064\061\103\062\067\063\061\064" +
    "\112\065\073\067\062\070\072\071\100\072\113\073\057" +
    "\076\056\077\106\100\115\101\105\102\110\103\111\104" +
    "\352\105\uff83\106\063\107\065\110\075\113\uff83\001\002" +
    "\000\022\004\337\074\037\075\020\123\346\124\342\126" +
    "\344\127\336\131\341\001\002\000\022\004\337\074\037" +
    "\075\020\123\346\124\342\126\344\127\336\131\341\001" +
    "\002\000\102\045\104\046\071\047\101\050\107\051\060" +
    "\053\076\054\066\055\070\056\102\057\114\060\064\061" +
    "\103\062\067\063\061\064\112\065\073\067\062\070\072" +
    "\071\100\072\113\073\057\076\056\077\106\100\115\101" +
    "\105\102\110\103\111\104\352\105\354\106\063\107\065" +
    "\110\075\001\002\000\022\004\337\074\037\075\020\123" +
    "\346\124\342\126\344\127\336\131\341\001\002\000\104" +
    "\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81\053\076\054" +
    "\066\055\070\056\102\057\114\060\064\061\103\062\067" +
    "\063\061\064\112\065\073\067\062\070\072\071\100\072" +
    "\113\073\057\076\056\077\106\100\115\101\105\102\110" +
    "\103\111\104\uff81\105\uff81\106\063\107\065\110\075\113" +
    "\uff81\001\002\000\104\045\104\046\071\047\101\050\107" +
    "\051\060\053\076\054\066\055\070\056\102\057\114\060" +
    "\064\061\103\062\067\063\061\064\112\065\073\067\062" +
    "\070\072\071\100\072\113\073\057\076\056\077\106\100" +
    "\115\101\105\102\110\103\111\104\352\105\uff82\106\063" +
    "\107\065\110\075\113\uff82\001\002\000\106\004\033\006" +
    "\362\007\360\010\015\011\203\012\uffad\013\364\015\013" +
    "\016\221\021\044\022\201\024\214\025\006\026\045\030" +
    "\207\031\012\036\213\042\040\044\223\066\014\067\011" +
    "\074\037\075\020\112\036\116\361\117\uffad\120\224\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\022\004\337\074\037\075\020\123\346\124" +
    "\342\126\344\127\336\131\341\001\002\000\104\004\033" +
    "\006\362\007\360\010\015\011\203\013\364\015\013\016" +
    "\221\021\044\022\201\024\214\025\006\026\045\030\207" +
    "\031\012\036\213\042\040\044\223\066\014\067\011\074" +
    "\037\075\020\112\036\116\361\117\uffad\120\224\123\042" +
    "\124\034\125\043\126\031\127\010\130\026\131\007\001" +
    "\002\000\004\120\371\001\002\000\102\004\uffd3\006\uffd3" +
    "\010\uffd3\011\uffd3\012\uffd3\015\uffd3\016\uffd3\021\uffd3\022" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\030\uffd3\031\uffd3\036\uffd3" +
    "\042\uffd3\044\uffd3\066\uffd3\067\uffd3\074\uffd3\075\uffd3\112" +
    "\uffd3\116\uffd3\117\uffd3\120\uffd3\123\uffd3\124\uffd3\125\uffd3" +
    "\126\uffd3\127\uffd3\130\uffd3\131\uffd3\001\002\000\022\004" +
    "\337\074\037\075\020\123\346\124\342\126\344\127\336" +
    "\131\341\001\002\000\102\004\uffd8\006\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\015\uffd8\016\uffd8\021\uffd8\022\uffd8\024\uffd8" +
    "\025\uffd8\026\uffd8\030\uffd8\031\uffd8\036\uffd8\042\uffd8\044" +
    "\uffd8\066\uffd8\067\uffd8\074\uffd8\075\uffd8\112\uffd8\116\uffd8" +
    "\117\uffd8\120\uffd8\123\uffd8\124\uffd8\125\uffd8\126\uffd8\127" +
    "\uffd8\130\uffd8\131\uffd8\001\002\000\102\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\067\062\070\072\071\100\072\113\073\057\076" +
    "\056\077\106\100\115\101\105\102\110\103\111\104\352" +
    "\105\367\106\063\107\065\110\075\001\002\000\106\004" +
    "\033\006\362\007\360\010\015\011\203\012\uffad\013\364" +
    "\015\013\016\221\021\044\022\201\024\214\025\006\026" +
    "\045\030\207\031\012\036\213\042\040\044\223\066\014" +
    "\067\011\074\037\075\020\112\036\116\361\117\uffad\120" +
    "\224\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\102\004\uffd5\006\uffd5\010\uffd5\011" +
    "\uffd5\012\uffd5\015\uffd5\016\uffd5\021\uffd5\022\uffd5\024\uffd5" +
    "\025\uffd5\026\uffd5\030\uffd5\031\uffd5\036\uffd5\042\uffd5\044" +
    "\uffd5\066\uffd5\067\uffd5\074\uffd5\075\uffd5\112\uffd5\116\uffd5" +
    "\117\uffd5\120\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127" +
    "\uffd5\130\uffd5\131\uffd5\001\002\000\106\004\033\006\362" +
    "\007\360\010\015\011\203\012\uffad\013\364\015\013\016" +
    "\221\021\044\022\201\024\214\025\006\026\045\030\207" +
    "\031\012\036\213\042\040\044\223\066\014\067\011\074" +
    "\037\075\020\112\036\116\361\117\uffad\120\224\123\042" +
    "\124\034\125\043\126\031\127\010\130\026\131\007\001" +
    "\002\000\102\004\uffd4\006\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\015\uffd4\016\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\030\uffd4\031\uffd4\036\uffd4\042\uffd4\044\uffd4\066\uffd4" +
    "\067\uffd4\074\uffd4\075\uffd4\112\uffd4\116\uffd4\117\uffd4\120" +
    "\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4" +
    "\131\uffd4\001\002\000\004\117\377\001\002\000\004\117" +
    "\375\001\002\000\106\004\033\006\362\007\360\010\015" +
    "\011\203\012\uffad\013\364\015\013\016\221\021\044\022" +
    "\201\024\214\025\006\026\045\030\207\031\012\036\213" +
    "\042\040\044\223\066\014\067\011\074\037\075\020\112" +
    "\036\116\361\117\uffad\120\224\123\042\124\034\125\043" +
    "\126\031\127\010\130\026\131\007\001\002\000\102\004" +
    "\uffd7\006\uffd7\010\uffd7\011\uffd7\012\uffd7\015\uffd7\016\uffd7" +
    "\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031" +
    "\uffd7\036\uffd7\042\uffd7\044\uffd7\066\uffd7\067\uffd7\074\uffd7" +
    "\075\uffd7\112\uffd7\116\uffd7\117\uffd7\120\uffd7\123\uffd7\124" +
    "\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7\001\002" +
    "\000\102\004\uffb7\006\uffb7\010\uffb7\011\uffb7\012\uffb7\015" +
    "\uffb7\016\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\030\uffb7\031\uffb7\036\uffb7\042\uffb7\044\uffb7\066\uffb7\067" +
    "\uffb7\074\uffb7\075\uffb7\112\uffb7\116\uffb7\117\uffb7\120\uffb7" +
    "\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130\uffb7\131" +
    "\uffb7\001\002\000\102\045\104\046\071\047\101\050\107" +
    "\051\060\053\076\054\066\055\070\056\102\057\114\060" +
    "\064\061\103\062\067\063\061\064\112\065\073\067\062" +
    "\070\072\071\100\072\113\073\057\076\056\077\106\100" +
    "\115\101\105\102\110\103\111\104\352\105\u0101\106\063" +
    "\107\065\110\075\001\002\000\106\004\033\006\362\007" +
    "\360\010\015\011\203\012\uffad\013\364\015\013\016\221" +
    "\021\044\022\201\024\214\025\006\026\045\030\207\031" +
    "\012\036\213\042\040\044\223\066\014\067\011\074\037" +
    "\075\020\112\036\116\361\117\uffad\120\224\123\042\124" +
    "\034\125\043\126\031\127\010\130\026\131\007\001\002" +
    "\000\102\004\uffd6\006\uffd6\010\uffd6\011\uffd6\012\uffd6\015" +
    "\uffd6\016\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\030\uffd6\031\uffd6\036\uffd6\042\uffd6\044\uffd6\066\uffd6\067" +
    "\uffd6\074\uffd6\075\uffd6\112\uffd6\116\uffd6\117\uffd6\120\uffd6" +
    "\123\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131" +
    "\uffd6\001\002\000\036\004\053\066\014\067\011\074\037" +
    "\075\020\112\036\113\u0105\123\042\124\034\125\043\126" +
    "\031\127\010\130\026\131\007\001\002\000\004\113\u0106" +
    "\001\002\000\104\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051" +
    "\uff6f\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f" +
    "\061\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\067\uff6f\070" +
    "\uff6f\071\uff6f\072\uff6f\073\uff6f\076\uff6f\077\uff6f\100\uff6f" +
    "\101\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107" +
    "\uff6f\110\uff6f\113\uff6f\001\002\000\104\045\uff6e\046\uff6e" +
    "\047\uff6e\050\uff6e\051\uff6e\053\uff6e\054\uff6e\055\uff6e\056" +
    "\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e" +
    "\065\uff6e\067\uff6e\070\uff6e\071\uff6e\072\uff6e\073\uff6e\076" +
    "\uff6e\077\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e" +
    "\105\uff6e\106\uff6e\107\uff6e\110\uff6e\113\uff6e\001\002\000" +
    "\102\004\uffb6\006\uffb6\010\uffb6\011\uffb6\012\uffb6\015\uffb6" +
    "\016\uffb6\021\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\030" +
    "\uffb6\031\uffb6\036\uffb6\042\uffb6\044\uffb6\066\uffb6\067\uffb6" +
    "\074\uffb6\075\uffb6\112\uffb6\116\uffb6\117\uffb6\120\uffb6\123" +
    "\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6" +
    "\001\002\000\102\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\106\100\115" +
    "\101\105\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\120\u0109\001\002\000\102\004\033\006\uffad\010\015" +
    "\011\203\012\uffad\015\013\016\221\021\044\022\201\024" +
    "\214\025\006\026\045\030\207\031\012\036\213\042\040" +
    "\044\223\066\014\067\011\074\037\075\020\112\036\116" +
    "\205\117\uffad\120\224\123\042\124\034\125\043\126\031" +
    "\127\010\130\026\131\007\001\002\000\102\004\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\015\uffb0\016\uffb0\021\uffb0" +
    "\022\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0\036" +
    "\uffb0\042\uffb0\044\uffb0\066\uffb0\067\uffb0\074\uffb0\075\uffb0" +
    "\112\uffb0\116\uffb0\117\uffb0\120\uffb0\123\uffb0\124\uffb0\125" +
    "\uffb0\126\uffb0\127\uffb0\130\uffb0\131\uffb0\001\002\000\004" +
    "\117\377\001\002\000\004\004\u010d\001\002\000\004\106" +
    "\u010e\001\002\000\014\123\346\124\342\126\344\127\336" +
    "\131\341\001\002\000\004\120\u0110\001\002\000\106\002" +
    "\uffab\003\uffab\004\uffab\006\uffab\010\uffab\011\uffab\012\uffab" +
    "\015\uffab\016\uffab\021\uffab\022\uffab\024\uffab\025\uffab\026" +
    "\uffab\030\uffab\031\uffab\036\uffab\042\uffab\044\uffab\066\uffab" +
    "\067\uffab\074\uffab\075\uffab\112\uffab\116\uffab\117\uffab\120" +
    "\uffab\123\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab" +
    "\131\uffab\001\002\000\056\003\uffbb\004\u0113\010\015\015" +
    "\013\021\044\025\006\026\045\031\012\042\040\066\014" +
    "\067\011\074\037\075\020\112\036\120\uffbb\123\042\124" +
    "\034\125\043\126\031\127\010\130\026\131\007\001\002" +
    "\000\054\004\u0113\010\015\015\013\021\044\025\006\026" +
    "\045\031\012\042\040\066\014\067\011\074\037\075\020" +
    "\112\036\120\uffbb\123\042\124\034\125\043\126\031\127" +
    "\010\130\026\131\007\001\002\000\112\003\uff80\045\uff80" +
    "\046\uff80\047\uff80\050\uff80\051\uff80\053\uff80\054\uff80\055" +
    "\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80" +
    "\064\uff80\065\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073" +
    "\uff80\074\037\075\020\076\uff80\077\uff80\100\uff80\101\uff80" +
    "\102\uff80\103\uff80\104\uff80\106\u0121\107\uff80\110\uff80\112" +
    "\123\120\uff80\001\002\000\104\003\uffbc\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\067\062\070\072\071\100\072\113\073\057\076" +
    "\056\077\106\100\115\101\105\102\110\103\111\104\077" +
    "\106\063\107\065\110\075\120\uffbc\001\002\000\006\003" +
    "\uffbe\120\uffbe\001\002\000\004\120\u0117\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\102\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\106\100\115" +
    "\101\105\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\120\u0119\001\002\000\036\004\u011a\066\014\067\011" +
    "\074\037\075\020\112\036\113\uffb8\123\042\124\034\125" +
    "\043\126\031\127\010\130\026\131\007\001\002\000\112" +
    "\003\uff80\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\053" +
    "\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80" +
    "\062\uff80\063\uff80\064\uff80\065\uff80\067\uff80\070\uff80\071" +
    "\uff80\072\uff80\073\uff80\074\037\075\020\076\uff80\077\uff80" +
    "\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\106\u011f\107" +
    "\uff80\110\uff80\112\123\113\uff80\001\002\000\004\113\u011d" +
    "\001\002\000\102\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\106\100\115" +
    "\101\105\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\113\uffb9\001\002\000\102\004\033\006\uffad\010\015" +
    "\011\203\012\uffad\015\013\016\221\021\044\022\201\024" +
    "\214\025\006\026\045\030\207\031\012\036\213\042\040" +
    "\044\223\066\014\067\011\074\037\075\020\112\036\116" +
    "\205\117\uffad\120\224\123\042\124\034\125\043\126\031" +
    "\127\010\130\026\131\007\001\002\000\102\004\uffc4\006" +
    "\uffc4\010\uffc4\011\uffc4\012\uffc4\015\uffc4\016\uffc4\021\uffc4" +
    "\022\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4\036" +
    "\uffc4\042\uffc4\044\uffc4\066\uffc4\067\uffc4\074\uffc4\075\uffc4" +
    "\112\uffc4\116\uffc4\117\uffc4\120\uffc4\123\uffc4\124\uffc4\125" +
    "\uffc4\126\uffc4\127\uffc4\130\uffc4\131\uffc4\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\102\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\106\100\115" +
    "\101\105\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\113\uffba\001\002\000\034\004\053\066\014\067\011" +
    "\074\037\075\020\112\036\123\042\124\034\125\043\126" +
    "\031\127\010\130\026\131\007\001\002\000\104\003\uffbd" +
    "\045\104\046\071\047\101\050\107\051\060\053\076\054" +
    "\066\055\070\056\102\057\114\060\064\061\103\062\067" +
    "\063\061\064\112\065\073\067\062\070\072\071\100\072" +
    "\113\073\057\076\056\077\106\100\115\101\105\102\110" +
    "\103\111\104\077\106\063\107\065\110\075\120\uffbd\001" +
    "\002\000\006\003\u0125\120\u0124\001\002\000\036\003\u012c" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\034\004\053\066\014\067\011\074\037\075" +
    "\020\112\036\123\042\124\034\125\043\126\031\127\010" +
    "\130\026\131\007\001\002\000\102\045\104\046\071\047" +
    "\101\050\107\051\060\053\076\054\066\055\070\056\102" +
    "\057\114\060\064\061\103\062\067\063\061\064\112\065" +
    "\073\067\062\070\072\071\100\072\113\073\057\076\056" +
    "\077\106\100\115\101\105\102\110\103\111\104\077\106" +
    "\063\107\065\110\075\120\u0127\001\002\000\036\004\u011a" +
    "\066\014\067\011\074\037\075\020\112\036\113\uffb8\123" +
    "\042\124\034\125\043\126\031\127\010\130\026\131\007" +
    "\001\002\000\004\113\u0129\001\002\000\102\004\033\006" +
    "\uffad\010\015\011\203\012\uffad\015\013\016\221\021\044" +
    "\022\201\024\214\025\006\026\045\030\207\031\012\036" +
    "\213\042\040\044\223\066\014\067\011\074\037\075\020" +
    "\112\036\116\205\117\uffad\120\224\123\042\124\034\125" +
    "\043\126\031\127\010\130\026\131\007\001\002\000\102" +
    "\004\uffc3\006\uffc3\010\uffc3\011\uffc3\012\uffc3\015\uffc3\016" +
    "\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3" +
    "\031\uffc3\036\uffc3\042\uffc3\044\uffc3\066\uffc3\067\uffc3\074" +
    "\uffc3\075\uffc3\112\uffc3\116\uffc3\117\uffc3\120\uffc3\123\uffc3" +
    "\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\131\uffc3\001" +
    "\002\000\104\003\u0132\045\104\046\071\047\101\050\107" +
    "\051\060\053\076\054\066\055\070\056\102\057\114\060" +
    "\064\061\103\062\067\063\061\064\112\065\073\067\062" +
    "\070\072\071\100\072\113\073\057\076\056\077\106\100" +
    "\115\101\105\102\110\103\111\104\077\106\063\107\065" +
    "\110\075\120\u0131\001\002\000\004\120\u012d\001\002\000" +
    "\036\004\u011a\066\014\067\011\074\037\075\020\112\036" +
    "\113\uffb8\123\042\124\034\125\043\126\031\127\010\130" +
    "\026\131\007\001\002\000\004\113\u012f\001\002\000\102" +
    "\004\033\006\uffad\010\015\011\203\012\uffad\015\013\016" +
    "\221\021\044\022\201\024\214\025\006\026\045\030\207" +
    "\031\012\036\213\042\040\044\223\066\014\067\011\074" +
    "\037\075\020\112\036\116\205\117\uffad\120\224\123\042" +
    "\124\034\125\043\126\031\127\010\130\026\131\007\001" +
    "\002\000\102\004\uffc2\006\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\015\uffc2\016\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\030\uffc2\031\uffc2\036\uffc2\042\uffc2\044\uffc2\066\uffc2" +
    "\067\uffc2\074\uffc2\075\uffc2\112\uffc2\116\uffc2\117\uffc2\120" +
    "\uffc2\123\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2" +
    "\131\uffc2\001\002\000\040\003\u0138\004\u011a\066\014\067" +
    "\011\074\037\075\020\112\036\113\uffb8\123\042\124\034" +
    "\125\043\126\031\127\010\130\026\131\007\001\002\000" +
    "\036\004\u011a\066\014\067\011\074\037\075\020\112\036" +
    "\113\uffb8\123\042\124\034\125\043\126\031\127\010\130" +
    "\026\131\007\001\002\000\004\113\u0134\001\002\000\102" +
    "\004\033\006\uffad\010\015\011\203\012\uffad\015\013\016" +
    "\221\021\044\022\201\024\214\025\006\026\045\030\207" +
    "\031\012\036\213\042\040\044\223\066\014\067\011\074" +
    "\037\075\020\112\036\116\205\117\uffad\120\224\123\042" +
    "\124\034\125\043\126\031\127\010\130\026\131\007\001" +
    "\002\000\102\004\uffc1\006\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\015\uffc1\016\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\030\uffc1\031\uffc1\036\uffc1\042\uffc1\044\uffc1\066\uffc1" +
    "\067\uffc1\074\uffc1\075\uffc1\112\uffc1\116\uffc1\117\uffc1\120" +
    "\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1" +
    "\131\uffc1\001\002\000\004\113\u013d\001\002\000\104\003" +
    "\u013b\045\104\046\071\047\101\050\107\051\060\053\076" +
    "\054\066\055\070\056\102\057\114\060\064\061\103\062" +
    "\067\063\061\064\112\065\073\067\062\070\072\071\100" +
    "\072\113\073\057\076\056\077\106\100\115\101\105\102" +
    "\110\103\111\104\077\106\063\107\065\110\075\113\uffb9" +
    "\001\002\000\004\113\u0139\001\002\000\102\004\033\006" +
    "\uffad\010\015\011\203\012\uffad\015\013\016\221\021\044" +
    "\022\201\024\214\025\006\026\045\030\207\031\012\036" +
    "\213\042\040\044\223\066\014\067\011\074\037\075\020" +
    "\112\036\116\205\117\uffad\120\224\123\042\124\034\125" +
    "\043\126\031\127\010\130\026\131\007\001\002\000\102" +
    "\004\uffc0\006\uffc0\010\uffc0\011\uffc0\012\uffc0\015\uffc0\016" +
    "\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\030\uffc0" +
    "\031\uffc0\036\uffc0\042\uffc0\044\uffc0\066\uffc0\067\uffc0\074" +
    "\uffc0\075\uffc0\112\uffc0\116\uffc0\117\uffc0\120\uffc0\123\uffc0" +
    "\124\uffc0\125\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0\001" +
    "\002\000\102\004\033\006\uffad\010\015\011\203\012\uffad" +
    "\015\013\016\221\021\044\022\201\024\214\025\006\026" +
    "\045\030\207\031\012\036\213\042\040\044\223\066\014" +
    "\067\011\074\037\075\020\112\036\116\205\117\uffad\120" +
    "\224\123\042\124\034\125\043\126\031\127\010\130\026" +
    "\131\007\001\002\000\102\004\uffbf\006\uffbf\010\uffbf\011" +
    "\uffbf\012\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\030\uffbf\031\uffbf\036\uffbf\042\uffbf\044" +
    "\uffbf\066\uffbf\067\uffbf\074\uffbf\075\uffbf\112\uffbf\116\uffbf" +
    "\117\uffbf\120\uffbf\123\uffbf\124\uffbf\125\uffbf\126\uffbf\127" +
    "\uffbf\130\uffbf\131\uffbf\001\002\000\102\004\033\006\uffad" +
    "\010\015\011\203\012\uffad\015\013\016\221\021\044\022" +
    "\201\024\214\025\006\026\045\030\207\031\012\036\213" +
    "\042\040\044\223\066\014\067\011\074\037\075\020\112" +
    "\036\116\205\117\uffad\120\224\123\042\124\034\125\043" +
    "\126\031\127\010\130\026\131\007\001\002\000\102\004" +
    "\uffc6\006\uffc6\010\uffc6\011\uffc6\012\uffc6\015\uffc6\016\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031" +
    "\uffc6\036\uffc6\042\uffc6\044\uffc6\066\uffc6\067\uffc6\074\uffc6" +
    "\075\uffc6\112\uffc6\116\uffc6\117\uffc6\120\uffc6\123\uffc6\124" +
    "\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6\131\uffc6\001\002" +
    "\000\006\052\uff98\113\uff98\001\002\000\004\116\ufff2\001" +
    "\002\000\022\010\015\011\165\015\013\021\044\025\006" +
    "\026\045\031\012\042\040\001\002\000\004\113\uff9a\001" +
    "\002\000\060\002\ufff8\003\ufff8\004\ufff8\010\ufff8\011\ufff8" +
    "\015\ufff8\021\ufff8\025\ufff8\026\ufff8\031\ufff8\042\ufff8\066" +
    "\ufff8\067\ufff8\074\ufff8\075\ufff8\112\ufff8\123\ufff8\124\ufff8" +
    "\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\001\002\000" +
    "\004\004\u0145\001\002\000\006\003\u0146\106\u0147\001\002" +
    "\000\004\120\u0159\001\002\000\016\003\u014b\123\u014d\124" +
    "\u0149\126\u014c\127\u0148\131\u014a\001\002\000\006\003\u0157" +
    "\120\uff71\001\002\000\006\003\u0155\120\uff73\001\002\000" +
    "\006\003\u0153\120\uff70\001\002\000\004\120\u0152\001\002" +
    "\000\006\003\u0150\120\uff72\001\002\000\006\003\u014e\120" +
    "\uff74\001\002\000\004\120\u014f\001\002\000\060\002\uffa8" +
    "\003\uffa8\004\uffa8\010\uffa8\011\uffa8\015\uffa8\021\uffa8\025" +
    "\uffa8\026\uffa8\031\uffa8\042\uffa8\066\uffa8\067\uffa8\074\uffa8" +
    "\075\uffa8\112\uffa8\123\uffa8\124\uffa8\125\uffa8\126\uffa8\127" +
    "\uffa8\130\uffa8\131\uffa8\001\002\000\004\120\u0151\001\002" +
    "\000\060\002\uffa6\003\uffa6\004\uffa6\010\uffa6\011\uffa6\015" +
    "\uffa6\021\uffa6\025\uffa6\026\uffa6\031\uffa6\042\uffa6\066\uffa6" +
    "\067\uffa6\074\uffa6\075\uffa6\112\uffa6\123\uffa6\124\uffa6\125" +
    "\uffa6\126\uffa6\127\uffa6\130\uffa6\131\uffa6\001\002\000\060" +
    "\002\uffa9\003\uffa9\004\uffa9\010\uffa9\011\uffa9\015\uffa9\021" +
    "\uffa9\025\uffa9\026\uffa9\031\uffa9\042\uffa9\066\uffa9\067\uffa9" +
    "\074\uffa9\075\uffa9\112\uffa9\123\uffa9\124\uffa9\125\uffa9\126" +
    "\uffa9\127\uffa9\130\uffa9\131\uffa9\001\002\000\004\120\u0154" +
    "\001\002\000\060\002\uffa4\003\uffa4\004\uffa4\010\uffa4\011" +
    "\uffa4\015\uffa4\021\uffa4\025\uffa4\026\uffa4\031\uffa4\042\uffa4" +
    "\066\uffa4\067\uffa4\074\uffa4\075\uffa4\112\uffa4\123\uffa4\124" +
    "\uffa4\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131\uffa4\001\002" +
    "\000\004\120\u0156\001\002\000\060\002\uffa7\003\uffa7\004" +
    "\uffa7\010\uffa7\011\uffa7\015\uffa7\021\uffa7\025\uffa7\026\uffa7" +
    "\031\uffa7\042\uffa7\066\uffa7\067\uffa7\074\uffa7\075\uffa7\112" +
    "\uffa7\123\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7\130\uffa7" +
    "\131\uffa7\001\002\000\004\120\u0158\001\002\000\060\002" +
    "\uffa5\003\uffa5\004\uffa5\010\uffa5\011\uffa5\015\uffa5\021\uffa5" +
    "\025\uffa5\026\uffa5\031\uffa5\042\uffa5\066\uffa5\067\uffa5\074" +
    "\uffa5\075\uffa5\112\uffa5\123\uffa5\124\uffa5\125\uffa5\126\uffa5" +
    "\127\uffa5\130\uffa5\131\uffa5\001\002\000\060\002\uffaa\003" +
    "\uffaa\004\uffaa\010\uffaa\011\uffaa\015\uffaa\021\uffaa\025\uffaa" +
    "\026\uffaa\031\uffaa\042\uffaa\066\uffaa\067\uffaa\074\uffaa\075" +
    "\uffaa\112\uffaa\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa" +
    "\130\uffaa\131\uffaa\001\002\000\004\002\uffff\001\002\000" +
    "\124\003\uff87\004\uff87\006\uff87\010\uff87\011\uff87\012\uff87" +
    "\015\uff87\016\uff87\021\uff87\022\uff87\024\uff87\025\uff87\026" +
    "\uff87\030\uff87\031\uff87\036\uff87\042\uff87\044\uff87\045\uff87" +
    "\046\uff87\047\uff87\050\uff87\051\uff87\052\uff87\066\uff87\074" +
    "\uff87\075\uff87\104\uff87\105\uff87\112\uff87\113\uff87\116\uff87" +
    "\117\uff87\120\uff87\123\uff87\124\uff87\125\uff87\126\uff87\127" +
    "\uff87\130\uff87\131\uff87\001\002\000\124\003\uff88\004\uff88" +
    "\006\uff88\010\uff88\011\uff88\012\uff88\015\uff88\016\uff88\021" +
    "\uff88\022\uff88\024\uff88\025\uff88\026\uff88\030\uff88\031\uff88" +
    "\036\uff88\042\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050" +
    "\uff88\051\uff88\052\uff88\066\uff88\074\uff88\075\uff88\104\uff88" +
    "\105\uff88\112\uff88\113\uff88\116\uff88\117\uff88\120\uff88\123" +
    "\uff88\124\uff88\125\uff88\126\uff88\127\uff88\130\uff88\131\uff88" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\036\004\016\006\021\013\004\016\022\017" +
    "\024\020\034\022\023\023\027\030\003\031\031\032\040" +
    "\050\046\060\015\063\045\001\001\000\034\004\016\006" +
    "\021\013\u015c\016\022\017\024\020\034\022\023\023\027" +
    "\030\003\031\031\032\040\060\015\063\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\u015b\020\034\022\023\023\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\u015a" +
    "\020\034\022\023\023\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\016\006\021\013\u0159\016\022" +
    "\017\024\020\034\022\023\023\027\030\003\031\031\032" +
    "\040\060\015\063\045\001\001\000\002\001\001\000\004" +
    "\006\u0143\001\001\000\004\033\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\016\006\021\013\135\016\022\017\024" +
    "\020\034\022\023\023\027\030\003\031\031\032\040\060" +
    "\015\063\045\001\001\000\004\023\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\054\020\053\022" +
    "\023\023\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\016\006\021" +
    "\013\050\016\022\017\024\020\034\022\023\023\027\030" +
    "\003\031\031\032\040\060\015\063\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\123\001\001\000\002\001\001\000\004" +
    "\024\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\120\020" +
    "\034\022\023\023\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\115\020\034\022\023\023\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\073\001\001\000\012" +
    "\017\117\020\034\022\023\023\027\001\001\000\004\024" +
    "\073\001\001\000\004\024\073\001\001\000\002\001\001" +
    "\000\016\007\125\010\124\017\126\020\034\022\023\023" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\007\132\010\124\017\126\020\034" +
    "\022\023\023\027\001\001\000\002\001\001\000\012\017" +
    "\134\020\034\022\023\023\027\001\001\000\004\024\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\163\006\162\011\160\012\157" +
    "\001\001\000\004\033\156\001\001\000\012\017\152\020" +
    "\034\022\023\023\027\001\001\000\004\024\073\001\001" +
    "\000\004\033\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\173\001" +
    "\001\000\004\006\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\006\203\014\221\016\205\017\207" +
    "\020\034\022\023\023\027\031\211\032\217\034\216\035" +
    "\201\036\215\040\214\042\210\044\175\051\177\052\174" +
    "\053\176\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\u010b\001\001\000" +
    "\004\033\145\001\001\000\046\006\203\014\u010a\016\205" +
    "\017\207\020\034\022\023\023\027\031\211\032\217\034" +
    "\216\035\201\036\215\040\214\042\210\044\175\051\177" +
    "\052\174\053\176\001\001\000\002\001\001\000\012\017" +
    "\u0107\020\034\022\023\023\027\001\001\000\004\024\073" +
    "\001\001\000\002\001\001\000\046\006\203\014\u0106\016" +
    "\205\017\207\020\034\022\023\023\027\031\211\032\217" +
    "\034\216\035\201\036\215\040\214\042\210\044\175\051" +
    "\177\052\174\053\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\006" +
    "\203\014\271\016\205\017\207\020\034\022\023\023\027" +
    "\031\211\032\217\034\216\035\201\036\215\040\214\042" +
    "\210\044\175\051\177\052\174\053\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\006\203\014\224\016\205\017\207\020\034" +
    "\022\023\023\027\031\211\032\217\034\216\035\201\036" +
    "\215\040\214\042\210\044\175\051\177\052\174\053\176" +
    "\001\001\000\002\001\001\000\012\017\246\020\034\022" +
    "\023\023\027\001\001\000\012\017\227\020\034\022\023" +
    "\023\027\001\001\000\004\024\073\001\001\000\050\006" +
    "\203\014\232\016\205\017\207\020\034\022\023\023\027" +
    "\031\211\032\217\034\216\035\201\036\215\040\214\042" +
    "\210\043\231\044\175\051\177\052\174\053\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\006\203\014\232\016\205\017\207" +
    "\020\034\022\023\023\027\031\211\032\217\034\216\035" +
    "\201\036\215\040\214\042\210\043\236\044\175\051\177" +
    "\052\174\053\176\001\001\000\002\001\001\000\050\006" +
    "\203\014\232\016\205\017\207\020\034\022\023\023\027" +
    "\031\211\032\217\034\216\035\201\036\215\040\214\042" +
    "\210\043\240\044\175\051\177\052\174\053\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\006\203\014\232\016\205\017\207\020\034\022\023" +
    "\023\027\031\211\032\217\034\216\035\201\036\215\040" +
    "\214\042\210\043\244\044\175\051\177\052\174\053\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\006\203\014\232\016\205\017\207\020\034\022\023\023" +
    "\027\031\211\032\217\034\216\035\201\036\215\040\214" +
    "\042\210\043\252\044\175\051\177\052\174\053\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\006\203\014\232\016\205\017" +
    "\207\020\034\022\023\023\027\031\211\032\217\034\216" +
    "\035\201\036\215\040\214\042\210\043\257\044\175\051" +
    "\177\052\174\053\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\006\203\014\232\016\205\017\207\020" +
    "\034\022\023\023\027\031\211\032\217\034\216\035\201" +
    "\036\215\040\214\042\210\043\262\044\175\051\177\052" +
    "\174\053\176\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\006\203\014\266\016\205\017" +
    "\207\020\034\022\023\023\027\031\211\032\217\034\216" +
    "\035\201\036\215\040\214\042\210\044\175\051\177\052" +
    "\174\053\176\001\001\000\002\001\001\000\046\006\203" +
    "\014\270\016\205\017\207\020\034\022\023\023\027\031" +
    "\211\032\217\034\216\035\201\036\215\040\214\042\210" +
    "\044\175\051\177\052\174\053\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\316\020\034\022\023" +
    "\023\027\001\001\000\046\006\203\014\275\016\205\017" +
    "\274\020\034\022\023\023\027\031\211\032\217\034\216" +
    "\035\201\036\215\040\214\042\210\044\175\051\177\052" +
    "\174\053\176\001\001\000\004\024\073\001\001\000\050" +
    "\006\203\014\301\016\277\017\207\020\034\022\023\023" +
    "\027\031\211\032\217\034\216\035\201\036\215\037\276" +
    "\040\214\042\210\044\175\051\177\052\174\053\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\203" +
    "\014\303\016\302\017\207\020\034\022\023\023\027\031" +
    "\211\032\217\034\216\035\201\036\215\040\214\042\210" +
    "\044\175\051\177\052\174\053\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\006\203" +
    "\014\305\016\205\017\207\020\034\022\023\023\027\031" +
    "\211\032\217\034\216\035\201\036\215\040\214\042\210" +
    "\044\175\051\177\052\174\053\176\001\001\000\002\001" +
    "\001\000\046\006\203\014\315\016\205\017\207\020\034" +
    "\022\023\023\027\031\211\032\217\034\216\035\201\036" +
    "\215\040\214\042\210\044\175\051\177\052\174\053\176" +
    "\001\001\000\002\001\001\000\046\006\203\014\311\016" +
    "\205\017\207\020\034\022\023\023\027\031\211\032\217" +
    "\034\216\035\201\036\215\040\214\042\210\044\175\051" +
    "\177\052\174\053\176\001\001\000\050\006\203\014\301" +
    "\016\277\017\207\020\034\022\023\023\027\031\211\032" +
    "\217\034\216\035\201\036\215\037\312\040\214\042\210" +
    "\044\175\051\177\052\174\053\176\001\001\000\002\001" +
    "\001\000\046\006\203\014\314\016\205\017\207\020\034" +
    "\022\023\023\027\031\211\032\217\034\216\035\201\036" +
    "\215\040\214\042\210\044\175\051\177\052\174\053\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\073\001\001\000\002\001\001\000\046\006\203\014\321" +
    "\016\205\017\207\020\034\022\023\023\027\031\211\032" +
    "\217\034\216\035\201\036\215\040\214\042\210\044\175" +
    "\051\177\052\174\053\176\001\001\000\050\006\203\014" +
    "\301\016\277\017\207\020\034\022\023\023\027\031\211" +
    "\032\217\034\216\035\201\036\215\037\322\040\214\042" +
    "\210\044\175\051\177\052\174\053\176\001\001\000\002" +
    "\001\001\000\046\006\203\014\332\016\205\017\207\020" +
    "\034\022\023\023\027\031\211\032\217\034\216\035\201" +
    "\036\215\040\214\042\210\044\175\051\177\052\174\053" +
    "\176\001\001\000\046\006\203\014\326\016\205\017\207" +
    "\020\034\022\023\023\027\031\211\032\217\034\216\035" +
    "\201\036\215\040\214\042\210\044\175\051\177\052\174" +
    "\053\176\001\001\000\046\006\203\014\330\016\205\017" +
    "\207\020\034\022\023\023\027\031\211\032\217\034\216" +
    "\035\201\036\215\040\214\042\210\044\175\051\177\052" +
    "\174\053\176\001\001\000\050\006\203\014\301\016\277" +
    "\017\207\020\034\022\023\023\027\031\211\032\217\034" +
    "\216\035\201\036\215\037\327\040\214\042\210\044\175" +
    "\051\177\052\174\053\176\001\001\000\002\001\001\000" +
    "\050\006\203\014\301\016\277\017\207\020\034\022\023" +
    "\023\027\031\211\032\217\034\216\035\201\036\215\037" +
    "\331\040\214\042\210\044\175\051\177\052\174\053\176" +
    "\001\001\000\002\001\001\000\050\006\203\014\301\016" +
    "\277\017\207\020\034\022\023\023\027\031\211\032\217" +
    "\034\216\035\201\036\215\037\333\040\214\042\210\044" +
    "\175\051\177\052\174\053\176\001\001\000\002\001\001" +
    "\000\012\021\344\023\346\025\342\027\337\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\350\001\001\000\002\001\001\000\012" +
    "\021\347\023\346\025\342\027\337\001\001\000\004\024" +
    "\350\001\001\000\012\021\355\023\346\025\342\027\337" +
    "\001\001\000\012\021\352\023\346\025\342\027\337\001" +
    "\001\000\004\024\350\001\001\000\012\021\354\023\346" +
    "\025\342\027\337\001\001\000\004\024\350\001\001\000" +
    "\004\024\350\001\001\000\050\006\203\014\362\016\205" +
    "\017\207\020\034\022\023\023\027\031\211\032\217\034" +
    "\216\035\201\036\215\040\214\041\364\042\210\044\175" +
    "\051\177\052\174\053\176\001\001\000\012\021\377\023" +
    "\346\025\342\027\337\001\001\000\050\006\203\014\372" +
    "\016\205\017\207\020\034\022\023\023\027\031\211\032" +
    "\217\034\216\035\201\036\215\040\214\041\373\042\210" +
    "\044\175\051\177\052\174\053\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\021\365\023\346\025\342" +
    "\027\337\001\001\000\002\001\001\000\004\024\350\001" +
    "\001\000\050\006\203\014\362\016\205\017\207\020\034" +
    "\022\023\023\027\031\211\032\217\034\216\035\201\036" +
    "\215\040\214\041\367\042\210\044\175\051\177\052\174" +
    "\053\176\001\001\000\002\001\001\000\050\006\203\014" +
    "\362\016\205\017\207\020\034\022\023\023\027\031\211" +
    "\032\217\034\216\035\201\036\215\040\214\041\371\042" +
    "\210\044\175\051\177\052\174\053\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\006" +
    "\203\014\362\016\205\017\207\020\034\022\023\023\027" +
    "\031\211\032\217\034\216\035\201\036\215\040\214\041" +
    "\375\042\210\044\175\051\177\052\174\053\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\350\001" +
    "\001\000\050\006\203\014\362\016\205\017\207\020\034" +
    "\022\023\023\027\031\211\032\217\034\216\035\201\036" +
    "\215\040\214\041\u0101\042\210\044\175\051\177\052\174" +
    "\053\176\001\001\000\002\001\001\000\016\007\u0103\010" +
    "\124\017\126\020\034\022\023\023\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\073\001\001\000\046\006\203\014\u0109" +
    "\016\205\017\207\020\034\022\023\023\027\031\211\032" +
    "\217\034\216\035\201\036\215\040\214\042\210\044\175" +
    "\051\177\052\174\053\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u010e\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\203\017\u0113\020\034\022\023\023\027\032\u0114" +
    "\045\u0122\001\001\000\020\006\203\017\u0113\020\034\022" +
    "\023\023\027\032\u0114\045\u0115\001\001\000\004\023\123" +
    "\001\001\000\004\024\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\u0117\020\034\022\023\023\027" +
    "\001\001\000\004\024\073\001\001\000\014\017\u011b\020" +
    "\034\022\023\023\027\046\u011a\001\001\000\004\023\123" +
    "\001\001\000\002\001\001\000\004\024\073\001\001\000" +
    "\046\006\203\014\u011d\016\205\017\207\020\034\022\023" +
    "\023\027\031\211\032\217\034\216\035\201\036\215\040" +
    "\214\042\210\044\175\051\177\052\174\053\176\001\001" +
    "\000\002\001\001\000\012\017\u011f\020\034\022\023\023" +
    "\027\001\001\000\004\024\073\001\001\000\012\017\u0121" +
    "\020\034\022\023\023\027\001\001\000\004\024\073\001" +
    "\001\000\002\001\001\000\012\017\u012a\020\034\022\023" +
    "\023\027\001\001\000\012\017\u0125\020\034\022\023\023" +
    "\027\001\001\000\004\024\073\001\001\000\014\017\u011b" +
    "\020\034\022\023\023\027\046\u0127\001\001\000\002\001" +
    "\001\000\046\006\203\014\u0129\016\205\017\207\020\034" +
    "\022\023\023\027\031\211\032\217\034\216\035\201\036" +
    "\215\040\214\042\210\044\175\051\177\052\174\053\176" +
    "\001\001\000\002\001\001\000\004\024\073\001\001\000" +
    "\002\001\001\000\014\017\u011b\020\034\022\023\023\027" +
    "\046\u012d\001\001\000\002\001\001\000\046\006\203\014" +
    "\u012f\016\205\017\207\020\034\022\023\023\027\031\211" +
    "\032\217\034\216\035\201\036\215\040\214\042\210\044" +
    "\175\051\177\052\174\053\176\001\001\000\002\001\001" +
    "\000\014\017\u0136\020\034\022\023\023\027\046\u0135\001" +
    "\001\000\014\017\u011b\020\034\022\023\023\027\046\u0132" +
    "\001\001\000\002\001\001\000\046\006\203\014\u0134\016" +
    "\205\017\207\020\034\022\023\023\027\031\211\032\217" +
    "\034\216\035\201\036\215\040\214\042\210\044\175\051" +
    "\177\052\174\053\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\073\001\001\000\002\001\001\000" +
    "\046\006\203\014\u0139\016\205\017\207\020\034\022\023" +
    "\023\027\031\211\032\217\034\216\035\201\036\215\040" +
    "\214\042\210\044\175\051\177\052\174\053\176\001\001" +
    "\000\002\001\001\000\046\006\203\014\u013b\016\205\017" +
    "\207\020\034\022\023\023\027\031\211\032\217\034\216" +
    "\035\201\036\215\040\214\042\210\044\175\051\177\052" +
    "\174\053\176\001\001\000\002\001\001\000\046\006\203" +
    "\014\u013d\016\205\017\207\020\034\022\023\023\027\031" +
    "\211\032\217\034\216\035\201\036\215\040\214\042\210" +
    "\044\175\051\177\052\174\053\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\162" +
    "\011\u0141\012\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\u010e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\073\001\001\000\004\024" +
    "\073\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }



    CLexer s;
    Analyzer a;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message + " at line:" + s.getCurrentLine(), null));
        }
    }

    public void syntax_error(Symbol cur_token) 
    {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token) 
    {
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= constant program_definition 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_definition ::= error_program_definition program_definition 
            {
              Object RESULT =null;
		int e_p_dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int e_p_dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e_p_d = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 System.out.println("$Error program definition, line 213. ");
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_definition ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // error_program_definition ::= keyword_types OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int kw_typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int kw_typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object kw_type = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Must give a name for a global variable", "Global variable", kw_type);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",49, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // error_program_definition ::= instruction OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Instruction out of place", "Global variable", instr);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",49, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // error_program_definition ::= keyword_types error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",49, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // error_program_definition ::= error_constant 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",49, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // error_program_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",49, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",49, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISLEFT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",49, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_declaration_1 ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unknown_function_declaration_error ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error function declaration UNKNOWN TYPE 1", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("unknown_function_declaration_error",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unknown_function_declaration_error ::= error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error function declaration UNKNOWN TYPE 2", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("unknown_function_declaration_error",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unknown_function_declaration_error ::= error OP_WRAPPERKEYPARENTHESISLEFT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error function declaration UNKNOWN TYPE 3", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("unknown_function_declaration_error",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // error_function_declaration ::= error IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Type function missing", "int, float,...", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // error_function_declaration ::= keyword_types error OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Function identifier missing", "getSalary", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // error_function_declaration ::= keyword_types IDENT error function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // error_function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Error parameters declaration", "int a, float b", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // control_structure ::= control_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // control_structure ::= control_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // control_structure ::= control_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // control_structure ::= control_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // control_if ::= control_if_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // control_if ::= error_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // control_else ::= KW_ELSE gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // control_else ::= KW_ELSE instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // control_else ::= instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // control_else ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // error_if ::= KW_IF error expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("IF: Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("IF: Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Right parenthesis missing", ")", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // error_if ::= KW_IF error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Some code between if and conditional expression", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT error gramatic_body control_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Syntax error, illegal code inside of the if", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // control_switch_case ::= OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // control_switch_case ::= KW_CASE expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // control_switch_case ::= KW_DEFAULT expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // control_switch_case ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // control_switch_case ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // error_switch ::= KW_SWITCH error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Numeric expresion expected", "expression", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // control_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // control_while ::= error_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // control_while_body ::= gramatic_body KW_BREAK OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // control_while_body ::= gramatic_body KW_CONTINUE OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // control_while_body ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // error_while ::= KW_WHILE error expression OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		
        parser.generateSyntaxError("Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression error OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // error_while ::= KW_WHILE error OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Some code between while and conditional expression", "While", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control_for ::= error_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // error_for ::= KW_FOR error control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-7)).value;
		 
        parser.generateSyntaxError("FOR: Left parenthesis missing", "(", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction error expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR error OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("FOR: Conditional expression missing", "a<b", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression error control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR error OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		 
        parser.generateSyntaxError("FOR: Incremental o decremental instruction expected", "a++", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR expression error gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        parser.generateSyntaxError("FOR: Right parenthesis missing", ")", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // control_for_instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // control_for_instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // control_for_instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // control_for_instruction ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // control_for_instruction1 ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // control_for_instruction1 ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // control_for_instruction1 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramatic_body ::= constant gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramatic_body ::= OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gramatic_body ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramatic_body ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramatic_body ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramatic_body ::= control_structure gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // gramatic_body ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramatic_body ::= KW_ELSE error gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gramatic_body ::= expression error OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		  System.out.println("\n$Error gramatic body, line 501. \n");
            parser.generateSyntaxError("Error in gramatic body, unknown error", "Gramatic Body", e);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramatic_body ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // error_constant ::= KW_CONST keyword_types IDENT error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be defined as literal", "=", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be asigned with literal", "literal", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_HEXVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_DECIMALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_CHARVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_OCTALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_EXPONENTIALDEF error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable ::= keyword_types variable_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable_definition ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // variable_definition ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // error_variable_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_variable_definition",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameters_definition ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameter_definition ::= keyword_types IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter_definition ::= KW_CONST keyword_types IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // error_parameter ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // error_parameter ::= KW_CONST error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Const params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // error_parameter ::= IDENT error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_any_type OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression ::= expression_any_type 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression_any_type ::= expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_any_type ::= expression_unary_operator IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression_any_type ::= IDENT expression_unary_operator 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_any_type ::= expression expression_binary_operators expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_any_type ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_any_type ::= OP_NEGATION expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_any_type ::= OP_NOT expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_numeric ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_numeric ::= expression_atomic_literal_int 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_numeric ::= expression_atomic_call_functions_anytype 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_numeric ::= expression_unary_operator expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression_numeric ::= expression_numeric expression_binary_operators expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_numeric ::= expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_atomic ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_atomic ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_atomic ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_atomic ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_atomic ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_atomic ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expression_binary_operators ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expression_binary_operators ::= OP_ORASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // keyword_types ::= KW_INT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // keyword_types ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // keyword_types ::= KW_LONG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // keyword_types ::= KW_SHORT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // keyword_types ::= KW_VOID 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // keyword_types ::= KW_FLOAT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // keyword_types ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
