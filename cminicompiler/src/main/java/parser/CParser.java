
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.CLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\046\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\002\000\002\004\007" +
    "\000\002\002\004\000\002\002\003\000\002\003\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\003\000\002" +
    "\035\010\000\002\036\004\000\002\036\004\000\002\036" +
    "\003\000\002\036\003\000\002\037\007\000\002\037\007" +
    "\000\002\040\006\000\002\014\004\000\002\014\003\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\005\000\002\013\005\000\002\013\005\000\002\013" +
    "\004\000\002\013\006\000\002\013\002\000\002\027\004" +
    "\000\002\030\010\000\002\031\004\000\002\032\003\000" +
    "\002\032\005\000\002\032\005\000\002\032\007\000\002" +
    "\006\005\000\002\006\003\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\011\004\000\002\011\005" +
    "\000\002\011\007\000\002\015\005\000\002\015\003\000" +
    "\002\015\003\000\002\017\005\000\002\017\003\000\002" +
    "\016\003\000\002\016\004\000\002\016\005\000\002\016" +
    "\007\000\002\021\003\000\002\021\006\000\002\021\005" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\025\003\000\002\025\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\026\005\000\002\026\006\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\022\002\ufffd\010\006\015\020\021\017\025" +
    "\015\026\010\031\016\042\013\001\002\000\004\002\000" +
    "\001\002\000\022\002\ufffd\010\006\015\020\021\017\025" +
    "\015\026\010\031\016\042\013\001\002\000\004\004\uff95" +
    "\001\002\000\022\002\ufffd\010\006\015\020\021\017\025" +
    "\015\026\010\031\016\042\013\001\002\000\004\004\uff94" +
    "\001\002\000\004\120\231\001\002\000\004\002\230\001" +
    "\002\000\004\004\uff92\001\002\000\004\004\022\001\002" +
    "\000\004\004\uff96\001\002\000\004\004\uff93\001\002\000" +
    "\004\004\uff91\001\002\000\004\004\uff90\001\002\000\066" +
    "\002\uffe0\004\uffe0\010\uffe0\011\uffe0\015\uffe0\016\uffe0\021" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\042\uffe0" +
    "\074\uffe0\075\uffe0\112\uffe0\116\uffe0\117\uffe0\120\uffe0\123" +
    "\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0" +
    "\001\002\000\012\052\024\106\025\112\023\120\uffdf\001" +
    "\002\000\024\010\006\011\137\015\020\021\017\025\015" +
    "\026\010\031\016\042\013\113\134\001\002\000\004\004" +
    "\117\001\002\000\030\004\027\074\031\075\026\112\043" +
    "\123\042\124\033\125\040\126\034\127\030\130\035\131" +
    "\032\001\002\000\030\004\uffb6\074\uffb6\075\uffb6\112\uffb6" +
    "\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131" +
    "\uffb6\001\002\000\174\002\uffca\004\uffca\010\uffca\011\uffca" +
    "\015\uffca\016\uffca\021\uffca\024\uffca\025\uffca\026\uffca\030" +
    "\uffca\031\uffca\042\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca" +
    "\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074" +
    "\uffca\075\uffca\076\uffca\077\uffca\100\uffca\101\uffca\102\uffca" +
    "\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca\110\uffca\112" +
    "\121\113\uffca\116\uffca\117\uffca\120\uffca\123\uffca\124\uffca" +
    "\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\001\002\000" +
    "\174\002\uffc3\004\uffc3\010\uffc3\011\uffc3\015\uffc3\016\uffc3" +
    "\021\uffc3\024\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\042" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\053\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061" +
    "\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3" +
    "\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076" +
    "\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3\103\uffc3\104\uffc3" +
    "\105\uffc3\106\uffc3\107\uffc3\110\uffc3\112\uffc3\113\uffc3\116" +
    "\uffc3\117\uffc3\120\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3" +
    "\127\uffc3\130\uffc3\131\uffc3\001\002\000\030\004\uffb7\074" +
    "\uffb7\075\uffb7\112\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7" +
    "\127\uffb7\130\uffb7\131\uffb7\001\002\000\174\002\uffc1\004" +
    "\uffc1\010\uffc1\011\uffc1\015\uffc1\016\uffc1\021\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\030\uffc1\031\uffc1\042\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\057\uffc1\060\uffc1\061\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\071\uffc1" +
    "\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100" +
    "\uffc1\101\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1" +
    "\107\uffc1\110\uffc1\112\uffc1\113\uffc1\116\uffc1\117\uffc1\120" +
    "\uffc1\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1" +
    "\131\uffc1\001\002\000\174\002\uffc6\004\uffc6\010\uffc6\011" +
    "\uffc6\015\uffc6\016\uffc6\021\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\030\uffc6\031\uffc6\042\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\076\uffc6\077\uffc6\100\uffc6\101\uffc6\102" +
    "\uffc6\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\110\uffc6" +
    "\112\uffc6\113\uffc6\116\uffc6\117\uffc6\120\uffc6\123\uffc6\124" +
    "\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6\131\uffc6\001\002" +
    "\000\174\002\uffc4\004\uffc4\010\uffc4\011\uffc4\015\uffc4\016" +
    "\uffc4\021\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4" +
    "\042\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4" +
    "\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067" +
    "\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4" +
    "\076\uffc4\077\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\112\uffc4\113\uffc4" +
    "\116\uffc4\117\uffc4\120\uffc4\123\uffc4\124\uffc4\125\uffc4\126" +
    "\uffc4\127\uffc4\130\uffc4\131\uffc4\001\002\000\174\002\uffc2" +
    "\004\uffc2\010\uffc2\011\uffc2\015\uffc2\016\uffc2\021\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\030\uffc2\031\uffc2\042\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2" +
    "\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\110\uffc2\112\uffc2\113\uffc2\116\uffc2\117\uffc2" +
    "\120\uffc2\123\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130" +
    "\uffc2\131\uffc2\001\002\000\174\002\uffce\004\uffce\010\uffce" +
    "\011\uffce\015\uffce\016\uffce\021\uffce\024\uffce\025\uffce\026" +
    "\uffce\030\uffce\031\uffce\042\uffce\045\uffce\046\uffce\047\uffce" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce" +
    "\102\uffce\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce\110" +
    "\uffce\112\uffce\113\uffce\116\uffce\117\uffce\120\uffce\123\uffce" +
    "\124\uffce\125\uffce\126\uffce\127\uffce\130\uffce\131\uffce\001" +
    "\002\000\174\002\uffcf\004\uffcf\010\uffcf\011\uffcf\015\uffcf" +
    "\016\uffcf\021\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf\031" +
    "\uffcf\042\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf" +
    "\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075" +
    "\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102\uffcf\103\uffcf" +
    "\104\uffcf\105\uffcf\106\uffcf\107\uffcf\110\uffcf\112\uffcf\113" +
    "\uffcf\116\uffcf\117\uffcf\120\uffcf\123\uffcf\124\uffcf\125\uffcf" +
    "\126\uffcf\127\uffcf\130\uffcf\131\uffcf\001\002\000\174\002" +
    "\uffc5\004\uffc5\010\uffc5\011\uffc5\015\uffc5\016\uffc5\021\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\042\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077" +
    "\uffc5\100\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5" +
    "\106\uffc5\107\uffc5\110\uffc5\112\uffc5\113\uffc5\116\uffc5\117" +
    "\uffc5\120\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5" +
    "\130\uffc5\131\uffc5\001\002\000\170\002\uffde\004\uffde\010" +
    "\uffde\011\uffde\015\uffde\016\uffde\021\uffde\024\uffde\025\uffde" +
    "\026\uffde\030\uffde\031\uffde\042\uffde\045\075\046\062\047" +
    "\072\050\100\051\050\052\116\053\067\054\056\055\061" +
    "\056\073\057\105\060\054\061\074\062\057\063\051\064" +
    "\103\065\063\066\060\067\052\070\064\071\071\072\104" +
    "\073\047\074\uffde\075\uffde\076\046\077\076\100\106\101" +
    "\077\102\102\103\101\104\070\106\053\107\055\110\066" +
    "\112\uffde\116\uffde\117\uffde\120\uffde\123\uffde\124\uffde\125" +
    "\uffde\126\uffde\127\uffde\130\uffde\131\uffde\001\002\000\174" +
    "\002\uffc7\004\uffc7\010\uffc7\011\uffc7\015\uffc7\016\uffc7\021" +
    "\uffc7\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\042\uffc7" +
    "\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053" +
    "\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105" +
    "\uffc7\106\uffc7\107\uffc7\110\uffc7\112\uffc7\113\uffc7\116\uffc7" +
    "\117\uffc7\120\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127" +
    "\uffc7\130\uffc7\131\uffc7\001\002\000\030\004\027\074\031" +
    "\075\026\112\043\123\042\124\033\125\040\126\034\127" +
    "\030\130\035\131\032\001\002\000\030\004\027\074\031" +
    "\075\026\112\043\123\042\124\033\125\040\126\034\127" +
    "\030\130\035\131\032\001\002\000\174\002\uffcd\004\uffcd" +
    "\010\uffcd\011\uffcd\015\uffcd\016\uffcd\021\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\030\uffcd\031\uffcd\042\uffcd\045\075\046\062" +
    "\047\072\050\100\051\050\052\uffcd\053\067\054\056\055" +
    "\061\056\073\057\105\060\054\061\074\062\057\063\051" +
    "\064\103\065\063\066\060\067\052\070\064\071\071\072" +
    "\104\073\047\074\uffcd\075\uffcd\076\046\077\076\100\106" +
    "\101\077\102\102\103\101\104\070\105\uffcd\106\053\107" +
    "\055\110\066\112\uffcd\113\uffcd\116\uffcd\117\uffcd\120\uffcd" +
    "\123\uffcd\124\uffcd\125\uffcd\126\uffcd\127\uffcd\130\uffcd\131" +
    "\uffcd\001\002\000\030\004\uff9c\074\uff9c\075\uff9c\112\uff9c" +
    "\123\uff9c\124\uff9c\125\uff9c\126\uff9c\127\uff9c\130\uff9c\131" +
    "\uff9c\001\002\000\030\004\uff9d\074\uff9d\075\uff9d\112\uff9d" +
    "\123\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131" +
    "\uff9d\001\002\000\030\004\uffb1\074\uffb1\075\uffb1\112\uffb1" +
    "\123\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131" +
    "\uffb1\001\002\000\030\004\uffa7\074\uffa7\075\uffa7\112\uffa7" +
    "\123\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7\130\uffa7\131" +
    "\uffa7\001\002\000\030\004\uffa8\074\uffa8\075\uffa8\112\uffa8" +
    "\123\uffa8\124\uffa8\125\uffa8\126\uffa8\127\uffa8\130\uffa8\131" +
    "\uffa8\001\002\000\030\004\uffa1\074\uffa1\075\uffa1\112\uffa1" +
    "\123\uffa1\124\uffa1\125\uffa1\126\uffa1\127\uffa1\130\uffa1\131" +
    "\uffa1\001\002\000\030\004\uffa9\074\uffa9\075\uffa9\112\uffa9" +
    "\123\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9\130\uffa9\131" +
    "\uffa9\001\002\000\030\004\uffa4\074\uffa4\075\uffa4\112\uffa4" +
    "\123\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131" +
    "\uffa4\001\002\000\030\004\uffaf\074\uffaf\075\uffaf\112\uffaf" +
    "\123\uffaf\124\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131" +
    "\uffaf\001\002\000\030\004\uffac\074\uffac\075\uffac\112\uffac" +
    "\123\uffac\124\uffac\125\uffac\126\uffac\127\uffac\130\uffac\131" +
    "\uffac\001\002\000\030\004\uffa3\074\uffa3\075\uffa3\112\uffa3" +
    "\123\uffa3\124\uffa3\125\uffa3\126\uffa3\127\uffa3\130\uffa3\131" +
    "\uffa3\001\002\000\030\004\uffb0\074\uffb0\075\uffb0\112\uffb0" +
    "\123\uffb0\124\uffb0\125\uffb0\126\uffb0\127\uffb0\130\uffb0\131" +
    "\uffb0\001\002\000\030\004\uffb3\074\uffb3\075\uffb3\112\uffb3" +
    "\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131" +
    "\uffb3\001\002\000\030\004\uffa6\074\uffa6\075\uffa6\112\uffa6" +
    "\123\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130\uffa6\131" +
    "\uffa6\001\002\000\030\004\uffa0\074\uffa0\075\uffa0\112\uffa0" +
    "\123\uffa0\124\uffa0\125\uffa0\126\uffa0\127\uffa0\130\uffa0\131" +
    "\uffa0\001\002\000\030\004\027\074\031\075\026\112\043" +
    "\123\042\124\033\125\040\126\034\127\030\130\035\131" +
    "\032\001\002\000\030\004\uffa5\074\uffa5\075\uffa5\112\uffa5" +
    "\123\uffa5\124\uffa5\125\uffa5\126\uffa5\127\uffa5\130\uffa5\131" +
    "\uffa5\001\002\000\030\004\uffad\074\uffad\075\uffad\112\uffad" +
    "\123\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130\uffad\131" +
    "\uffad\001\002\000\030\004\027\074\031\075\026\112\043" +
    "\123\042\124\033\125\040\126\034\127\030\130\035\131" +
    "\032\001\002\000\030\004\uff9f\074\uff9f\075\uff9f\112\uff9f" +
    "\123\uff9f\124\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131" +
    "\uff9f\001\002\000\030\004\uffb5\074\uffb5\075\uffb5\112\uffb5" +
    "\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5\130\uffb5\131" +
    "\uffb5\001\002\000\030\004\uffae\074\uffae\075\uffae\112\uffae" +
    "\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae\131" +
    "\uffae\001\002\000\030\004\uffaa\074\uffaa\075\uffaa\112\uffaa" +
    "\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130\uffaa\131" +
    "\uffaa\001\002\000\030\004\uffb4\074\uffb4\075\uffb4\112\uffb4" +
    "\123\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4\130\uffb4\131" +
    "\uffb4\001\002\000\030\004\uff97\074\uff97\075\uff97\112\uff97" +
    "\123\uff97\124\uff97\125\uff97\126\uff97\127\uff97\130\uff97\131" +
    "\uff97\001\002\000\030\004\uff98\074\uff98\075\uff98\112\uff98" +
    "\123\uff98\124\uff98\125\uff98\126\uff98\127\uff98\130\uff98\131" +
    "\uff98\001\002\000\030\004\uffb2\074\uffb2\075\uffb2\112\uffb2" +
    "\123\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131" +
    "\uffb2\001\002\000\030\004\uff9a\074\uff9a\075\uff9a\112\uff9a" +
    "\123\uff9a\124\uff9a\125\uff9a\126\uff9a\127\uff9a\130\uff9a\131" +
    "\uff9a\001\002\000\030\004\uff9b\074\uff9b\075\uff9b\112\uff9b" +
    "\123\uff9b\124\uff9b\125\uff9b\126\uff9b\127\uff9b\130\uff9b\131" +
    "\uff9b\001\002\000\030\004\uffa2\074\uffa2\075\uffa2\112\uffa2" +
    "\123\uffa2\124\uffa2\125\uffa2\126\uffa2\127\uffa2\130\uffa2\131" +
    "\uffa2\001\002\000\030\004\uff9e\074\uff9e\075\uff9e\112\uff9e" +
    "\123\uff9e\124\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131" +
    "\uff9e\001\002\000\030\004\uffab\074\uffab\075\uffab\112\uffab" +
    "\123\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab\131" +
    "\uffab\001\002\000\030\004\uff99\074\uff99\075\uff99\112\uff99" +
    "\123\uff99\124\uff99\125\uff99\126\uff99\127\uff99\130\uff99\131" +
    "\uff99\001\002\000\104\045\075\046\062\047\072\050\100" +
    "\051\050\053\067\054\056\055\061\056\073\057\105\060" +
    "\054\061\074\062\057\063\051\064\103\065\063\066\060" +
    "\067\052\070\064\071\071\072\104\073\047\076\046\077" +
    "\076\100\106\101\077\102\102\103\101\104\070\105\110" +
    "\106\053\107\055\110\066\001\002\000\030\004\027\074" +
    "\031\075\026\112\043\123\042\124\033\125\040\126\034" +
    "\127\030\130\035\131\032\001\002\000\174\002\uffcb\004" +
    "\uffcb\010\uffcb\011\uffcb\015\uffcb\016\uffcb\021\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\030\uffcb\031\uffcb\042\uffcb\045\uffcb\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\067\054\056" +
    "\055\061\056\073\057\105\060\054\061\074\062\057\063" +
    "\051\064\103\065\063\066\060\067\052\070\064\071\071" +
    "\072\104\073\047\074\uffcb\075\uffcb\076\046\077\076\100" +
    "\106\101\077\102\102\103\101\104\uffcb\105\uffcb\106\053" +
    "\107\055\110\066\112\uffcb\113\uffcb\116\uffcb\117\uffcb\120" +
    "\uffcb\123\uffcb\124\uffcb\125\uffcb\126\uffcb\127\uffcb\130\uffcb" +
    "\131\uffcb\001\002\000\174\002\uffcc\004\uffcc\010\uffcc\011" +
    "\uffcc\015\uffcc\016\uffcc\021\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\030\uffcc\031\uffcc\042\uffcc\045\075\046\062\047\072\050" +
    "\100\051\050\052\uffcc\053\067\054\056\055\061\056\073" +
    "\057\105\060\054\061\074\062\057\063\051\064\103\065" +
    "\063\066\060\067\052\070\064\071\071\072\104\073\047" +
    "\074\uffcc\075\uffcc\076\046\077\076\100\106\101\077\102" +
    "\102\103\101\104\070\105\uffcc\106\053\107\055\110\066" +
    "\112\uffcc\113\uffcc\116\uffcc\117\uffcc\120\uffcc\123\uffcc\124" +
    "\uffcc\125\uffcc\126\uffcc\127\uffcc\130\uffcc\131\uffcc\001\002" +
    "\000\104\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070" +
    "\uffcf\071\uffcf\072\uffcf\073\uffcf\076\uffcf\077\uffcf\100\uffcf" +
    "\101\uffcf\102\uffcf\103\uffcf\104\uffcf\106\uffcf\107\uffcf\110" +
    "\uffcf\113\115\001\002\000\102\045\075\046\062\047\072" +
    "\050\100\051\050\053\067\054\056\055\061\056\073\057" +
    "\105\060\054\061\074\062\057\063\051\064\103\065\063" +
    "\066\060\067\052\070\064\071\071\072\104\073\047\076" +
    "\046\077\076\100\106\101\077\102\102\103\101\104\070" +
    "\106\053\107\055\110\066\001\002\000\174\002\uffd0\004" +
    "\uffd0\010\uffd0\011\uffd0\015\uffd0\016\uffd0\021\uffd0\024\uffd0" +
    "\025\uffd0\026\uffd0\030\uffd0\031\uffd0\042\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0\070\uffd0\071\uffd0" +
    "\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100" +
    "\uffd0\101\uffd0\102\uffd0\103\uffd0\104\uffd0\105\uffd0\106\uffd0" +
    "\107\uffd0\110\uffd0\112\uffd0\113\uffd0\116\uffd0\117\uffd0\120" +
    "\uffd0\123\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0" +
    "\131\uffd0\001\002\000\004\004\117\001\002\000\072\002" +
    "\uffdf\004\uffdf\010\uffdf\011\uffdf\015\uffdf\016\uffdf\021\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\042\uffdf\052" +
    "\024\074\uffdf\075\uffdf\106\025\112\uffdf\116\uffdf\117\uffdf" +
    "\120\uffdf\123\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130" +
    "\uffdf\131\uffdf\001\002\000\066\002\uffdc\004\uffdc\010\uffdc" +
    "\011\uffdc\015\uffdc\016\uffdc\021\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\030\uffdc\031\uffdc\042\uffdc\074\uffdc\075\uffdc\112\uffdc" +
    "\116\uffdc\117\uffdc\120\uffdc\123\uffdc\124\uffdc\125\uffdc\126" +
    "\uffdc\127\uffdc\130\uffdc\131\uffdc\001\002\000\032\004\027" +
    "\074\031\075\026\112\043\113\125\123\042\124\033\125" +
    "\040\126\034\127\030\130\035\131\032\001\002\000\006" +
    "\052\127\113\uffda\001\002\000\004\113\126\001\002\000" +
    "\106\045\075\046\062\047\072\050\100\051\050\052\uffd9" +
    "\053\067\054\056\055\061\056\073\057\105\060\054\061" +
    "\074\062\057\063\051\064\103\065\063\066\060\067\052" +
    "\070\064\071\071\072\104\073\047\076\046\077\076\100" +
    "\106\101\077\102\102\103\101\104\070\106\053\107\055" +
    "\110\066\113\uffd9\001\002\000\174\002\uffc8\004\uffc8\010" +
    "\uffc8\011\uffc8\015\uffc8\016\uffc8\021\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\030\uffc8\031\uffc8\042\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8" +
    "\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8\100\uffc8\101" +
    "\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8" +
    "\110\uffc8\112\uffc8\113\uffc8\116\uffc8\117\uffc8\120\uffc8\123" +
    "\uffc8\124\uffc8\125\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8" +
    "\001\002\000\174\002\uffc9\004\uffc9\010\uffc9\011\uffc9\015" +
    "\uffc9\016\uffc9\021\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9" +
    "\031\uffc9\042\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9" +
    "\075\uffc9\076\uffc9\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103" +
    "\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\112\uffc9" +
    "\113\uffc9\116\uffc9\117\uffc9\120\uffc9\123\uffc9\124\uffc9\125" +
    "\uffc9\126\uffc9\127\uffc9\130\uffc9\131\uffc9\001\002\000\030" +
    "\004\027\074\031\075\026\112\043\123\042\124\033\125" +
    "\040\126\034\127\030\130\035\131\032\001\002\000\004" +
    "\113\uffdb\001\002\000\066\002\uffdd\004\uffdd\010\uffdd\011" +
    "\uffdd\015\uffdd\016\uffdd\021\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\030\uffdd\031\uffdd\042\uffdd\074\uffdd\075\uffdd\112\uffdd\116" +
    "\uffdd\117\uffdd\120\uffdd\123\uffdd\124\uffdd\125\uffdd\126\uffdd" +
    "\127\uffdd\130\uffdd\131\uffdd\001\002\000\006\052\226\113" +
    "\uffd7\001\002\000\004\113\225\001\002\000\062\002\ufffa" +
    "\004\ufffa\010\ufffa\011\ufffa\015\ufffa\021\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\030\ufffa\031\ufffa\042\ufffa\074\ufffa\075\ufffa" +
    "\112\ufffa\116\ufffa\120\ufffa\123\ufffa\124\ufffa\125\ufffa\126" +
    "\ufffa\127\ufffa\130\ufffa\131\ufffa\001\002\000\004\004\224" +
    "\001\002\000\062\002\uffe3\004\144\010\006\011\145\015" +
    "\020\021\017\024\147\025\015\026\010\030\157\031\016" +
    "\042\013\074\031\075\026\112\043\116\162\120\156\123" +
    "\042\124\033\125\040\126\034\127\030\130\035\131\032" +
    "\001\002\000\020\010\006\015\020\021\017\025\015\026" +
    "\010\031\016\042\013\001\002\000\004\004\141\001\002" +
    "\000\010\052\uffd5\106\142\113\uffd5\001\002\000\002\001" +
    "\002\000\006\052\uffd4\113\uffd4\001\002\000\166\002\uffca" +
    "\004\uffca\010\uffca\011\uffca\015\uffca\016\uffca\021\uffca\024" +
    "\uffca\025\uffca\026\uffca\030\uffca\031\uffca\042\uffca\045\uffca" +
    "\046\uffca\047\uffca\050\uffca\051\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca" +
    "\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072" +
    "\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca\100\uffca" +
    "\101\uffca\102\uffca\103\uffca\104\uffca\106\222\107\uffca\110" +
    "\uffca\112\121\116\uffca\117\uffca\120\uffca\123\uffca\124\uffca" +
    "\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\001\002\000" +
    "\020\010\006\015\020\021\017\025\015\026\010\031\016" +
    "\042\013\001\002\000\022\002\ufff9\010\ufff9\015\ufff9\021" +
    "\ufff9\025\ufff9\026\ufff9\031\ufff9\042\ufff9\001\002\000\004" +
    "\112\203\001\002\000\066\002\uffe3\004\144\010\006\011" +
    "\145\015\020\016\uffe3\021\017\024\147\025\015\026\010" +
    "\030\157\031\016\042\013\074\031\075\026\112\043\116" +
    "\165\117\uffe3\120\156\123\042\124\033\125\040\126\034" +
    "\127\030\130\035\131\032\001\002\000\022\002\ufffc\010" +
    "\ufffc\015\ufffc\021\ufffc\025\ufffc\026\ufffc\031\ufffc\042\ufffc" +
    "\001\002\000\066\002\uffec\004\uffec\010\uffec\011\uffec\015" +
    "\uffec\016\uffec\021\uffec\024\uffec\025\uffec\026\uffec\030\uffec" +
    "\031\uffec\042\uffec\074\uffec\075\uffec\112\uffec\116\uffec\117" +
    "\uffec\120\uffec\123\uffec\124\uffec\125\uffec\126\uffec\127\uffec" +
    "\130\uffec\131\uffec\001\002\000\166\002\uffd1\004\uffd1\010" +
    "\uffd1\011\uffd1\015\uffd1\016\uffd1\021\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\030\uffd1\031\uffd1\042\uffd1\045\075\046\062\047" +
    "\072\050\100\051\050\053\067\054\056\055\061\056\073" +
    "\057\105\060\054\061\074\062\057\063\051\064\103\065" +
    "\063\066\060\067\052\070\064\071\071\072\104\073\047" +
    "\074\uffd1\075\uffd1\076\046\077\076\100\106\101\077\102" +
    "\102\103\101\104\070\106\053\107\055\110\066\112\uffd1" +
    "\116\uffd1\117\uffd1\120\200\123\uffd1\124\uffd1\125\uffd1\126" +
    "\uffd1\127\uffd1\130\uffd1\131\uffd1\001\002\000\004\004\117" +
    "\001\002\000\066\002\uffe3\004\144\010\006\011\145\015" +
    "\020\016\uffe3\021\017\024\147\025\015\026\010\030\157" +
    "\031\016\042\013\074\031\075\026\112\043\116\165\117" +
    "\uffe3\120\156\123\042\124\033\125\040\126\034\127\030" +
    "\130\035\131\032\001\002\000\066\002\uffe3\004\144\010" +
    "\006\011\145\015\020\016\uffe3\021\017\024\147\025\015" +
    "\026\010\030\157\031\016\042\013\074\031\075\026\112" +
    "\043\116\165\117\uffe3\120\156\123\042\124\033\125\040" +
    "\126\034\127\030\130\035\131\032\001\002\000\030\004" +
    "\027\074\031\075\026\112\043\123\042\124\033\125\040" +
    "\126\034\127\030\130\035\131\032\001\002\000\066\002" +
    "\uffd2\004\uffd2\010\uffd2\011\uffd2\015\uffd2\016\uffd2\021\uffd2" +
    "\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\042\uffd2\074" +
    "\uffd2\075\uffd2\112\uffd2\116\uffd2\117\uffd2\120\171\123\uffd2" +
    "\124\uffd2\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\001" +
    "\002\000\004\120\167\001\002\000\062\004\144\010\006" +
    "\011\145\015\020\021\017\024\147\025\015\026\010\030" +
    "\157\031\016\042\013\074\031\075\026\112\043\116\165" +
    "\117\163\120\156\123\042\124\033\125\040\126\034\127" +
    "\030\130\035\131\032\001\002\000\066\002\uffed\004\uffed" +
    "\010\uffed\011\uffed\015\uffed\016\uffed\021\uffed\024\uffed\025" +
    "\uffed\026\uffed\030\uffed\031\uffed\042\uffed\074\uffed\075\uffed" +
    "\112\uffed\116\uffed\117\uffed\120\uffed\123\uffed\124\uffed\125" +
    "\uffed\126\uffed\127\uffed\130\uffed\131\uffed\001\002\000\004" +
    "\117\166\001\002\000\062\004\144\010\006\011\145\015" +
    "\020\021\017\024\147\025\015\026\010\030\157\031\016" +
    "\042\013\074\031\075\026\112\043\116\165\117\uffe3\120" +
    "\156\123\042\124\033\125\040\126\034\127\030\130\035" +
    "\131\032\001\002\000\066\002\uffeb\004\uffeb\010\uffeb\011" +
    "\uffeb\015\uffeb\016\uffeb\021\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\030\uffeb\031\uffeb\042\uffeb\074\uffeb\075\uffeb\112\uffeb\116" +
    "\uffeb\117\uffeb\120\uffeb\123\uffeb\124\uffeb\125\uffeb\126\uffeb" +
    "\127\uffeb\130\uffeb\131\uffeb\001\002\000\066\002\uffe3\004" +
    "\144\010\006\011\145\015\020\016\uffe3\021\017\024\147" +
    "\025\015\026\010\030\157\031\016\042\013\074\031\075" +
    "\026\112\043\116\165\117\uffe3\120\156\123\042\124\033" +
    "\125\040\126\034\127\030\130\035\131\032\001\002\000" +
    "\066\002\uffe6\004\uffe6\010\uffe6\011\uffe6\015\uffe6\016\uffe6" +
    "\021\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\042" +
    "\uffe6\074\uffe6\075\uffe6\112\uffe6\116\uffe6\117\uffe6\120\uffe6" +
    "\123\uffe6\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131" +
    "\uffe6\001\002\000\066\002\uffe3\004\144\010\006\011\145" +
    "\015\020\016\uffe3\021\017\024\147\025\015\026\010\030" +
    "\157\031\016\042\013\074\031\075\026\112\043\116\165" +
    "\117\uffe3\120\156\123\042\124\033\125\040\126\034\127" +
    "\030\130\035\131\032\001\002\000\066\002\uffe8\004\uffe8" +
    "\010\uffe8\011\uffe8\015\uffe8\016\uffe8\021\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\030\uffe8\031\uffe8\042\uffe8\074\uffe8\075\uffe8" +
    "\112\uffe8\116\uffe8\117\uffe8\120\uffe8\123\uffe8\124\uffe8\125" +
    "\uffe8\126\uffe8\127\uffe8\130\uffe8\131\uffe8\001\002\000\104" +
    "\045\075\046\062\047\072\050\100\051\050\053\067\054" +
    "\056\055\061\056\073\057\105\060\054\061\074\062\057" +
    "\063\051\064\103\065\063\066\060\067\052\070\064\071" +
    "\071\072\104\073\047\076\046\077\076\100\106\101\077" +
    "\102\102\103\101\104\070\106\053\107\055\110\066\120" +
    "\174\001\002\000\066\002\uffe3\004\144\010\006\011\145" +
    "\015\020\016\uffe3\021\017\024\147\025\015\026\010\030" +
    "\157\031\016\042\013\074\031\075\026\112\043\116\165" +
    "\117\uffe3\120\156\123\042\124\033\125\040\126\034\127" +
    "\030\130\035\131\032\001\002\000\066\002\uffe4\004\uffe4" +
    "\010\uffe4\011\uffe4\015\uffe4\016\uffe4\021\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\030\uffe4\031\uffe4\042\uffe4\074\uffe4\075\uffe4" +
    "\112\uffe4\116\uffe4\117\uffe4\120\uffe4\123\uffe4\124\uffe4\125" +
    "\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\001\002\000\066" +
    "\002\uffe9\004\uffe9\010\uffe9\011\uffe9\015\uffe9\016\uffe9\021" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\042\uffe9" +
    "\074\uffe9\075\uffe9\112\uffe9\116\uffe9\117\uffe9\120\uffe9\123" +
    "\uffe9\124\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9" +
    "\001\002\000\066\002\uffe5\004\uffe5\010\uffe5\011\uffe5\015" +
    "\uffe5\016\uffe5\021\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5" +
    "\031\uffe5\042\uffe5\074\uffe5\075\uffe5\112\uffe5\116\uffe5\117" +
    "\uffe5\120\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5" +
    "\130\uffe5\131\uffe5\001\002\000\066\002\uffe3\004\144\010" +
    "\006\011\145\015\020\016\uffe3\021\017\024\147\025\015" +
    "\026\010\030\157\031\016\042\013\074\031\075\026\112" +
    "\043\116\165\117\uffe3\120\156\123\042\124\033\125\040" +
    "\126\034\127\030\130\035\131\032\001\002\000\066\002" +
    "\uffe7\004\uffe7\010\uffe7\011\uffe7\015\uffe7\016\uffe7\021\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031\uffe7\042\uffe7\074" +
    "\uffe7\075\uffe7\112\uffe7\116\uffe7\117\uffe7\120\uffe7\123\uffe7" +
    "\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\001" +
    "\002\000\066\002\uffea\004\uffea\010\uffea\011\uffea\015\uffea" +
    "\016\uffea\021\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031" +
    "\uffea\042\uffea\074\uffea\075\uffea\112\uffea\116\uffea\117\uffea" +
    "\120\uffea\123\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130" +
    "\uffea\131\uffea\001\002\000\030\004\027\074\031\075\026" +
    "\112\043\123\042\124\033\125\040\126\034\127\030\130" +
    "\035\131\032\001\002\000\104\045\075\046\062\047\072" +
    "\050\100\051\050\053\067\054\056\055\061\056\073\057" +
    "\105\060\054\061\074\062\057\063\051\064\103\065\063" +
    "\066\060\067\052\070\064\071\071\072\104\073\047\076" +
    "\046\077\076\100\106\101\077\102\102\103\101\104\070" +
    "\106\053\107\055\110\066\113\205\001\002\000\066\002" +
    "\uffe3\004\144\010\006\011\145\015\020\016\uffe3\021\017" +
    "\024\147\025\015\026\010\030\157\031\016\042\013\074" +
    "\031\075\026\112\043\116\162\117\uffe3\120\156\123\042" +
    "\124\033\125\040\126\034\127\030\130\035\131\032\001" +
    "\002\000\066\002\uffe3\004\144\010\006\011\145\015\020" +
    "\016\211\021\017\024\147\025\015\026\010\030\157\031" +
    "\016\042\013\074\031\075\026\112\043\116\162\117\uffe3" +
    "\120\156\123\042\124\033\125\040\126\034\127\030\130" +
    "\035\131\032\001\002\000\066\002\ufff5\004\ufff5\010\ufff5" +
    "\011\ufff5\015\ufff5\016\ufff5\021\ufff5\024\ufff5\025\ufff5\026" +
    "\ufff5\030\ufff5\031\ufff5\042\ufff5\074\ufff5\075\ufff5\112\ufff5" +
    "\116\ufff5\117\ufff5\120\ufff5\123\ufff5\124\ufff5\125\ufff5\126" +
    "\ufff5\127\ufff5\130\ufff5\131\ufff5\001\002\000\066\002\ufff2" +
    "\004\ufff2\010\ufff2\011\ufff2\015\ufff2\016\ufff2\021\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\042\ufff2\074\ufff2" +
    "\075\ufff2\112\ufff2\116\ufff2\117\ufff2\120\167\123\ufff2\124" +
    "\ufff2\125\ufff2\126\ufff2\127\ufff2\130\ufff2\131\ufff2\001\002" +
    "\000\066\002\uffe3\004\144\010\006\011\145\015\020\016" +
    "\uffe3\021\017\024\147\025\015\026\010\030\157\031\016" +
    "\042\013\074\031\075\026\112\043\116\162\117\uffe3\120" +
    "\156\123\042\124\033\125\040\126\034\127\030\130\035" +
    "\131\032\001\002\000\066\002\ufff1\004\ufff1\010\ufff1\011" +
    "\ufff1\015\ufff1\016\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\030\ufff1\031\ufff1\042\ufff1\074\ufff1\075\ufff1\112\ufff1\116" +
    "\ufff1\117\ufff1\120\ufff1\123\ufff1\124\ufff1\125\ufff1\126\ufff1" +
    "\127\ufff1\130\ufff1\131\ufff1\001\002\000\066\002\ufff4\004" +
    "\ufff4\010\ufff4\011\ufff4\015\ufff4\016\ufff4\021\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\030\ufff4\031\ufff4\042\ufff4\074\ufff4\075" +
    "\ufff4\112\ufff4\116\ufff4\117\ufff4\120\ufff4\123\ufff4\124\ufff4" +
    "\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131\ufff4\001\002\000" +
    "\066\002\ufff3\004\ufff3\010\ufff3\011\ufff3\015\ufff3\016\ufff3" +
    "\021\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\042" +
    "\ufff3\074\ufff3\075\ufff3\112\ufff3\116\ufff3\117\ufff3\120\ufff3" +
    "\123\ufff3\124\ufff3\125\ufff3\126\ufff3\127\ufff3\130\ufff3\131" +
    "\ufff3\001\002\000\004\004\216\001\002\000\004\106\217" +
    "\001\002\000\002\001\002\000\004\120\221\001\002\000" +
    "\066\002\uffe1\004\uffe1\010\uffe1\011\uffe1\015\uffe1\016\uffe1" +
    "\021\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\042" +
    "\uffe1\074\uffe1\075\uffe1\112\uffe1\116\uffe1\117\uffe1\120\uffe1" +
    "\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131" +
    "\uffe1\001\002\000\030\004\027\074\031\075\026\112\043" +
    "\123\042\124\033\125\040\126\034\127\030\130\035\131" +
    "\032\001\002\000\166\002\uffd3\004\uffd3\010\uffd3\011\uffd3" +
    "\015\uffd3\016\uffd3\021\uffd3\024\uffd3\025\uffd3\026\uffd3\030" +
    "\uffd3\031\uffd3\042\uffd3\045\075\046\062\047\072\050\100" +
    "\051\050\053\067\054\056\055\061\056\073\057\105\060" +
    "\054\061\074\062\057\063\051\064\103\065\063\066\060" +
    "\067\052\070\064\071\071\072\104\073\047\074\uffd3\075" +
    "\uffd3\076\046\077\076\100\106\101\077\102\102\103\101" +
    "\104\070\106\053\107\055\110\066\112\uffd3\116\uffd3\117" +
    "\uffd3\120\uffd3\123\uffd3\124\uffd3\125\uffd3\126\uffd3\127\uffd3" +
    "\130\uffd3\131\uffd3\001\002\000\006\052\uffd6\113\uffd6\001" +
    "\002\000\062\002\ufffb\004\ufffb\010\ufffb\011\ufffb\015\ufffb" +
    "\021\ufffb\024\ufffb\025\ufffb\026\ufffb\030\ufffb\031\ufffb\042" +
    "\ufffb\074\ufffb\075\ufffb\112\ufffb\116\ufffb\120\ufffb\123\ufffb" +
    "\124\ufffb\125\ufffb\126\ufffb\127\ufffb\130\ufffb\131\ufffb\001" +
    "\002\000\022\010\006\011\137\015\020\021\017\025\015" +
    "\026\010\031\016\042\013\001\002\000\004\113\uffd8\001" +
    "\002\000\004\002\001\001\002\000\022\002\uffe2\010\uffe2" +
    "\015\uffe2\021\uffe2\025\uffe2\026\uffe2\031\uffe2\042\uffe2\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\016\004\006\005\013\012\003\027\004\031" +
    "\010\046\011\001\001\000\002\001\001\000\014\004\006" +
    "\005\013\012\232\027\004\031\010\001\001\000\002\001" +
    "\001\000\014\004\006\005\013\012\231\027\004\031\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\135" +
    "\005\134\010\132\011\131\001\001\000\004\032\130\001" +
    "\001\000\012\016\036\017\040\021\035\022\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\064\001\001\000\002" +
    "\001\001\000\012\016\112\017\113\021\035\022\043\001" +
    "\001\000\012\016\036\017\044\021\035\022\043\001\001" +
    "\000\004\023\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\016\036\017\111\021\035\022\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\036\017" +
    "\106\021\035\022\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\064\001\001\000\012\016\036\017\110\021\035\022" +
    "\043\001\001\000\004\023\064\001\001\000\004\023\064" +
    "\001\001\000\002\001\001\000\004\023\064\001\001\000" +
    "\002\001\001\000\004\032\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\006\122\007\121\016\036\017" +
    "\123\021\035\022\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\127\007\121\016\036\017\123" +
    "\021\035\022\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\150\005\153\013\151\014" +
    "\145\015\160\016\036\017\152\021\035\022\043\030\147" +
    "\031\157\035\154\001\001\000\004\005\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\005\153" +
    "\013\201\015\160\016\036\017\152\021\035\022\043\030" +
    "\147\031\157\035\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\064\001\001\000\004\032\020\001" +
    "\001\000\026\005\153\013\176\015\160\016\036\017\152" +
    "\021\035\022\043\030\147\031\157\035\154\001\001\000" +
    "\026\005\153\013\175\015\160\016\036\017\152\021\035" +
    "\022\043\030\147\031\157\035\154\001\001\000\012\016" +
    "\036\017\172\021\035\022\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\005\153\013\163\015\160\016" +
    "\036\017\152\021\035\022\043\030\147\031\157\035\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\153\013\163\015\160\016\036\017\152\021\035\022\043" +
    "\030\147\031\157\035\154\001\001\000\002\001\001\000" +
    "\026\005\153\013\167\015\160\016\036\017\152\021\035" +
    "\022\043\030\147\031\157\035\154\001\001\000\002\001" +
    "\001\000\026\005\153\013\171\015\160\016\036\017\152" +
    "\021\035\022\043\030\147\031\157\035\154\001\001\000" +
    "\002\001\001\000\004\023\064\001\001\000\026\005\153" +
    "\013\174\015\160\016\036\017\152\021\035\022\043\030" +
    "\147\031\157\035\154\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\153\013\200\015" +
    "\160\016\036\017\152\021\035\022\043\030\147\031\157" +
    "\035\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\016\036\017\203\021\035\022\043\001\001\000\004" +
    "\023\064\001\001\000\030\005\153\013\151\014\205\015" +
    "\160\016\036\017\152\021\035\022\043\030\147\031\157" +
    "\035\154\001\001\000\032\005\153\013\151\014\211\015" +
    "\207\016\036\017\152\021\035\022\043\030\147\031\157" +
    "\035\154\036\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\153\013\151\014\212\015\213\016\036" +
    "\017\152\021\035\022\043\030\147\031\157\035\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\036" +
    "\017\222\021\035\022\043\001\001\000\004\023\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\134" +
    "\010\226\011\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }


    // Connect this parser to a scanner!
    CLexer s;

    public void setLexer(CLexer lexer) {
        this.s = lexer;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_declaration_1 ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // control_structure ::= control_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // control_structure ::= control_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // control_if ::= control_if_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // control_else ::= KW_ELSE gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // control_else ::= KW_ELSE instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // control_else ::= instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // control_else ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_atomic_literal_int OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_atomic_literal_int OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // control_switch_case ::= KW_CASE expression_atomic_literal_int OP_TERNARYOPERATIONDOUBLEDOT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // gramatic_body ::= gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // gramatic_body_0 ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body_0 OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // gramatic_body_0 ::= constant gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // gramatic_body_0 ::= OP_INSTRUCTIONENDOPERATOR gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // gramatic_body_0 ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // gramatic_body_0 ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gramatic_body_0 ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // gramatic_body_0 ::= control_if_else gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // gramatic_body_0 ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // gramatic_body_0 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body_0",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_0 OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variable ::= keyword_types variable_definition 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // variable_definition ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // variable_definition ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters_definition ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameter_definition ::= keyword_types IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter_definition ::= KW_CONST keyword_types IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_0 OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= expression_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression_0 ::= expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_0 ::= expression_unary_operator expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_0 ::= expression expression_binary_operators expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_0 ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_atomic ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression_atomic ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression_atomic ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression_atomic ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression_atomic ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression_atomic ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression_binary_operators ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression_binary_operators ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_binary_operators ::= OP_ORASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // keyword_types ::= KW_INT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // keyword_types ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // keyword_types ::= KW_LONG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // keyword_types ::= KW_SHORT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // keyword_types ::= KW_VOID 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // keyword_types ::= KW_FLOAT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // keyword_types ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
