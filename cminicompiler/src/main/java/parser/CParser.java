
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.LinkedList;
import lexer.CLexer;
import handler.Analyzer;
import model.Token;
import errors.SyntaxError;
import interpreter.*;
import itypes.*;
import iexpressions.*;
import model.*;
import ioperators.*;
import icontrolstructures.*;
import compiler.Compiler;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\276\000\002\002\004\000\002\051\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\064\004\000\002\064\004\000" +
    "\002\064\005\000\002\064\003\000\002\064\004\000\002" +
    "\064\004\000\002\064\004\000\002\004\007\000\002\004" +
    "\006\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\007\004\000\002\007\005\000\002\003\005\000" +
    "\002\003\004\000\002\055\007\000\002\055\007\000\002" +
    "\055\007\000\002\055\010\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\010" +
    "\000\002\037\007\000\002\037\007\000\002\040\004\000" +
    "\002\040\004\000\002\052\010\000\002\052\010\000\002" +
    "\052\010\000\002\052\006\000\002\052\011\000\002\041" +
    "\007\000\002\042\006\000\002\042\006\000\002\042\006" +
    "\000\002\042\005\000\002\042\003\000\002\060\005\000" +
    "\002\060\006\000\002\060\007\000\002\043\011\000\002" +
    "\043\003\000\002\044\006\000\002\044\006\000\002\044" +
    "\003\000\002\053\011\000\002\053\011\000\002\053\011" +
    "\000\002\053\007\000\002\045\013\000\002\045\003\000" +
    "\002\054\013\000\002\054\013\000\002\054\013\000\002" +
    "\054\013\000\002\054\013\000\002\054\013\000\002\046" +
    "\003\000\002\046\005\000\002\046\003\000\002\046\002" +
    "\000\002\047\005\000\002\047\003\000\002\047\002\000" +
    "\002\016\005\000\002\016\004\000\002\016\004\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\004\000\002\016\006\000\002\016\005\000\002\016\007" +
    "\000\002\016\005\000\002\016\006\000\002\016\004\000" +
    "\002\016\004\000\002\016\002\000\002\031\004\000\002" +
    "\034\010\000\002\061\007\000\002\061\010\000\002\061" +
    "\011\000\002\061\011\000\002\061\011\000\002\061\011" +
    "\000\002\061\011\000\002\032\004\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\033\007\000\002" +
    "\057\004\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\005\005\000\002\005\003\000\002\006\004" +
    "\000\002\006\007\000\002\062\002\000\002\062\005\000" +
    "\002\062\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\022\005\000\002\022\003\000\002\020" +
    "\003\000\002\020\004\000\002\020\004\000\002\020\005" +
    "\000\002\020\007\000\002\020\004\000\002\020\004\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\004\000\002\021\005\000\002\021\007\000\002\023" +
    "\003\000\002\023\006\000\002\023\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\027\003\000\002\027\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\030\005\000\002\030\006\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\060\002\ufffb\003\027\004\033\022\006\023" +
    "\021\024\044\025\015\026\040\027\013\030\045\033\012" +
    "\063\011\070\037\071\020\100\014\113\036\124\042\125" +
    "\043\126\031\127\010\130\026\131\007\132\034\001\002" +
    "\000\060\002\ufffb\003\027\004\033\022\006\023\021\024" +
    "\044\025\015\026\040\027\013\030\045\033\012\063\011" +
    "\070\037\071\020\100\014\113\036\124\042\125\043\126" +
    "\031\127\010\130\026\131\007\132\034\001\002\000\004" +
    "\002\000\001\002\000\010\003\uff4a\004\uff4a\121\uff4a\001" +
    "\002\000\204\003\uff74\004\uff74\011\uff74\012\uff74\013\uff74" +
    "\020\uff74\021\uff74\022\uff74\023\uff74\024\uff74\025\uff74\026" +
    "\uff74\027\uff74\030\uff74\032\uff74\033\uff74\045\uff74\046\uff74" +
    "\047\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054\uff74\055" +
    "\uff74\056\uff74\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74" +
    "\064\uff74\065\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072" +
    "\uff74\073\uff74\074\uff74\075\uff74\076\uff74\077\uff74\100\uff74" +
    "\101\uff74\102\uff74\103\uff74\104\uff74\105\uff74\106\uff74\107" +
    "\uff74\110\uff74\111\uff74\113\uff74\114\uff74\117\uff74\120\uff74" +
    "\121\uff74\124\uff74\125\uff74\126\uff74\127\uff74\130\uff74\131" +
    "\uff74\132\uff74\001\002\000\204\003\uff76\004\uff76\011\uff76" +
    "\012\uff76\013\uff76\020\uff76\021\uff76\022\uff76\023\uff76\024" +
    "\uff76\025\uff76\026\uff76\027\uff76\030\uff76\032\uff76\033\uff76" +
    "\045\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76\053" +
    "\uff76\054\uff76\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76" +
    "\062\uff76\063\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070" +
    "\uff76\071\uff76\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76" +
    "\077\uff76\100\uff76\101\uff76\102\uff76\103\uff76\104\uff76\105" +
    "\uff76\106\uff76\107\uff76\110\uff76\111\uff76\113\uff76\114\uff76" +
    "\117\uff76\120\uff76\121\uff76\124\uff76\125\uff76\126\uff76\127" +
    "\uff76\130\uff76\131\uff76\132\uff76\001\002\000\022\004\173" +
    "\124\042\125\043\126\031\127\010\130\026\131\007\132" +
    "\034\001\002\000\010\003\uff47\004\uff47\121\uff47\001\002" +
    "\000\010\003\uff44\004\uff44\121\uff44\001\002\000\022\004" +
    "\173\124\042\125\043\126\031\127\010\130\026\131\007" +
    "\132\034\001\002\000\010\003\uff49\004\uff49\121\uff49\001" +
    "\002\000\060\002\ufff7\003\ufff7\004\ufff7\022\ufff7\023\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\033\ufff7\063" +
    "\ufff7\070\ufff7\071\ufff7\100\ufff7\113\ufff7\124\ufff7\125\ufff7" +
    "\126\ufff7\127\ufff7\130\ufff7\131\ufff7\132\ufff7\001\002\000" +
    "\060\002\ufffb\003\027\004\033\022\006\023\021\024\044" +
    "\025\015\026\040\027\013\030\045\033\012\063\011\070" +
    "\037\071\020\100\014\113\036\124\042\125\043\126\031" +
    "\127\010\130\026\131\007\132\034\001\002\000\204\003" +
    "\uff69\004\uff69\011\uff69\012\uff69\013\uff69\020\uff69\021\uff69" +
    "\022\uff69\023\uff69\024\uff69\025\uff69\026\uff69\027\uff69\030" +
    "\uff69\032\uff69\033\uff69\045\uff69\046\uff69\047\uff69\050\uff69" +
    "\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056\uff69\057" +
    "\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69" +
    "\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073\uff69\074" +
    "\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101\uff69\102\uff69" +
    "\103\uff69\104\uff69\105\uff69\106\uff69\107\uff69\110\uff69\111" +
    "\uff69\113\uff69\114\uff69\117\uff69\120\uff69\121\uff69\124\uff69" +
    "\125\uff69\126\uff69\127\uff69\130\uff69\131\uff69\132\uff69\001" +
    "\002\000\020\022\006\024\044\025\015\026\040\027\013" +
    "\030\045\033\012\001\002\000\010\003\145\004\147\121" +
    "\144\001\002\000\004\121\143\001\002\000\204\003\uff8a" +
    "\004\uff8a\011\uff8a\012\uff8a\013\uff8a\020\uff8a\021\uff8a\022" +
    "\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\032\uff8a\033\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051" +
    "\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a" +
    "\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066" +
    "\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a" +
    "\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103" +
    "\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\111\uff8a" +
    "\113\uff8a\114\uff8a\117\uff8a\120\uff8a\121\uff8a\124\uff8a\125" +
    "\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a\132\uff8a\001\002" +
    "\000\102\046\104\047\071\050\101\051\107\052\060\054" +
    "\076\055\066\056\070\057\102\060\114\061\064\062\103" +
    "\063\062\064\072\065\100\066\113\067\057\072\065\073" +
    "\075\074\067\075\061\076\112\077\073\101\056\102\105" +
    "\103\115\104\106\105\110\106\111\107\077\111\063\121" +
    "\uff8d\001\002\000\204\003\uff75\004\uff75\011\uff75\012\uff75" +
    "\013\uff75\020\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025" +
    "\uff75\026\uff75\027\uff75\030\uff75\032\uff75\033\uff75\045\uff75" +
    "\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054" +
    "\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75" +
    "\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070\uff75\071" +
    "\uff75\072\uff75\073\uff75\074\uff75\075\uff75\076\uff75\077\uff75" +
    "\100\uff75\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106" +
    "\uff75\107\uff75\110\uff75\111\uff75\113\uff75\114\uff75\117\uff75" +
    "\120\uff75\121\uff75\124\uff75\125\uff75\126\uff75\127\uff75\130" +
    "\uff75\131\uff75\132\uff75\001\002\000\010\117\141\120\142" +
    "\121\140\001\002\000\004\004\137\001\002\000\204\003" +
    "\uff77\004\uff77\011\uff77\012\uff77\013\uff77\020\uff77\021\uff77" +
    "\022\uff77\023\uff77\024\uff77\025\uff77\026\uff77\027\uff77\030" +
    "\uff77\032\uff77\033\uff77\045\uff77\046\uff77\047\uff77\050\uff77" +
    "\051\uff77\052\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057" +
    "\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77\065\uff77" +
    "\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073\uff77\074" +
    "\uff77\075\uff77\076\uff77\077\uff77\100\uff77\101\uff77\102\uff77" +
    "\103\uff77\104\uff77\105\uff77\106\uff77\107\uff77\110\uff77\111" +
    "\uff77\113\uff77\114\uff77\117\uff77\120\uff77\121\uff77\124\uff77" +
    "\125\uff77\126\uff77\127\uff77\130\uff77\131\uff77\132\uff77\001" +
    "\002\000\060\002\ufffb\003\027\004\033\022\006\023\021" +
    "\024\044\025\015\026\040\027\013\030\045\033\012\063" +
    "\011\070\037\071\020\100\014\113\036\124\042\125\043" +
    "\126\031\127\010\130\026\131\007\132\034\001\002\000" +
    "\200\003\uff7d\004\uff7d\011\uff7d\012\uff7d\013\uff7d\020\uff7d" +
    "\021\uff7d\022\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027" +
    "\uff7d\030\uff7d\032\uff7d\033\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\052\uff7d\054\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d" +
    "\066\uff7d\067\uff7d\070\037\071\020\072\uff7d\073\uff7d\074" +
    "\uff7d\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d" +
    "\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\111\134\113" +
    "\123\114\uff7d\117\uff7d\120\uff7d\121\uff7d\124\uff7d\125\uff7d" +
    "\126\uff7d\127\uff7d\130\uff7d\131\uff7d\132\uff7d\001\002\000" +
    "\204\003\uff79\004\uff79\011\uff79\012\uff79\013\uff79\020\uff79" +
    "\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027" +
    "\uff79\030\uff79\032\uff79\033\uff79\045\uff79\046\uff79\047\uff79" +
    "\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056" +
    "\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064\uff79" +
    "\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073" +
    "\uff79\074\uff79\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79" +
    "\102\uff79\103\uff79\104\uff79\105\uff79\106\uff79\107\uff79\110" +
    "\uff79\111\uff79\113\uff79\114\uff79\117\uff79\120\uff79\121\uff79" +
    "\124\uff79\125\uff79\126\uff79\127\uff79\130\uff79\131\uff79\132" +
    "\uff79\001\002\000\204\003\uff8b\004\uff8b\011\uff8b\012\uff8b" +
    "\013\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\025" +
    "\uff8b\026\uff8b\027\uff8b\030\uff8b\032\uff8b\033\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106" +
    "\uff8b\107\uff8b\110\uff8b\111\uff8b\113\uff8b\114\uff8b\117\uff8b" +
    "\120\uff8b\121\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130" +
    "\uff8b\131\uff8b\132\uff8b\001\002\000\034\004\053\063\011" +
    "\070\037\071\020\100\014\113\036\124\042\125\043\126" +
    "\031\127\010\130\026\131\007\132\034\001\002\000\204" +
    "\003\uff6a\004\uff6a\011\uff6a\012\uff6a\013\uff6a\020\uff6a\021" +
    "\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\027\uff6a" +
    "\030\uff6a\032\uff6a\033\uff6a\045\uff6a\046\uff6a\047\uff6a\050" +
    "\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055\uff6a\056\uff6a" +
    "\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065" +
    "\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a" +
    "\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a\101\uff6a\102" +
    "\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107\uff6a\110\uff6a" +
    "\111\uff6a\113\uff6a\114\uff6a\117\uff6a\120\uff6a\121\uff6a\124" +
    "\uff6a\125\uff6a\126\uff6a\127\uff6a\130\uff6a\131\uff6a\132\uff6a" +
    "\001\002\000\010\003\uff46\004\uff46\121\uff46\001\002\000" +
    "\004\121\052\001\002\000\204\003\uff7a\004\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\020\uff7a\021\uff7a\022\uff7a\023\uff7a\024" +
    "\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\032\uff7a\033\uff7a" +
    "\045\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052\uff7a\053" +
    "\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a\061\uff7a" +
    "\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067\uff7a\070" +
    "\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a\076\uff7a" +
    "\077\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105" +
    "\uff7a\106\uff7a\107\uff7a\110\uff7a\111\uff7a\113\uff7a\114\uff7a" +
    "\117\uff7a\120\uff7a\121\uff7a\124\uff7a\125\uff7a\126\uff7a\127" +
    "\uff7a\130\uff7a\131\uff7a\132\uff7a\001\002\000\204\003\uff78" +
    "\004\uff78\011\uff78\012\uff78\013\uff78\020\uff78\021\uff78\022" +
    "\uff78\023\uff78\024\uff78\025\uff78\026\uff78\027\uff78\030\uff78" +
    "\032\uff78\033\uff78\045\uff78\046\uff78\047\uff78\050\uff78\051" +
    "\uff78\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78" +
    "\060\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066" +
    "\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\074\uff78" +
    "\075\uff78\076\uff78\077\uff78\100\uff78\101\uff78\102\uff78\103" +
    "\uff78\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78\111\uff78" +
    "\113\uff78\114\uff78\117\uff78\120\uff78\121\uff78\124\uff78\125" +
    "\uff78\126\uff78\127\uff78\130\uff78\131\uff78\132\uff78\001\002" +
    "\000\010\003\uff45\004\uff45\121\uff45\001\002\000\010\003" +
    "\uff48\004\uff48\121\uff48\001\002\000\060\002\ufffb\003\027" +
    "\004\033\022\006\023\021\024\044\025\015\026\040\027" +
    "\013\030\045\033\012\063\011\070\037\071\020\100\014" +
    "\113\036\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\004\002\050\001\002\000\004" +
    "\002\001\001\002\000\004\002\ufffc\001\002\000\060\002" +
    "\uffa8\003\uffa8\004\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\033\uffa8\063\uffa8\070\uffa8\071" +
    "\uffa8\100\uffa8\113\uffa8\124\uffa8\125\uffa8\126\uffa8\127\uffa8" +
    "\130\uffa8\131\uffa8\132\uffa8\001\002\000\204\003\uff7d\004" +
    "\uff7d\011\uff7d\012\uff7d\013\uff7d\020\uff7d\021\uff7d\022\uff7d" +
    "\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d\032" +
    "\uff7d\033\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d" +
    "\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060" +
    "\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d" +
    "\067\uff7d\070\037\071\020\072\uff7d\073\uff7d\074\uff7d\075" +
    "\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d" +
    "\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\111\uff7d\113" +
    "\123\114\uff7d\117\uff7d\120\uff7d\121\uff7d\124\uff7d\125\uff7d" +
    "\126\uff7d\127\uff7d\130\uff7d\131\uff7d\132\uff7d\001\002\000" +
    "\102\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\072\uff8b\073\uff8b" +
    "\074\uff8b\075\uff8b\076\uff8b\077\uff8b\101\uff8b\102\uff8b\103" +
    "\uff8b\104\uff8b\105\uff8b\106\uff8b\107\uff8b\111\uff8b\114\122" +
    "\001\002\000\100\046\104\047\071\050\101\051\107\052" +
    "\060\054\076\055\066\056\070\057\102\060\114\061\064" +
    "\062\103\063\062\064\072\065\100\066\113\067\057\072" +
    "\065\073\075\074\067\075\061\076\112\077\073\101\056" +
    "\102\105\103\115\104\106\105\110\106\111\107\077\111" +
    "\063\001\002\000\034\004\uff50\063\uff50\070\uff50\071\uff50" +
    "\100\uff50\113\uff50\124\uff50\125\uff50\126\uff50\127\uff50\130" +
    "\uff50\131\uff50\132\uff50\001\002\000\034\004\uff51\063\uff51" +
    "\070\uff51\071\uff51\100\uff51\113\uff51\124\uff51\125\uff51\126" +
    "\uff51\127\uff51\130\uff51\131\uff51\132\uff51\001\002\000\034" +
    "\004\uff64\063\uff64\070\uff64\071\uff64\100\uff64\113\uff64\124" +
    "\uff64\125\uff64\126\uff64\127\uff64\130\uff64\131\uff64\132\uff64" +
    "\001\002\000\034\004\uff5a\063\uff5a\070\uff5a\071\uff5a\100" +
    "\uff5a\113\uff5a\124\uff5a\125\uff5a\126\uff5a\127\uff5a\130\uff5a" +
    "\131\uff5a\132\uff5a\001\002\000\034\004\uff5b\063\uff5b\070" +
    "\uff5b\071\uff5b\100\uff5b\113\uff5b\124\uff5b\125\uff5b\126\uff5b" +
    "\127\uff5b\130\uff5b\131\uff5b\132\uff5b\001\002\000\034\004" +
    "\uff55\063\uff55\070\uff55\071\uff55\100\uff55\113\uff55\124\uff55" +
    "\125\uff55\126\uff55\127\uff55\130\uff55\131\uff55\132\uff55\001" +
    "\002\000\034\004\uff5c\063\uff5c\070\uff5c\071\uff5c\100\uff5c" +
    "\113\uff5c\124\uff5c\125\uff5c\126\uff5c\127\uff5c\130\uff5c\131" +
    "\uff5c\132\uff5c\001\002\000\034\004\uff57\063\uff57\070\uff57" +
    "\071\uff57\100\uff57\113\uff57\124\uff57\125\uff57\126\uff57\127" +
    "\uff57\130\uff57\131\uff57\132\uff57\001\002\000\034\004\uff62" +
    "\063\uff62\070\uff62\071\uff62\100\uff62\113\uff62\124\uff62\125" +
    "\uff62\126\uff62\127\uff62\130\uff62\131\uff62\132\uff62\001\002" +
    "\000\034\004\uff5f\063\uff5f\070\uff5f\071\uff5f\100\uff5f\113" +
    "\uff5f\124\uff5f\125\uff5f\126\uff5f\127\uff5f\130\uff5f\131\uff5f" +
    "\132\uff5f\001\002\000\034\004\uff63\063\uff63\070\uff63\071" +
    "\uff63\100\uff63\113\uff63\124\uff63\125\uff63\126\uff63\127\uff63" +
    "\130\uff63\131\uff63\132\uff63\001\002\000\034\004\uff66\063" +
    "\uff66\070\uff66\071\uff66\100\uff66\113\uff66\124\uff66\125\uff66" +
    "\126\uff66\127\uff66\130\uff66\131\uff66\132\uff66\001\002\000" +
    "\034\004\uff54\063\uff54\070\uff54\071\uff54\100\uff54\113\uff54" +
    "\124\uff54\125\uff54\126\uff54\127\uff54\130\uff54\131\uff54\132" +
    "\uff54\001\002\000\034\004\uff59\063\uff59\070\uff59\071\uff59" +
    "\100\uff59\113\uff59\124\uff59\125\uff59\126\uff59\127\uff59\130" +
    "\uff59\131\uff59\132\uff59\001\002\000\034\004\053\063\011" +
    "\070\037\071\020\100\014\113\036\124\042\125\043\126" +
    "\031\127\010\130\026\131\007\132\034\001\002\000\034" +
    "\004\uff58\063\uff58\070\uff58\071\uff58\100\uff58\113\uff58\124" +
    "\uff58\125\uff58\126\uff58\127\uff58\130\uff58\131\uff58\132\uff58" +
    "\001\002\000\034\004\uff60\063\uff60\070\uff60\071\uff60\100" +
    "\uff60\113\uff60\124\uff60\125\uff60\126\uff60\127\uff60\130\uff60" +
    "\131\uff60\132\uff60\001\002\000\034\004\053\063\011\070" +
    "\037\071\020\100\014\113\036\124\042\125\043\126\031" +
    "\127\010\130\026\131\007\132\034\001\002\000\034\004" +
    "\uff53\063\uff53\070\uff53\071\uff53\100\uff53\113\uff53\124\uff53" +
    "\125\uff53\126\uff53\127\uff53\130\uff53\131\uff53\132\uff53\001" +
    "\002\000\034\004\uff68\063\uff68\070\uff68\071\uff68\100\uff68" +
    "\113\uff68\124\uff68\125\uff68\126\uff68\127\uff68\130\uff68\131" +
    "\uff68\132\uff68\001\002\000\034\004\uff61\063\uff61\070\uff61" +
    "\071\uff61\100\uff61\113\uff61\124\uff61\125\uff61\126\uff61\127" +
    "\uff61\130\uff61\131\uff61\132\uff61\001\002\000\034\004\uff5d" +
    "\063\uff5d\070\uff5d\071\uff5d\100\uff5d\113\uff5d\124\uff5d\125" +
    "\uff5d\126\uff5d\127\uff5d\130\uff5d\131\uff5d\132\uff5d\001\002" +
    "\000\034\004\uff67\063\uff67\070\uff67\071\uff67\100\uff67\113" +
    "\uff67\124\uff67\125\uff67\126\uff67\127\uff67\130\uff67\131\uff67" +
    "\132\uff67\001\002\000\034\004\uff4b\063\uff4b\070\uff4b\071" +
    "\uff4b\100\uff4b\113\uff4b\124\uff4b\125\uff4b\126\uff4b\127\uff4b" +
    "\130\uff4b\131\uff4b\132\uff4b\001\002\000\034\004\uff4c\063" +
    "\uff4c\070\uff4c\071\uff4c\100\uff4c\113\uff4c\124\uff4c\125\uff4c" +
    "\126\uff4c\127\uff4c\130\uff4c\131\uff4c\132\uff4c\001\002\000" +
    "\034\004\uff65\063\uff65\070\uff65\071\uff65\100\uff65\113\uff65" +
    "\124\uff65\125\uff65\126\uff65\127\uff65\130\uff65\131\uff65\132" +
    "\uff65\001\002\000\034\004\uff4f\063\uff4f\070\uff4f\071\uff4f" +
    "\100\uff4f\113\uff4f\124\uff4f\125\uff4f\126\uff4f\127\uff4f\130" +
    "\uff4f\131\uff4f\132\uff4f\001\002\000\034\004\uff4e\063\uff4e" +
    "\070\uff4e\071\uff4e\100\uff4e\113\uff4e\124\uff4e\125\uff4e\126" +
    "\uff4e\127\uff4e\130\uff4e\131\uff4e\132\uff4e\001\002\000\034" +
    "\004\uff56\063\uff56\070\uff56\071\uff56\100\uff56\113\uff56\124" +
    "\uff56\125\uff56\126\uff56\127\uff56\130\uff56\131\uff56\132\uff56" +
    "\001\002\000\034\004\uff52\063\uff52\070\uff52\071\uff52\100" +
    "\uff52\113\uff52\124\uff52\125\uff52\126\uff52\127\uff52\130\uff52" +
    "\131\uff52\132\uff52\001\002\000\034\004\uff5e\063\uff5e\070" +
    "\uff5e\071\uff5e\100\uff5e\113\uff5e\124\uff5e\125\uff5e\126\uff5e" +
    "\127\uff5e\130\uff5e\131\uff5e\132\uff5e\001\002\000\034\004" +
    "\uff4d\063\uff4d\070\uff4d\071\uff4d\100\uff4d\113\uff4d\124\uff4d" +
    "\125\uff4d\126\uff4d\127\uff4d\130\uff4d\131\uff4d\132\uff4d\001" +
    "\002\000\102\046\104\047\071\050\101\051\107\052\060" +
    "\054\076\055\066\056\070\057\102\060\114\061\064\062" +
    "\103\063\062\064\072\065\100\066\113\067\057\072\065" +
    "\073\075\074\067\075\061\076\112\077\073\101\056\102" +
    "\105\103\115\104\106\105\110\106\111\107\077\110\117" +
    "\111\063\001\002\000\034\004\053\063\011\070\037\071" +
    "\020\100\014\113\036\124\042\125\043\126\031\127\010" +
    "\130\026\131\007\132\034\001\002\000\204\003\uff86\004" +
    "\uff86\011\uff86\012\uff86\013\uff86\020\uff86\021\uff86\022\uff86" +
    "\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\032" +
    "\uff86\033\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86" +
    "\052\uff86\053\uff86\054\076\055\066\056\070\057\102\060" +
    "\114\061\064\062\103\063\062\064\072\065\100\066\113" +
    "\067\057\070\uff86\071\uff86\072\065\073\075\074\067\075" +
    "\061\076\112\077\073\100\uff86\101\056\102\105\103\115" +
    "\104\106\105\110\106\111\107\uff86\110\uff86\111\063\113" +
    "\uff86\114\uff86\117\uff86\120\uff86\121\uff86\124\uff86\125\uff86" +
    "\126\uff86\127\uff86\130\uff86\131\uff86\132\uff86\001\002\000" +
    "\204\003\uff87\004\uff87\011\uff87\012\uff87\013\uff87\020\uff87" +
    "\021\uff87\022\uff87\023\uff87\024\uff87\025\uff87\026\uff87\027" +
    "\uff87\030\uff87\032\uff87\033\uff87\045\uff87\046\104\047\071" +
    "\050\101\051\107\052\060\053\uff87\054\076\055\066\056" +
    "\070\057\102\060\114\061\064\062\103\063\062\064\072" +
    "\065\100\066\113\067\057\070\uff87\071\uff87\072\065\073" +
    "\075\074\067\075\061\076\112\077\073\100\uff87\101\056" +
    "\102\105\103\115\104\106\105\110\106\111\107\077\110" +
    "\uff87\111\063\113\uff87\114\uff87\117\uff87\120\uff87\121\uff87" +
    "\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87\132" +
    "\uff87\001\002\000\204\003\uff8c\004\uff8c\011\uff8c\012\uff8c" +
    "\013\uff8c\020\uff8c\021\uff8c\022\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\027\uff8c\030\uff8c\032\uff8c\033\uff8c\045\uff8c" +
    "\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054" +
    "\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c\062\uff8c" +
    "\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070\uff8c\071" +
    "\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c" +
    "\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c\106" +
    "\uff8c\107\uff8c\110\uff8c\111\uff8c\113\uff8c\114\uff8c\117\uff8c" +
    "\120\uff8c\121\uff8c\124\uff8c\125\uff8c\126\uff8c\127\uff8c\130" +
    "\uff8c\131\uff8c\132\uff8c\001\002\000\036\004\053\063\011" +
    "\070\037\071\020\100\014\113\036\114\130\124\042\125" +
    "\043\126\031\127\010\130\026\131\007\132\034\001\002" +
    "\000\204\003\uff88\004\uff88\011\uff88\012\uff88\013\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\024\uff88\025\uff88\026\uff88" +
    "\027\uff88\030\uff88\032\uff88\033\uff88\045\uff88\046\uff88\047" +
    "\uff88\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88" +
    "\056\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063\uff88\064" +
    "\uff88\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\075\uff88\076\uff88\077\uff88\100\uff88\101" +
    "\uff88\102\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88" +
    "\110\uff88\111\uff88\113\uff88\114\uff88\117\uff88\120\uff88\121" +
    "\uff88\124\uff88\125\uff88\126\uff88\127\uff88\130\uff88\131\uff88" +
    "\132\uff88\001\002\000\006\053\132\114\uff98\001\002\000" +
    "\004\114\131\001\002\000\104\046\104\047\071\050\101" +
    "\051\107\052\060\053\uff97\054\076\055\066\056\070\057" +
    "\102\060\114\061\064\062\103\063\062\064\072\065\100" +
    "\066\113\067\057\072\065\073\075\074\067\075\061\076" +
    "\112\077\073\101\056\102\105\103\115\104\106\105\110" +
    "\106\111\107\077\111\063\114\uff97\001\002\000\204\003" +
    "\uff7b\004\uff7b\011\uff7b\012\uff7b\013\uff7b\020\uff7b\021\uff7b" +
    "\022\uff7b\023\uff7b\024\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\032\uff7b\033\uff7b\045\uff7b\046\uff7b\047\uff7b\050\uff7b" +
    "\051\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\057" +
    "\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064\uff7b\065\uff7b" +
    "\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b\074" +
    "\uff7b\075\uff7b\076\uff7b\077\uff7b\100\uff7b\101\uff7b\102\uff7b" +
    "\103\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b\110\uff7b\111" +
    "\uff7b\113\uff7b\114\uff7b\117\uff7b\120\uff7b\121\uff7b\124\uff7b" +
    "\125\uff7b\126\uff7b\127\uff7b\130\uff7b\131\uff7b\132\uff7b\001" +
    "\002\000\204\003\uff7c\004\uff7c\011\uff7c\012\uff7c\013\uff7c" +
    "\020\uff7c\021\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026" +
    "\uff7c\027\uff7c\030\uff7c\032\uff7c\033\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072" +
    "\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c" +
    "\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107" +
    "\uff7c\110\uff7c\111\uff7c\113\uff7c\114\uff7c\117\uff7c\120\uff7c" +
    "\121\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c\130\uff7c\131" +
    "\uff7c\132\uff7c\001\002\000\034\004\053\063\011\070\037" +
    "\071\020\100\014\113\036\124\042\125\043\126\031\127" +
    "\010\130\026\131\007\132\034\001\002\000\004\114\uff99" +
    "\001\002\000\034\004\053\063\011\070\037\071\020\100" +
    "\014\113\036\124\042\125\043\126\031\127\010\130\026" +
    "\131\007\132\034\001\002\000\172\004\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\025\uff8f\026\uff8f\027\uff8f\030\uff8f\032\uff8f\033\uff8f\045" +
    "\uff8f\046\104\047\071\050\101\051\107\052\060\054\076" +
    "\055\066\056\070\057\102\060\114\061\064\062\103\064" +
    "\072\065\100\066\113\067\057\070\uff8f\071\uff8f\072\065" +
    "\073\075\074\067\075\061\076\112\077\073\100\uff8f\101" +
    "\056\102\105\103\115\104\106\105\110\106\111\107\077" +
    "\111\063\113\uff8f\117\uff8f\120\uff8f\121\uff8f\124\uff8f\125" +
    "\uff8f\126\uff8f\127\uff8f\130\uff8f\131\uff8f\132\uff8f\001\002" +
    "\000\004\002\ufffd\001\002\000\204\003\uff89\004\uff89\011" +
    "\uff89\012\uff89\013\uff89\020\uff89\021\uff89\022\uff89\023\uff89" +
    "\024\uff89\025\uff89\026\uff89\027\uff89\030\uff89\032\uff89\033" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89" +
    "\053\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061" +
    "\uff89\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89" +
    "\070\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076" +
    "\uff89\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89" +
    "\105\uff89\106\uff89\107\uff89\110\uff89\111\uff89\113\uff89\114" +
    "\uff89\117\uff89\120\uff89\121\uff89\124\uff89\125\uff89\126\uff89" +
    "\127\uff89\130\uff89\131\uff89\132\uff89\001\002\000\060\002" +
    "\ufff6\003\ufff6\004\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\033\ufff6\063\ufff6\070\ufff6\071" +
    "\ufff6\100\ufff6\113\ufff6\124\ufff6\125\ufff6\126\ufff6\127\ufff6" +
    "\130\ufff6\131\ufff6\132\ufff6\001\002\000\060\002\ufff4\003" +
    "\ufff4\004\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\027\ufff4\030\ufff4\033\ufff4\063\ufff4\070\ufff4\071\ufff4\100" +
    "\ufff4\113\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4" +
    "\131\ufff4\132\ufff4\001\002\000\060\002\ufff5\003\ufff5\004" +
    "\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\033\ufff5\063\ufff5\070\ufff5\071\ufff5\100\ufff5\113" +
    "\ufff5\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5" +
    "\132\ufff5\001\002\000\060\002\ufff9\003\ufff9\004\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\033\ufff9\063\ufff9\070\ufff9\071\ufff9\100\ufff9\113\ufff9\124" +
    "\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\132\ufff9" +
    "\001\002\000\060\002\ufffa\003\ufffa\004\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\033\ufffa" +
    "\063\ufffa\070\ufffa\071\ufffa\100\ufffa\113\ufffa\124\ufffa\125" +
    "\ufffa\126\ufffa\127\ufffa\130\ufffa\131\ufffa\132\ufffa\001\002" +
    "\000\030\003\165\022\006\023\167\024\044\025\015\026" +
    "\040\027\013\030\045\033\012\114\162\121\375\001\002" +
    "\000\100\004\uff9f\011\uff9f\012\uff9f\013\uff9f\020\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\032\uff9f\033\uff9f\045\uff9f\063\uff9f\070\uff9f\071" +
    "\uff9f\100\uff9f\113\uff9f\117\uff9f\120\uff9f\121\uff9f\124\uff9f" +
    "\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f\132\uff9f\001" +
    "\002\000\012\053\151\111\152\113\150\121\uff9e\001\002" +
    "\000\026\003\165\022\006\023\167\024\044\025\015\026" +
    "\040\027\013\030\045\033\012\114\162\001\002\000\004" +
    "\004\156\001\002\000\034\004\053\063\011\070\037\071" +
    "\020\100\014\113\036\124\042\125\043\126\031\127\010" +
    "\130\026\131\007\132\034\001\002\000\174\004\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\020\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\032\uff9d\033" +
    "\uff9d\045\uff9d\046\104\047\071\050\101\051\107\052\060" +
    "\053\154\054\076\055\066\056\070\057\102\060\114\061" +
    "\064\062\103\064\072\065\100\066\113\067\057\070\uff9d" +
    "\071\uff9d\072\065\073\075\074\067\075\061\076\112\077" +
    "\073\100\uff9d\101\056\102\105\103\115\104\106\105\110" +
    "\106\111\107\077\111\063\113\uff9d\117\uff9d\120\uff9d\121" +
    "\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130\uff9d\131\uff9d" +
    "\132\uff9d\001\002\000\004\004\156\001\002\000\100\004" +
    "\uff9b\011\uff9b\012\uff9b\013\uff9b\020\uff9b\021\uff9b\022\uff9b" +
    "\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\032" +
    "\uff9b\033\uff9b\045\uff9b\063\uff9b\070\uff9b\071\uff9b\100\uff9b" +
    "\113\uff9b\117\uff9b\120\uff9b\121\uff9b\124\uff9b\125\uff9b\126" +
    "\uff9b\127\uff9b\130\uff9b\131\uff9b\132\uff9b\001\002\000\104" +
    "\004\uff9e\011\uff9e\012\uff9e\013\uff9e\020\uff9e\021\uff9e\022" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\030\uff9e" +
    "\032\uff9e\033\uff9e\045\uff9e\053\151\063\uff9e\070\uff9e\071" +
    "\uff9e\100\uff9e\111\152\113\uff9e\117\uff9e\120\uff9e\121\uff9e" +
    "\124\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\132" +
    "\uff9e\001\002\000\100\004\uff9c\011\uff9c\012\uff9c\013\uff9c" +
    "\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\026" +
    "\uff9c\027\uff9c\030\uff9c\032\uff9c\033\uff9c\045\uff9c\063\uff9c" +
    "\070\uff9c\071\uff9c\100\uff9c\113\uff9c\117\uff9c\120\uff9c\121" +
    "\uff9c\124\uff9c\125\uff9c\126\uff9c\127\uff9c\130\uff9c\131\uff9c" +
    "\132\uff9c\001\002\000\010\003\uff95\053\373\114\uff95\001" +
    "\002\000\100\004\uffef\011\uffef\012\uffef\013\uffef\020\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027" +
    "\uffef\030\uffef\032\uffef\033\uffef\045\uffef\063\uffef\070\uffef" +
    "\071\uffef\100\uffef\113\uffef\117\uffef\120\uffef\121\uffef\124" +
    "\uffef\125\uffef\126\uffef\127\uffef\130\uffef\131\uffef\132\uffef" +
    "\001\002\000\100\004\ufff0\011\ufff0\012\ufff0\013\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\032\ufff0\033\ufff0\045\ufff0\063\ufff0\070" +
    "\ufff0\071\ufff0\100\ufff0\113\ufff0\117\ufff0\120\ufff0\121\ufff0" +
    "\124\ufff0\125\ufff0\126\ufff0\127\ufff0\130\ufff0\131\ufff0\132" +
    "\ufff0\001\002\000\006\003\370\114\371\001\002\000\004" +
    "\004\367\001\002\000\004\114\366\001\002\000\100\004" +
    "\033\011\217\012\205\013\215\020\212\021\202\022\006" +
    "\023\200\024\044\025\015\026\040\027\013\030\045\032" +
    "\206\033\012\045\222\063\011\070\037\071\020\100\014" +
    "\113\036\117\203\120\uffa9\121\223\124\042\125\043\126" +
    "\031\127\010\130\026\131\007\132\034\001\002\000\020" +
    "\022\006\024\044\025\015\026\040\027\013\030\045\033" +
    "\012\001\002\000\004\004\171\001\002\000\004\111\172" +
    "\001\002\000\022\004\173\124\042\125\043\126\031\127" +
    "\010\130\026\131\007\132\034\001\002\000\204\003\uff7d" +
    "\004\uff7d\011\uff7d\012\uff7d\013\uff7d\020\uff7d\021\uff7d\022" +
    "\uff7d\023\uff7d\024\uff7d\025\uff7d\026\uff7d\027\uff7d\030\uff7d" +
    "\032\uff7d\033\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051" +
    "\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d" +
    "\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066" +
    "\uff7d\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d" +
    "\075\uff7d\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103" +
    "\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d\111\uff7d" +
    "\113\123\114\uff7d\117\uff7d\120\uff7d\121\uff7d\124\uff7d\125" +
    "\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d\132\uff7d\001\002" +
    "\000\010\003\uff93\053\uff93\114\uff93\001\002\000\100\004" +
    "\uffce\011\uffce\012\uffce\013\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032" +
    "\uffce\033\uffce\045\uffce\063\uffce\070\uffce\071\uffce\100\uffce" +
    "\113\uffce\117\uffce\120\uffce\121\uffce\124\uffce\125\uffce\126" +
    "\uffce\127\uffce\130\uffce\131\uffce\132\uffce\001\002\000\100" +
    "\004\uffe3\011\uffe3\012\uffe3\013\uffe3\020\uffe3\021\uffe3\022" +
    "\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\032\uffe3\033\uffe3\045\uffe3\063\uffe3\070\uffe3\071\uffe3\100" +
    "\uffe3\113\uffe3\117\uffe3\120\uffe3\121\uffe3\124\uffe3\125\uffe3" +
    "\126\uffe3\127\uffe3\130\uffe3\131\uffe3\132\uffe3\001\002\000" +
    "\100\004\uffe6\011\uffe6\012\uffe6\013\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\032\uffe6\033\uffe6\045\uffe6\063\uffe6\070\uffe6\071\uffe6" +
    "\100\uffe6\113\uffe6\117\uffe6\120\uffe6\121\uffe6\124\uffe6\125" +
    "\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\132\uffe6\001\002" +
    "\000\020\022\006\024\044\025\015\026\040\027\013\030" +
    "\045\033\012\001\002\000\004\004\156\001\002\000\004" +
    "\113\350\001\002\000\100\004\033\011\217\012\205\013" +
    "\215\020\212\021\202\022\006\023\200\024\044\025\015" +
    "\026\040\027\013\030\045\032\206\033\012\045\222\063" +
    "\011\070\037\071\020\100\014\113\036\117\224\120\uffa9" +
    "\121\223\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\004\121\306\001\002\000\100" +
    "\004\033\011\217\012\205\013\215\020\212\021\202\022" +
    "\006\023\200\024\044\025\015\026\040\027\013\030\045" +
    "\032\206\033\012\045\222\063\011\070\037\071\020\100" +
    "\014\113\036\117\224\120\uffa9\121\223\124\042\125\043" +
    "\126\031\127\010\130\026\131\007\132\034\001\002\000" +
    "\036\004\053\063\011\070\037\071\020\100\014\113\036" +
    "\121\341\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\176\003\311\004\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\020\uff8d\021\uff8d\022\uff8d\023\uff8d\024" +
    "\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\032\uff8d\033\uff8d" +
    "\045\uff8d\046\104\047\071\050\101\051\107\052\060\054" +
    "\076\055\066\056\070\057\102\060\114\061\064\062\103" +
    "\063\062\064\072\065\100\066\113\067\057\070\uff8d\071" +
    "\uff8d\072\065\073\075\074\067\075\061\076\112\077\073" +
    "\100\uff8d\101\056\102\105\103\115\104\106\105\110\106" +
    "\111\107\077\111\063\113\uff8d\117\uff8d\120\uff8d\121\310" +
    "\124\uff8d\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d\132" +
    "\uff8d\001\002\000\100\004\uffe5\011\uffe5\012\uffe5\013\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\032\uffe5\033\uffe5\045\uffe5\063\uffe5" +
    "\070\uffe5\071\uffe5\100\uffe5\113\uffe5\117\uffe5\120\uffe5\121" +
    "\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5" +
    "\132\uffe5\001\002\000\100\004\033\011\217\012\205\013" +
    "\215\020\212\021\202\022\006\023\200\024\044\025\015" +
    "\026\040\027\013\030\045\032\206\033\012\045\222\063" +
    "\011\070\037\071\020\100\014\113\036\117\224\120\uffa9" +
    "\121\223\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\006\003\277\113\276\001\002" +
    "\000\100\004\uffe4\011\uffe4\012\uffe4\013\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\032\uffe4\033\uffe4\045\uffe4\063\uffe4\070\uffe4\071" +
    "\uffe4\100\uffe4\113\uffe4\117\uffe4\120\uffe4\121\uffe4\124\uffe4" +
    "\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\132\uffe4\001" +
    "\002\000\100\004\033\011\217\012\205\013\215\020\212" +
    "\021\202\022\006\023\200\024\044\025\015\026\040\027" +
    "\013\030\045\032\206\033\012\045\222\063\011\070\037" +
    "\071\020\100\014\113\036\117\224\120\uffa9\121\223\124" +
    "\042\125\043\126\031\127\010\130\026\131\007\132\034" +
    "\001\002\000\100\004\033\011\217\012\205\013\215\020" +
    "\212\021\202\022\006\023\200\024\044\025\015\026\040" +
    "\027\013\030\045\032\206\033\012\045\222\063\011\070" +
    "\037\071\020\100\014\113\036\117\224\120\uffa9\121\223" +
    "\124\042\125\043\126\031\127\010\130\026\131\007\132" +
    "\034\001\002\000\100\004\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\027\uff8e\030\uff8e\032\uff8e\033\uff8e\045\uff8e\063\uff8e" +
    "\070\uff8e\071\uff8e\100\uff8e\113\uff8e\117\uff8e\120\uff8e\121" +
    "\272\124\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e\131\uff8e" +
    "\132\uff8e\001\002\000\004\003\270\001\002\000\060\002" +
    "\ufff3\003\ufff3\004\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\033\ufff3\063\ufff3\070\ufff3\071" +
    "\ufff3\100\ufff3\113\ufff3\124\ufff3\125\ufff3\126\ufff3\127\ufff3" +
    "\130\ufff3\131\ufff3\132\ufff3\001\002\000\004\120\267\001" +
    "\002\000\006\003\231\113\230\001\002\000\100\004\033" +
    "\011\217\012\205\013\215\020\212\021\202\022\006\023" +
    "\200\024\044\025\015\026\040\027\013\030\045\032\206" +
    "\033\012\045\222\063\011\070\037\071\020\100\014\113" +
    "\036\117\224\120\uffa9\121\223\124\042\125\043\126\031" +
    "\127\010\130\026\131\007\132\034\001\002\000\100\004" +
    "\033\011\217\012\205\013\215\020\212\021\202\022\006" +
    "\023\200\024\044\025\015\026\040\027\013\030\045\032" +
    "\206\033\012\045\222\063\011\070\037\071\020\100\014" +
    "\113\036\117\224\120\uffa9\121\223\124\042\125\043\126" +
    "\031\127\010\130\026\131\007\132\034\001\002\000\100" +
    "\004\uffb5\011\uffb5\012\uffb5\013\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\032\uffb5\033\uffb5\045\uffb5\063\uffb5\070\uffb5\071\uffb5\100" +
    "\uffb5\113\uffb5\117\uffb5\120\uffb5\121\uffb5\124\uffb5\125\uffb5" +
    "\126\uffb5\127\uffb5\130\uffb5\131\uffb5\132\uffb5\001\002\000" +
    "\004\120\227\001\002\000\100\004\uffb7\011\uffb7\012\uffb7" +
    "\013\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7\033\uffb7\045\uffb7" +
    "\063\uffb7\070\uffb7\071\uffb7\100\uffb7\113\uffb7\117\uffb7\120" +
    "\uffb7\121\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130\uffb7" +
    "\131\uffb7\132\uffb7\001\002\000\036\003\252\004\053\063" +
    "\011\070\037\071\020\100\014\113\036\124\042\125\043" +
    "\126\031\127\010\130\026\131\007\132\034\001\002\000" +
    "\036\004\053\063\011\070\037\071\020\100\014\113\036" +
    "\117\233\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\102\046\104\047\071\050\101" +
    "\051\107\052\060\054\076\055\066\056\070\057\102\060" +
    "\114\061\064\062\103\063\062\064\072\065\100\066\113" +
    "\067\057\072\065\073\075\074\067\075\061\076\112\077" +
    "\073\101\056\102\105\103\115\104\106\105\110\106\111" +
    "\107\077\111\063\114\245\001\002\000\100\004\033\011" +
    "\217\012\205\013\215\020\212\021\202\022\006\023\200" +
    "\024\044\025\015\026\040\027\013\030\045\032\206\033" +
    "\012\045\222\063\011\070\037\071\020\100\014\113\036" +
    "\117\224\120\uffa9\121\223\124\042\125\043\126\031\127" +
    "\010\130\026\131\007\132\034\001\002\000\004\120\244" +
    "\001\002\000\010\012\237\013\236\120\uffcb\001\002\000" +
    "\004\121\242\001\002\000\004\121\240\001\002\000\100" +
    "\004\033\011\217\012\205\013\215\020\212\021\202\022" +
    "\006\023\200\024\044\025\015\026\040\027\013\030\045" +
    "\032\206\033\012\045\222\063\011\070\037\071\020\100" +
    "\014\113\036\117\224\120\uffa9\121\223\124\042\125\043" +
    "\126\031\127\010\130\026\131\007\132\034\001\002\000" +
    "\004\120\uffcc\001\002\000\100\004\033\011\217\012\205" +
    "\013\215\020\212\021\202\022\006\023\200\024\044\025" +
    "\015\026\040\027\013\030\045\032\206\033\012\045\222" +
    "\063\011\070\037\071\020\100\014\113\036\117\224\120" +
    "\uffa9\121\223\124\042\125\043\126\031\127\010\130\026" +
    "\131\007\132\034\001\002\000\004\120\uffcd\001\002\000" +
    "\100\004\uffc7\011\uffc7\012\uffc7\013\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\032\uffc7\033\uffc7\045\uffc7\063\uffc7\070\uffc7\071\uffc7" +
    "\100\uffc7\113\uffc7\117\uffc7\120\uffc7\121\uffc7\124\uffc7\125" +
    "\uffc7\126\uffc7\127\uffc7\130\uffc7\131\uffc7\132\uffc7\001\002" +
    "\000\004\117\246\001\002\000\100\004\033\011\217\012" +
    "\205\013\215\020\212\021\202\022\006\023\200\024\044" +
    "\025\015\026\040\027\013\030\045\032\206\033\012\045" +
    "\222\063\011\070\037\071\020\100\014\113\036\117\224" +
    "\120\uffa9\121\223\124\042\125\043\126\031\127\010\130" +
    "\026\131\007\132\034\001\002\000\004\120\250\001\002" +
    "\000\100\004\uffca\011\uffca\012\uffca\013\uffca\020\uffca\021" +
    "\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\030\uffca\032\uffca\033\uffca\045\uffca\063\uffca\070\uffca\071" +
    "\uffca\100\uffca\113\uffca\117\uffca\120\uffca\121\uffca\124\uffca" +
    "\125\uffca\126\uffca\127\uffca\130\uffca\131\uffca\132\uffca\001" +
    "\002\000\104\003\257\046\104\047\071\050\101\051\107" +
    "\052\060\054\076\055\066\056\070\057\102\060\114\061" +
    "\064\062\103\063\062\064\072\065\100\066\113\067\057" +
    "\072\065\073\075\074\067\075\061\076\112\077\073\101" +
    "\056\102\105\103\115\104\106\105\110\106\111\107\077" +
    "\111\063\114\260\001\002\000\004\114\253\001\002\000" +
    "\004\117\254\001\002\000\100\004\033\011\217\012\205" +
    "\013\215\020\212\021\202\022\006\023\200\024\044\025" +
    "\015\026\040\027\013\030\045\032\206\033\012\045\222" +
    "\063\011\070\037\071\020\100\014\113\036\117\224\120" +
    "\uffa9\121\223\124\042\125\043\126\031\127\010\130\026" +
    "\131\007\132\034\001\002\000\004\120\256\001\002\000" +
    "\100\004\uffc9\011\uffc9\012\uffc9\013\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\032\uffc9\033\uffc9\045\uffc9\063\uffc9\070\uffc9\071\uffc9" +
    "\100\uffc9\113\uffc9\117\uffc9\120\uffc9\121\uffc9\124\uffc9\125" +
    "\uffc9\126\uffc9\127\uffc9\130\uffc9\131\uffc9\132\uffc9\001\002" +
    "\000\004\117\264\001\002\000\004\117\261\001\002\000" +
    "\100\004\033\011\217\012\205\013\215\020\212\021\202" +
    "\022\006\023\200\024\044\025\015\026\040\027\013\030" +
    "\045\032\206\033\012\045\222\063\011\070\037\071\020" +
    "\100\014\113\036\117\224\120\uffa9\121\223\124\042\125" +
    "\043\126\031\127\010\130\026\131\007\132\034\001\002" +
    "\000\004\120\263\001\002\000\100\004\uffcf\011\uffcf\012" +
    "\uffcf\013\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\032\uffcf\033\uffcf\045" +
    "\uffcf\063\uffcf\070\uffcf\071\uffcf\100\uffcf\113\uffcf\117\uffcf" +
    "\120\uffcf\121\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130" +
    "\uffcf\131\uffcf\132\uffcf\001\002\000\100\004\033\011\217" +
    "\012\205\013\215\020\212\021\202\022\006\023\200\024" +
    "\044\025\015\026\040\027\013\030\045\032\206\033\012" +
    "\045\222\063\011\070\037\071\020\100\014\113\036\117" +
    "\224\120\uffa9\121\223\124\042\125\043\126\031\127\010" +
    "\130\026\131\007\132\034\001\002\000\004\120\266\001" +
    "\002\000\100\004\uffc8\011\uffc8\012\uffc8\013\uffc8\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\032\uffc8\033\uffc8\045\uffc8\063\uffc8\070\uffc8" +
    "\071\uffc8\100\uffc8\113\uffc8\117\uffc8\120\uffc8\121\uffc8\124" +
    "\uffc8\125\uffc8\126\uffc8\127\uffc8\130\uffc8\131\uffc8\132\uffc8" +
    "\001\002\000\060\002\uffeb\003\uffeb\004\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\033\uffeb" +
    "\063\uffeb\070\uffeb\071\uffeb\100\uffeb\113\uffeb\124\uffeb\125" +
    "\uffeb\126\uffeb\127\uffeb\130\uffeb\131\uffeb\132\uffeb\001\002" +
    "\000\100\004\033\011\217\012\205\013\215\020\212\021" +
    "\202\022\006\023\200\024\044\025\015\026\040\027\013" +
    "\030\045\032\206\033\012\045\222\063\011\070\037\071" +
    "\020\100\014\113\036\117\224\120\uffa9\121\223\124\042" +
    "\125\043\126\031\127\010\130\026\131\007\132\034\001" +
    "\002\000\100\004\uffad\011\uffad\012\uffad\013\uffad\020\uffad" +
    "\021\uffad\022\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\030\uffad\032\uffad\033\uffad\045\uffad\063\uffad\070\uffad" +
    "\071\uffad\100\uffad\113\uffad\117\uffad\120\uffad\121\uffad\124" +
    "\uffad\125\uffad\126\uffad\127\uffad\130\uffad\131\uffad\132\uffad" +
    "\001\002\000\100\004\033\011\217\012\205\013\215\020" +
    "\212\021\202\022\006\023\200\024\044\025\015\026\040" +
    "\027\013\030\045\032\206\033\012\045\222\063\011\070" +
    "\037\071\020\100\014\113\036\117\224\120\uffa9\121\223" +
    "\124\042\125\043\126\031\127\010\130\026\131\007\132" +
    "\034\001\002\000\100\004\uffb4\011\uffb4\012\uffb4\013\uffb4" +
    "\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026" +
    "\uffb4\027\uffb4\030\uffb4\032\uffb4\033\uffb4\045\uffb4\063\uffb4" +
    "\070\uffb4\071\uffb4\100\uffb4\113\uffb4\117\uffb4\120\uffb4\121" +
    "\uffb4\124\uffb4\125\uffb4\126\uffb4\127\uffb4\130\uffb4\131\uffb4" +
    "\132\uffb4\001\002\000\100\004\uffaa\011\uffaa\012\uffaa\013" +
    "\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\025\uffaa" +
    "\026\uffaa\027\uffaa\030\uffaa\032\uffaa\033\uffaa\045\uffaa\063" +
    "\uffaa\070\uffaa\071\uffaa\100\uffaa\113\uffaa\117\uffaa\120\uffaa" +
    "\121\uffaa\124\uffaa\125\uffaa\126\uffaa\127\uffaa\130\uffaa\131" +
    "\uffaa\132\uffaa\001\002\000\100\004\uffb1\011\uffb1\012\uffb1" +
    "\013\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1\025" +
    "\uffb1\026\uffb1\027\uffb1\030\uffb1\032\uffb1\033\uffb1\045\uffb1" +
    "\063\uffb1\070\uffb1\071\uffb1\100\uffb1\113\uffb1\117\uffb1\120" +
    "\uffb1\121\uffb1\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1" +
    "\131\uffb1\132\uffb1\001\002\000\036\003\321\004\053\063" +
    "\011\070\037\071\020\100\014\113\036\124\042\125\043" +
    "\126\031\127\010\130\026\131\007\132\034\001\002\000" +
    "\076\004\033\011\217\012\205\013\215\020\212\021\202" +
    "\022\006\023\200\024\044\025\015\026\040\027\013\030" +
    "\045\032\206\033\012\045\222\063\011\070\037\071\020" +
    "\100\014\113\036\117\224\121\223\124\042\125\043\126" +
    "\031\127\010\130\026\131\007\132\034\001\002\000\106" +
    "\003\311\046\104\047\071\050\101\051\107\052\060\054" +
    "\076\055\066\056\070\057\102\060\114\061\064\062\103" +
    "\063\062\064\072\065\100\066\113\067\057\072\065\073" +
    "\075\074\067\075\061\076\112\077\073\101\056\102\105" +
    "\103\115\104\106\105\110\106\111\107\077\111\063\114" +
    "\312\121\310\001\002\000\004\011\303\001\002\000\100" +
    "\004\uffda\011\uffda\012\uffda\013\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\032\uffda\033\uffda\045\uffda\063\uffda\070\uffda\071\uffda\100" +
    "\uffda\113\uffda\117\uffda\120\uffda\121\uffda\124\uffda\125\uffda" +
    "\126\uffda\127\uffda\130\uffda\131\uffda\132\uffda\001\002\000" +
    "\100\004\033\011\217\012\205\013\215\020\212\021\202" +
    "\022\006\023\200\024\044\025\015\026\040\027\013\030" +
    "\045\032\206\033\012\045\222\063\011\070\037\071\020" +
    "\100\014\113\036\117\224\120\uffa9\121\223\124\042\125" +
    "\043\126\031\127\010\130\026\131\007\132\034\001\002" +
    "\000\100\004\uffde\011\uffde\012\uffde\013\uffde\020\uffde\021" +
    "\uffde\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\030\uffde\032\uffde\033\uffde\045\uffde\063\uffde\070\uffde\071" +
    "\uffde\100\uffde\113\uffde\117\uffde\120\uffde\121\uffde\124\uffde" +
    "\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde\132\uffde\001" +
    "\002\000\100\004\uffdf\011\uffdf\012\uffdf\013\uffdf\020\uffdf" +
    "\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\032\uffdf\033\uffdf\045\uffdf\063\uffdf\070\uffdf" +
    "\071\uffdf\100\uffdf\113\uffdf\117\uffdf\120\uffdf\121\uffdf\124" +
    "\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\132\uffdf" +
    "\001\002\000\100\004\033\011\217\012\205\013\215\020" +
    "\212\021\202\022\006\023\200\024\044\025\015\026\040" +
    "\027\013\030\045\032\206\033\012\045\222\063\011\070" +
    "\037\071\020\100\014\113\036\117\224\120\uffa9\121\223" +
    "\124\042\125\043\126\031\127\010\130\026\131\007\132" +
    "\034\001\002\000\100\004\uffb2\011\uffb2\012\uffb2\013\uffb2" +
    "\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2\045\uffb2\063\uffb2" +
    "\070\uffb2\071\uffb2\100\uffb2\113\uffb2\117\uffb2\120\uffb2\121" +
    "\uffb2\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2" +
    "\132\uffb2\001\002\000\100\004\033\011\217\012\205\013" +
    "\215\020\212\021\202\022\006\023\200\024\044\025\015" +
    "\026\040\027\013\030\045\032\206\033\012\045\222\063" +
    "\011\070\037\071\020\100\014\113\036\117\224\120\uffa9" +
    "\121\223\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\004\121\315\001\002\000\076" +
    "\004\033\011\217\012\205\013\215\020\212\021\202\022" +
    "\006\023\200\024\044\025\015\026\040\027\013\030\045" +
    "\032\206\033\012\045\222\063\011\070\037\071\020\100" +
    "\014\113\036\117\224\121\223\124\042\125\043\126\031" +
    "\127\010\130\026\131\007\132\034\001\002\000\004\011" +
    "\303\001\002\000\100\004\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\032\uffdd\033\uffdd\045\uffdd\063\uffdd" +
    "\070\uffdd\071\uffdd\100\uffdd\113\uffdd\117\uffdd\120\uffdd\121" +
    "\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd" +
    "\132\uffdd\001\002\000\100\004\033\011\217\012\205\013" +
    "\215\020\212\021\202\022\006\023\200\024\044\025\015" +
    "\026\040\027\013\030\045\032\206\033\012\045\222\063" +
    "\011\070\037\071\020\100\014\113\036\117\224\120\uffa9" +
    "\121\223\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\100\004\uffac\011\uffac\012\uffac" +
    "\013\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\030\uffac\032\uffac\033\uffac\045\uffac" +
    "\063\uffac\070\uffac\071\uffac\100\uffac\113\uffac\117\uffac\120" +
    "\uffac\121\uffac\124\uffac\125\uffac\126\uffac\127\uffac\130\uffac" +
    "\131\uffac\132\uffac\001\002\000\100\004\uffb3\011\uffb3\012" +
    "\uffb3\013\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3" +
    "\025\uffb3\026\uffb3\027\uffb3\030\uffb3\032\uffb3\033\uffb3\045" +
    "\uffb3\063\uffb3\070\uffb3\071\uffb3\100\uffb3\113\uffb3\117\uffb3" +
    "\120\uffb3\121\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130" +
    "\uffb3\131\uffb3\132\uffb3\001\002\000\104\003\325\046\104" +
    "\047\071\050\101\051\107\052\060\054\076\055\066\056" +
    "\070\057\102\060\114\061\064\062\103\063\062\064\072" +
    "\065\100\066\113\067\057\072\065\073\075\074\067\075" +
    "\061\076\112\077\073\101\056\102\105\103\115\104\106" +
    "\105\110\106\111\107\077\111\063\114\326\001\002\000" +
    "\004\114\322\001\002\000\076\004\033\011\217\012\205" +
    "\013\215\020\212\021\202\022\006\023\200\024\044\025" +
    "\015\026\040\027\013\030\045\032\206\033\012\045\222" +
    "\063\011\070\037\071\020\100\014\113\036\117\224\121" +
    "\223\124\042\125\043\126\031\127\010\130\026\131\007" +
    "\132\034\001\002\000\004\011\303\001\002\000\100\004" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\032" +
    "\uffdc\033\uffdc\045\uffdc\063\uffdc\070\uffdc\071\uffdc\100\uffdc" +
    "\113\uffdc\117\uffdc\120\uffdc\121\uffdc\124\uffdc\125\uffdc\126" +
    "\uffdc\127\uffdc\130\uffdc\131\uffdc\132\uffdc\001\002\000\076" +
    "\004\033\011\217\012\205\013\215\020\212\021\202\022" +
    "\006\023\200\024\044\025\015\026\040\027\013\030\045" +
    "\032\206\033\012\045\222\063\011\070\037\071\020\100" +
    "\014\113\036\117\224\121\223\124\042\125\043\126\031" +
    "\127\010\130\026\131\007\132\034\001\002\000\102\003" +
    "\330\004\033\011\217\012\205\013\215\020\212\021\202" +
    "\022\006\023\200\024\044\025\015\026\040\027\013\030" +
    "\045\032\206\033\012\045\222\063\011\070\037\071\020" +
    "\100\014\113\036\117\224\120\uffa9\121\223\124\042\125" +
    "\043\126\031\127\010\130\026\131\007\132\034\001\002" +
    "\000\100\004\uffe1\011\uffe1\012\uffe1\013\uffe1\020\uffe1\021" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\032\uffe1\033\uffe1\045\uffe1\063\uffe1\070\uffe1\071" +
    "\uffe1\100\uffe1\113\uffe1\117\uffe1\120\uffe1\121\306\124\uffe1" +
    "\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\132\uffe1\001" +
    "\002\000\076\004\033\011\217\012\205\013\215\020\212" +
    "\021\202\022\006\023\200\024\044\025\015\026\040\027" +
    "\013\030\045\032\206\033\012\045\222\063\011\070\037" +
    "\071\020\100\014\113\036\117\224\121\223\124\042\125" +
    "\043\126\031\127\010\130\026\131\007\132\034\001\002" +
    "\000\100\004\uffe0\011\303\012\uffe0\013\uffe0\020\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\032\uffe0\033\uffe0\045\uffe0\063\uffe0\070\uffe0\071" +
    "\uffe0\100\uffe0\113\uffe0\117\uffe0\120\uffe0\121\uffe0\124\uffe0" +
    "\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\132\uffe0\001" +
    "\002\000\100\004\uffe2\011\uffe2\012\uffe2\013\uffe2\020\uffe2" +
    "\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\032\uffe2\033\uffe2\045\uffe2\063\uffe2\070\uffe2" +
    "\071\uffe2\100\uffe2\113\uffe2\117\uffe2\120\uffe2\121\uffe2\124" +
    "\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2\132\uffe2" +
    "\001\002\000\004\011\303\001\002\000\100\004\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\032\uffd9\033" +
    "\uffd9\045\uffd9\063\uffd9\070\uffd9\071\uffd9\100\uffd9\113\uffd9" +
    "\117\uffd9\120\uffd9\121\uffd9\124\uffd9\125\uffd9\126\uffd9\127" +
    "\uffd9\130\uffd9\131\uffd9\132\uffd9\001\002\000\004\011\303" +
    "\001\002\000\100\004\uffdb\011\uffdb\012\uffdb\013\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\032\uffdb\033\uffdb\045\uffdb\063\uffdb\070" +
    "\uffdb\071\uffdb\100\uffdb\113\uffdb\117\uffdb\120\uffdb\121\uffdb" +
    "\124\uffdb\125\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\132" +
    "\uffdb\001\002\000\100\004\uffb6\011\uffb6\012\uffb6\013\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\032\uffb6\033\uffb6\045\uffb6\063\uffb6" +
    "\070\uffb6\071\uffb6\100\uffb6\113\uffb6\117\uffb6\120\uffb6\121" +
    "\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6" +
    "\132\uffb6\001\002\000\102\046\104\047\071\050\101\051" +
    "\107\052\060\054\076\055\066\056\070\057\102\060\114" +
    "\061\064\062\103\063\062\064\072\065\100\066\113\067" +
    "\057\072\065\073\075\074\067\075\061\076\112\077\073" +
    "\101\056\102\105\103\115\104\106\105\110\106\111\107" +
    "\077\111\063\121\343\001\002\000\100\004\033\011\217" +
    "\012\205\013\215\020\212\021\202\022\006\023\200\024" +
    "\044\025\015\026\040\027\013\030\045\032\206\033\012" +
    "\045\222\063\011\070\037\071\020\100\014\113\036\117" +
    "\224\120\uffa9\121\223\124\042\125\043\126\031\127\010" +
    "\130\026\131\007\132\034\001\002\000\100\004\uffaf\011" +
    "\uffaf\012\uffaf\013\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf\032\uffaf\033" +
    "\uffaf\045\uffaf\063\uffaf\070\uffaf\071\uffaf\100\uffaf\113\uffaf" +
    "\117\uffaf\120\uffaf\121\uffaf\124\uffaf\125\uffaf\126\uffaf\127" +
    "\uffaf\130\uffaf\131\uffaf\132\uffaf\001\002\000\100\004\033" +
    "\011\217\012\205\013\215\020\212\021\202\022\006\023" +
    "\200\024\044\025\015\026\040\027\013\030\045\032\206" +
    "\033\012\045\222\063\011\070\037\071\020\100\014\113" +
    "\036\117\224\120\uffa9\121\223\124\042\125\043\126\031" +
    "\127\010\130\026\131\007\132\034\001\002\000\100\004" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\020\uffb0\021\uffb0\022\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\032" +
    "\uffb0\033\uffb0\045\uffb0\063\uffb0\070\uffb0\071\uffb0\100\uffb0" +
    "\113\uffb0\117\uffb0\120\uffb0\121\uffb0\124\uffb0\125\uffb0\126" +
    "\uffb0\127\uffb0\130\uffb0\131\uffb0\132\uffb0\001\002\000\100" +
    "\004\uffab\011\uffab\012\uffab\013\uffab\020\uffab\021\uffab\022" +
    "\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030\uffab" +
    "\032\uffab\033\uffab\045\uffab\063\uffab\070\uffab\071\uffab\100" +
    "\uffab\113\uffab\117\uffab\120\uffab\121\uffab\124\uffab\125\uffab" +
    "\126\uffab\127\uffab\130\uffab\131\uffab\132\uffab\001\002\000" +
    "\004\120\347\001\002\000\062\002\uffec\003\uffec\004\uffec" +
    "\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030" +
    "\uffec\033\uffec\063\uffec\070\uffec\071\uffec\100\uffec\113\uffec" +
    "\120\uffb7\124\uffec\125\uffec\126\uffec\127\uffec\130\uffec\131" +
    "\uffec\132\uffec\001\002\000\004\004\351\001\002\000\004" +
    "\114\352\001\002\000\100\004\033\011\217\012\205\013" +
    "\215\020\212\021\202\022\006\023\200\024\044\025\015" +
    "\026\040\027\013\030\045\032\206\033\012\045\222\063" +
    "\011\070\037\071\020\100\014\113\036\117\224\120\uffa9" +
    "\121\223\124\042\125\043\126\031\127\010\130\026\131" +
    "\007\132\034\001\002\000\100\004\uffae\011\uffae\012\uffae" +
    "\013\uffae\020\uffae\021\uffae\022\uffae\023\uffae\024\uffae\025" +
    "\uffae\026\uffae\027\uffae\030\uffae\032\uffae\033\uffae\045\uffae" +
    "\063\uffae\070\uffae\071\uffae\100\uffae\113\uffae\117\uffae\120" +
    "\uffae\121\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae" +
    "\131\uffae\132\uffae\001\002\000\004\004\355\001\002\000" +
    "\004\111\356\001\002\000\014\124\364\126\363\127\357" +
    "\131\361\132\360\001\002\000\004\121\uff6e\001\002\000" +
    "\004\121\uff70\001\002\000\004\121\uff6d\001\002\000\004" +
    "\121\365\001\002\000\004\121\uff6f\001\002\000\004\121" +
    "\uff71\001\002\000\104\002\uffa7\003\uffa7\004\uffa7\011\uffa7" +
    "\012\uffa7\013\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\032\uffa7\033\uffa7" +
    "\045\uffa7\063\uffa7\070\uffa7\071\uffa7\100\uffa7\113\uffa7\117" +
    "\uffa7\120\uffa7\121\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7" +
    "\130\uffa7\131\uffa7\132\uffa7\001\002\000\100\004\uffee\011" +
    "\uffee\012\uffee\013\uffee\020\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\032\uffee\033" +
    "\uffee\045\uffee\063\uffee\070\uffee\071\uffee\100\uffee\113\uffee" +
    "\117\uffee\120\uffee\121\uffee\124\uffee\125\uffee\126\uffee\127" +
    "\uffee\130\uffee\131\uffee\132\uffee\001\002\000\010\003\uff94" +
    "\053\uff94\114\uff94\001\002\000\004\114\372\001\002\000" +
    "\100\004\ufff1\011\ufff1\012\ufff1\013\ufff1\020\ufff1\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030" +
    "\ufff1\032\ufff1\033\ufff1\045\ufff1\063\ufff1\070\ufff1\071\ufff1" +
    "\100\ufff1\113\ufff1\117\ufff1\120\ufff1\121\ufff1\124\ufff1\125" +
    "\ufff1\126\ufff1\127\ufff1\130\ufff1\131\ufff1\132\ufff1\001\002" +
    "\000\100\004\uffed\011\uffed\012\uffed\013\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed" +
    "\030\uffed\032\uffed\033\uffed\045\uffed\063\uffed\070\uffed\071" +
    "\uffed\100\uffed\113\uffed\117\uffed\120\uffed\121\uffed\124\uffed" +
    "\125\uffed\126\uffed\127\uffed\130\uffed\131\uffed\132\uffed\001" +
    "\002\000\022\022\006\023\167\024\044\025\015\026\040" +
    "\027\013\030\045\033\012\001\002\000\006\003\uff96\114" +
    "\uff96\001\002\000\060\002\ufff8\003\ufff8\004\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\033" +
    "\ufff8\063\ufff8\070\ufff8\071\ufff8\100\ufff8\113\ufff8\124\ufff8" +
    "\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\132\ufff8\001" +
    "\002\000\100\004\033\011\217\012\205\013\215\020\212" +
    "\021\202\022\006\023\200\024\044\025\015\026\040\027" +
    "\013\030\045\032\206\033\012\045\222\063\011\070\037" +
    "\071\020\100\014\113\036\117\203\120\uffa9\121\223\124" +
    "\042\125\043\126\031\127\010\130\026\131\007\132\034" +
    "\001\002\000\060\002\ufff2\003\ufff2\004\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\033\ufff2" +
    "\063\ufff2\070\ufff2\071\ufff2\100\ufff2\113\ufff2\124\ufff2\125" +
    "\ufff2\126\ufff2\127\ufff2\130\ufff2\131\ufff2\132\ufff2\001\002" +
    "\000\004\004\u0101\001\002\000\006\003\u0102\111\u0103\001" +
    "\002\000\004\121\u0115\001\002\000\016\003\u0107\124\u0109" +
    "\126\u0108\127\u0104\131\u0106\132\u0105\001\002\000\006\003" +
    "\u0113\121\uff6e\001\002\000\006\003\u0111\121\uff70\001\002" +
    "\000\006\003\u010f\121\uff6d\001\002\000\004\121\u010e\001" +
    "\002\000\006\003\u010c\121\uff6f\001\002\000\006\003\u010a" +
    "\121\uff71\001\002\000\004\121\u010b\001\002\000\060\002" +
    "\uffa4\003\uffa4\004\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\027\uffa4\030\uffa4\033\uffa4\063\uffa4\070\uffa4\071" +
    "\uffa4\100\uffa4\113\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4" +
    "\130\uffa4\131\uffa4\132\uffa4\001\002\000\004\121\u010d\001" +
    "\002\000\060\002\uffa2\003\uffa2\004\uffa2\022\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\033\uffa2\063" +
    "\uffa2\070\uffa2\071\uffa2\100\uffa2\113\uffa2\124\uffa2\125\uffa2" +
    "\126\uffa2\127\uffa2\130\uffa2\131\uffa2\132\uffa2\001\002\000" +
    "\060\002\uffa5\003\uffa5\004\uffa5\022\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\027\uffa5\030\uffa5\033\uffa5\063\uffa5\070" +
    "\uffa5\071\uffa5\100\uffa5\113\uffa5\124\uffa5\125\uffa5\126\uffa5" +
    "\127\uffa5\130\uffa5\131\uffa5\132\uffa5\001\002\000\004\121" +
    "\u0110\001\002\000\060\002\uffa0\003\uffa0\004\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\030\uffa0\033" +
    "\uffa0\063\uffa0\070\uffa0\071\uffa0\100\uffa0\113\uffa0\124\uffa0" +
    "\125\uffa0\126\uffa0\127\uffa0\130\uffa0\131\uffa0\132\uffa0\001" +
    "\002\000\004\121\u0112\001\002\000\060\002\uffa3\003\uffa3" +
    "\004\uffa3\022\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\033\uffa3\063\uffa3\070\uffa3\071\uffa3\100\uffa3" +
    "\113\uffa3\124\uffa3\125\uffa3\126\uffa3\127\uffa3\130\uffa3\131" +
    "\uffa3\132\uffa3\001\002\000\004\121\u0114\001\002\000\060" +
    "\002\uffa1\003\uffa1\004\uffa1\022\uffa1\023\uffa1\024\uffa1\025" +
    "\uffa1\026\uffa1\027\uffa1\030\uffa1\033\uffa1\063\uffa1\070\uffa1" +
    "\071\uffa1\100\uffa1\113\uffa1\124\uffa1\125\uffa1\126\uffa1\127" +
    "\uffa1\130\uffa1\131\uffa1\132\uffa1\001\002\000\060\002\uffa6" +
    "\003\uffa6\004\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\033\uffa6\063\uffa6\070\uffa6\071\uffa6" +
    "\100\uffa6\113\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130" +
    "\uffa6\131\uffa6\132\uffa6\001\002\000\004\002\uffff\001\002" +
    "\000\204\003\uff84\004\uff84\011\uff84\012\uff84\013\uff84\020" +
    "\uff84\021\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84" +
    "\027\uff84\030\uff84\032\uff84\033\uff84\045\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064" +
    "\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84" +
    "\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101" +
    "\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84" +
    "\110\uff84\111\uff84\113\uff84\114\uff84\117\uff84\120\uff84\121" +
    "\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84\131\uff84" +
    "\132\uff84\001\002\000\204\003\uff85\004\uff85\011\uff85\012" +
    "\uff85\013\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85" +
    "\025\uff85\026\uff85\027\uff85\030\uff85\032\uff85\033\uff85\045" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062" +
    "\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85" +
    "\071\uff85\072\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077" +
    "\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85\105\uff85" +
    "\106\uff85\107\uff85\110\uff85\111\uff85\113\uff85\114\uff85\117" +
    "\uff85\120\uff85\121\uff85\124\uff85\125\uff85\126\uff85\127\uff85" +
    "\130\uff85\131\uff85\132\uff85\001\002\000\004\002\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\036\004\016\014\021\015\004\017\022\020" +
    "\034\022\024\023\023\024\027\031\003\032\040\034\031" +
    "\051\046\061\015\064\045\001\001\000\034\004\016\014" +
    "\021\015\u0118\017\022\020\034\022\024\023\023\024\027" +
    "\031\003\032\040\034\031\061\015\064\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\u0117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\u0116\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\016\014\021\015\u0115\017" +
    "\022\020\034\022\024\023\023\024\027\031\003\032\040" +
    "\034\031\061\015\064\045\001\001\000\002\001\001\000" +
    "\004\014\377\001\001\000\004\033\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\016\014\021\015\135\017\022\020" +
    "\034\022\024\023\023\024\027\031\003\032\040\034\031" +
    "\061\015\064\045\001\001\000\004\024\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\053\022\054" +
    "\023\023\024\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\016\014" +
    "\021\015\050\017\022\020\034\022\024\023\023\024\027" +
    "\031\003\032\040\034\031\061\015\064\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\123\001\001\000\002\001\001\000" +
    "\004\025\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\034" +
    "\022\120\023\023\024\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\034\022\115\023\023\024\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\073\001\001\000" +
    "\012\020\034\022\117\023\023\024\027\001\001\000\004" +
    "\025\073\001\001\000\004\025\073\001\001\000\002\001" +
    "\001\000\016\012\125\013\124\020\034\022\126\023\023" +
    "\024\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\132\013\124\020\034\022" +
    "\126\023\023\024\027\001\001\000\002\001\001\000\012" +
    "\020\034\022\134\023\023\024\027\001\001\000\004\025" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\375\005\162\006\157" +
    "\007\160\014\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\165\005\162\006\157\007\160\014\163" +
    "\001\001\000\004\033\156\001\001\000\012\020\034\022" +
    "\152\023\023\024\027\001\001\000\004\025\073\001\001" +
    "\000\004\033\154\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\003\217\014\200\016\220\017\203" +
    "\020\034\022\206\023\023\024\027\032\215\034\210\035" +
    "\213\036\176\037\212\043\207\052\175\053\174\001\001" +
    "\000\004\014\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\353\001\001\000\004\033\145\001\001" +
    "\000\002\001\001\000\040\014\200\016\345\017\203\020" +
    "\034\022\206\023\023\024\027\032\215\034\210\035\213" +
    "\036\176\037\212\043\207\052\175\053\174\001\001\000" +
    "\002\001\001\000\040\014\200\016\344\017\203\020\034" +
    "\022\206\023\023\024\027\032\215\034\210\035\213\036" +
    "\176\037\212\043\207\052\175\053\174\001\001\000\012" +
    "\020\034\022\337\023\023\024\027\001\001\000\004\025" +
    "\073\001\001\000\002\001\001\000\040\014\200\016\336" +
    "\017\203\020\034\022\206\023\023\024\027\032\215\034" +
    "\210\035\213\036\176\037\212\043\207\052\175\053\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\200\016\274\017\203\020\034\022\206\023\023\024\027" +
    "\032\215\034\210\035\213\036\176\037\212\043\207\052" +
    "\175\053\174\001\001\000\040\014\200\016\273\017\203" +
    "\020\034\022\206\023\023\024\027\032\215\034\210\035" +
    "\213\036\176\037\212\043\207\052\175\053\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\014\200\016\224" +
    "\017\203\020\034\022\206\023\023\024\027\032\215\034" +
    "\210\035\213\036\176\037\212\043\207\052\175\053\174" +
    "\001\001\000\040\014\200\016\225\017\203\020\034\022" +
    "\206\023\023\024\027\032\215\034\210\035\213\036\176" +
    "\037\212\043\207\052\175\053\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\034" +
    "\022\250\023\023\024\027\001\001\000\012\020\034\022" +
    "\231\023\023\024\027\001\001\000\004\025\073\001\001" +
    "\000\042\014\200\016\234\017\203\020\034\022\206\023" +
    "\023\024\027\032\215\034\210\035\213\036\176\037\212" +
    "\043\207\044\233\052\175\053\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\042\014\200\016\234\017\203\020\034\022\206\023" +
    "\023\024\027\032\215\034\210\035\213\036\176\037\212" +
    "\043\207\044\240\052\175\053\174\001\001\000\002\001" +
    "\001\000\042\014\200\016\234\017\203\020\034\022\206" +
    "\023\023\024\027\032\215\034\210\035\213\036\176\037" +
    "\212\043\207\044\242\052\175\053\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\014" +
    "\200\016\234\017\203\020\034\022\206\023\023\024\027" +
    "\032\215\034\210\035\213\036\176\037\212\043\207\044" +
    "\246\052\175\053\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\200\016\234\017\203\020\034" +
    "\022\206\023\023\024\027\032\215\034\210\035\213\036" +
    "\176\037\212\043\207\044\254\052\175\053\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\014\200\016\234\017\203\020\034" +
    "\022\206\023\023\024\027\032\215\034\210\035\213\036" +
    "\176\037\212\043\207\044\261\052\175\053\174\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\014\200\016" +
    "\234\017\203\020\034\022\206\023\023\024\027\032\215" +
    "\034\210\035\213\036\176\037\212\043\207\044\264\052" +
    "\175\053\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\014\200\016\270\017\203\020" +
    "\034\022\206\023\023\024\027\032\215\034\210\035\213" +
    "\036\176\037\212\043\207\052\175\053\174\001\001\000" +
    "\002\001\001\000\040\014\200\016\272\017\203\020\034" +
    "\022\206\023\023\024\027\032\215\034\210\035\213\036" +
    "\176\037\212\043\207\052\175\053\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\034\022\317\023\023\024\027\001\001\000\040\014\200" +
    "\016\300\017\203\020\034\022\277\023\023\024\027\032" +
    "\215\034\210\035\213\036\176\037\212\043\207\052\175" +
    "\053\174\001\001\000\004\025\073\001\001\000\004\040" +
    "\301\001\001\000\002\001\001\000\040\014\200\016\304" +
    "\017\303\020\034\022\206\023\023\024\027\032\215\034" +
    "\210\035\213\036\176\037\212\043\207\052\175\053\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\014" +
    "\200\016\306\017\203\020\034\022\206\023\023\024\027" +
    "\032\215\034\210\035\213\036\176\037\212\043\207\052" +
    "\175\053\174\001\001\000\002\001\001\000\040\014\200" +
    "\016\316\017\203\020\034\022\206\023\023\024\027\032" +
    "\215\034\210\035\213\036\176\037\212\043\207\052\175" +
    "\053\174\001\001\000\002\001\001\000\040\014\200\016" +
    "\312\017\203\020\034\022\206\023\023\024\027\032\215" +
    "\034\210\035\213\036\176\037\212\043\207\052\175\053" +
    "\174\001\001\000\004\040\313\001\001\000\002\001\001" +
    "\000\040\014\200\016\315\017\203\020\034\022\206\023" +
    "\023\024\027\032\215\034\210\035\213\036\176\037\212" +
    "\043\207\052\175\053\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\073\001\001\000\002\001\001" +
    "\000\040\014\200\016\322\017\203\020\034\022\206\023" +
    "\023\024\027\032\215\034\210\035\213\036\176\037\212" +
    "\043\207\052\175\053\174\001\001\000\004\040\323\001" +
    "\001\000\002\001\001\000\040\014\200\016\334\017\203" +
    "\020\034\022\206\023\023\024\027\032\215\034\210\035" +
    "\213\036\176\037\212\043\207\052\175\053\174\001\001" +
    "\000\040\014\200\016\330\017\326\020\034\022\206\023" +
    "\023\024\027\032\215\034\210\035\213\036\176\037\212" +
    "\043\207\052\175\053\174\001\001\000\002\001\001\000" +
    "\040\014\200\016\332\017\203\020\034\022\206\023\023" +
    "\024\027\032\215\034\210\035\213\036\176\037\212\043" +
    "\207\052\175\053\174\001\001\000\004\040\331\001\001" +
    "\000\002\001\001\000\004\040\333\001\001\000\002\001" +
    "\001\000\004\040\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\073\001\001\000\040\014\200\016" +
    "\341\017\203\020\034\022\206\023\023\024\027\032\215" +
    "\034\210\035\213\036\176\037\212\043\207\052\175\053" +
    "\174\001\001\000\002\001\001\000\040\014\200\016\343" +
    "\017\203\020\034\022\206\023\023\024\027\032\215\034" +
    "\210\035\213\036\176\037\212\043\207\052\175\053\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\014\200\016\352\017\203\020\034\022\206\023" +
    "\023\024\027\032\215\034\210\035\213\036\176\037\212" +
    "\043\207\052\175\053\174\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\361\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\373" +
    "\006\157\014\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\003\376\014\200\016\220\017\203\020\034" +
    "\022\206\023\023\024\027\032\215\034\210\035\213\036" +
    "\176\037\212\043\207\052\175\053\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\361\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }



    public CLexer s;
    public Analyzer a;
    public Compiler cmp;

    public boolean globalMode = true;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message + " at line:" + s.getCurrentLine(), null));
        }
    }

    public void syntax_error(Symbol cur_token) {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ProgramDefinition start_val = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              ProgramDefinition RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      RESULT = pd;
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              ProgramDefinition RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		FunctionDefinition fd = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      cmp.putFunction(fd);
      pd.addFunction(fd);
      RESULT = pd;  
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              ProgramDefinition RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		GlobalVarDefinition g = (GlobalVarDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      pd.addGlobalVar(g);
      RESULT = pd;  
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= constant program_definition 
            {
              ProgramDefinition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      RESULT = pd;  
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_definition ::= error_program_definition program_definition 
            {
              ProgramDefinition RESULT =null;
		int e_p_dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int e_p_dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e_p_d = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      RESULT = pd;
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_definition ::= 
            {
              ProgramDefinition RESULT =null;
		
      RESULT = new ProgramDefinition();
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // error_program_definition ::= keyword_types OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int kw_typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int kw_typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ITypeToken kw_type = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Must give a name for a global variable", "Global variable", kw_type);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // error_program_definition ::= instruction OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		IInstruction instr = (IInstruction)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Instruction out of place", "Global variable", instr);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // error_program_definition ::= keyword_types error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // error_program_definition ::= error_constant 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // error_program_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISLEFT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              FunctionDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<ParamDefinition> params = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> body = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        FunctionDefinition function = new FunctionDefinition(kt, i, params, body);
        RESULT = function;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_declaration ::= keyword_types error function_declaration_0 function_declaration_1 
            {
              FunctionDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<ParamDefinition> params = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> body = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      parser.generateSyntaxError("Syntax error function declaration must give a name or missing parenthesis", "Function", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              LinkedList<ParamDefinition> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<ParamDefinition> pd = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        cmp.putParameters(pd);
        RESULT = pd; 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              LinkedList<ParamDefinition> RESULT =null;
		 
      globalMode = false;
      LinkedList<ParamDefinition> emptyParams = new LinkedList<>();
      RESULT = emptyParams;
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_declaration_0 ::= error_function_declaration_0 
            {
              LinkedList<ParamDefinition> RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // error_function_declaration_0 ::= error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error function declaration UNKNOWN TYPE 1", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration_0",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // error_function_declaration_0 ::= parameters_definition error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error function declaration some code in parameters", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration_0",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_declaration_1 ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        RESULT = gb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_declaration_1 ::= gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		
      parser.generateSyntaxError("Left parenthesis missing", "Fuction declaration", null);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // error_function_declaration ::= error IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		IdentifierToken fn = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Type function missing", "int, float,...", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // error_function_declaration ::= keyword_types error OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Function identifier missing", "getSalary", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // error_function_declaration ::= keyword_types IDENT error function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // error_function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Error parameters declaration", "int a, float b", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // control_structure ::= control_if 
            {
              IControlStructure RESULT =null;
		int cileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int ciright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IControlStructure ci = (IControlStructure)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        RESULT = ci;  
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // control_structure ::= control_while 
            {
              IControlStructure RESULT =null;
		int cwleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cwright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ControlStructureWhile cw = (ControlStructureWhile)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        RESULT = cw;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // control_if ::= control_if_else 
            {
              IControlStructure RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IControlStructure ife = (IControlStructure)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = ife; 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // control_if ::= error_if 
            {
              IControlStructure RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              IControlStructure RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int ifbodyleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ifbodyright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<IGramaticInstruction> ifbody = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int elsebodyleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int elsebodyright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> elsebody = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        
        ControlStructureIf ifcs = new ControlStructureIf(e, ifbody, elsebody);
        RESULT = ifcs;
      
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT instruction 
            {
              IControlStructure RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IInstruction ins = (IInstruction)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		   

        LinkedList<IGramaticInstruction> uniqueInstruction = new LinkedList<>();
        LinkedList<IGramaticInstruction> emptyElseBody = new LinkedList<>();
        uniqueInstruction.addLast(ins);
        ControlStructureIf ifcs = new ControlStructureIf(e, uniqueInstruction, emptyElseBody);
        RESULT = ifcs;
     
     
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              IControlStructure RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int ifbodyleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int ifbodyright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> ifbody = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		   
        LinkedList<IGramaticInstruction> emptyElseBody = new LinkedList<>();
        ControlStructureIf ifcs = new ControlStructureIf(e, ifbody, emptyElseBody);
        RESULT = ifcs;
     
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // control_else ::= KW_ELSE gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          RESULT = gb; 
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // control_else ::= KW_ELSE instruction 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IInstruction ins = (IInstruction)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        LinkedList<IGramaticInstruction> uniqueInstruction = new LinkedList<>();
        uniqueInstruction.addLast(ins);
        RESULT = uniqueInstruction;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // error_if ::= KW_IF error expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("IF: Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("IF: Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Right parenthesis missing", ")", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // error_if ::= KW_IF error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Some code between if and conditional expression", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT error gramatic_body control_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Syntax error, illegal code inside of the if", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // control_switch_case ::= OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // control_switch_case ::= KW_CASE expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // control_switch_case ::= KW_DEFAULT expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // control_switch_case ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // control_switch_case ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // error_switch ::= KW_SWITCH error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Switch: Left parenthesis missing", "(", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Switch: Numeric expresion expected", "expression", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Switch: Right parenthesis missing", ")", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // control_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              ControlStructureWhile RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int cwbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cwbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<IGramaticInstruction> cwb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          ControlStructureWhile cw = new ControlStructureWhile(e, cwb);
          RESULT = cw;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // control_while ::= error_while 
            {
              ControlStructureWhile RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // control_while_body ::= gramatic_body KW_BREAK OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int brleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int brright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		KeywordToken br = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int cwbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cwbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> cwb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        BreakInstruction breakIns = new BreakInstruction(br);
        cwb.addLast(breakIns);
        cwb.addAll(gb);
        RESULT = cwb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // control_while_body ::= gramatic_body KW_CONTINUE OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int cwbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cwbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> cwb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        ContinueInstruction conIns = new ContinueInstruction(c);
        cwb.addLast(conIns);
        cwb.addAll(gb);
        RESULT = cwb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // control_while_body ::= gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        RESULT = gb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // error_while ::= KW_WHILE error expression OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		
        parser.generateSyntaxError("While: Left parenthesis missing", "(", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		
        parser.generateSyntaxError("While: Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression error OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("While: Right parenthesis missing", ")", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // error_while ::= KW_WHILE error OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("While: Some code between while and conditional expression", "While", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // control_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // control_for ::= error_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // error_for ::= KW_FOR error control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-7)).value;
		 
        parser.generateSyntaxError("FOR: Left parenthesis missing", "(", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction error expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR error OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("FOR: Conditional expression missing", "a<b", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression error control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR error OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		 
        parser.generateSyntaxError("FOR: Incremental o decremental instruction expected", "a++", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR expression error gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        parser.generateSyntaxError("FOR: Right parenthesis missing", ")", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // control_for_instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // control_for_instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // control_for_instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // control_for_instruction ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // control_for_instruction1 ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // control_for_instruction1 ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // control_for_instruction1 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramatic_body ::= constant gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramatic_body ::= OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gramatic_body ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		VarDefinition var = (VarDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          gb.addLast(var);
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramatic_body ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IExpression exp = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
           gb.addLast(exp);
           RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramatic_body ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IInstruction ins = (IInstruction)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
           gb.addLast(ins);
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramatic_body ::= control_structure gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int csright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		IControlStructure cs = (IControlStructure)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          gb.addLast(cs);
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // gramatic_body ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      
        RESULT = gb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramatic_body ::= KW_RETURN OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      
        RESULT = gb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gramatic_body ::= KW_WRITE OP_WRAPPERPARENTHESISLEFT IDENT OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken id = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        WriteInstruction wr = new WriteInstruction(id);
        gb.addLast(wr);
        RESULT = gb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramatic_body ::= KW_ELSE error gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // gramatic_body ::= expression error OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		  
            parser.generateSyntaxError("Error in gramatic body at expression, unknown error", "Gramatic Body", e);
            RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramatic_body ::= KW_CONTINUE gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          parser.generateSyntaxError("Continue instruction out of place", "Function declaration", null);
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // gramatic_body ::= KW_BREAK gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          parser.generateSyntaxError("Break instruction out of place", "Function declaration", null);
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramatic_body ::= 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		
        LinkedList<IGramaticInstruction> gramaticBody = new LinkedList<>();
        RESULT = gramaticBody;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              GlobalVarDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		VarDefinition v = (VarDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        GlobalVarDefinition gvd = new GlobalVarDefinition(v);
        
        RESULT = gvd;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // error_constant ::= KW_CONST keyword_types IDENT error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be defined as literal", "=", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be asigned with literal", "literal", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_HEXVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_DECIMALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_CHARVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_OCTALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_EXPONENTIALDEF error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable ::= keyword_types variable_definition 
            {
              VarDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<AssignDefinition> vd = (LinkedList<AssignDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        VarDefinition gv = new VarDefinition(kt, vd);

        for (AssignDefinition ad : gv.getAssignments())
        {
          cmp.putVariable(ad, globalMode);
        }

        RESULT = gv;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable_definition ::= IDENT 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
        AssignDefinition ad = new AssignDefinition(i, null);
        //cmp.putVariable(ad, globalMode);
        LinkedList<AssignDefinition> adl = new LinkedList<>();
        adl.addLast(ad);
        RESULT = adl;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_definition ::= IDENT OP_ASIG expression 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          AssignDefinition ad = new AssignDefinition(i, e);
          //cmp.putVariable(ad, globalMode);
          LinkedList<AssignDefinition> adl = new LinkedList<>();
          adl.addLast(ad);
          RESULT = adl;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<AssignDefinition> vd = (LinkedList<AssignDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          AssignDefinition ad = new AssignDefinition(i, null);
          vd.addLast(ad); 
          //cmp.putVariable(ad, globalMode); 
          RESULT = vd; 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<AssignDefinition> vd = (LinkedList<AssignDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          AssignDefinition ad = new AssignDefinition(i, e);
          //cmp.putVariable(ad, globalMode); 
          vd.addLast(ad); 
          RESULT = vd; 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // error_variable_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_variable_definition",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameters ::= parameter OP_COMMA parameters 
            {
              LinkedList<IExpression> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IExpression p = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IExpression> params = (LinkedList<IExpression>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        params.addLast(p);
        RESULT = params;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameters ::= parameter 
            {
              LinkedList<IExpression> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression p = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        LinkedList<IExpression> params = new LinkedList<>();
        params.addLast(p);
        RESULT = params;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter ::= expression 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
        RESULT = e; 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              LinkedList<ParamDefinition> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		ParamDefinition pd = (ParamDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<ParamDefinition> params = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          globalMode = false;
          cmp.checkArg(pd, params);
          params.addLast(pd);
          
          RESULT = params;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameters_definition ::= parameter_definition 
            {
              LinkedList<ParamDefinition> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ParamDefinition pd = (ParamDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          globalMode = false;
          LinkedList<ParamDefinition> params = new LinkedList<>();
          params.addLast(pd);
          RESULT = params;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter_definition ::= keyword_types IDENT 
            {
              ParamDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IdentifierToken id = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          ParamDefinition pd = new ParamDefinition(kt, id);
          RESULT = pd;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic 
            {
              ParamDefinition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken id = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression ea = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          ConstTypeToken ctt = new ConstTypeToken(c, kt, ea);
          ParamDefinition pd = new ParamDefinition(ctt, id);

          RESULT = pd;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // error_parameter ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // error_parameter ::= KW_CONST error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Const params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // error_parameter ::= IDENT error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken id = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instruction ::= IDENT OP_ASIG expression 
            {
              IInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          DeclaredAssignDefinition dad = new DeclaredAssignDefinition(i, e);
          cmp.checkSimpleAssignment(dad);
          RESULT = dad;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instruction ::= variable 
            {
              IInstruction RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		VarDefinition var = (VarDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          RESULT = var;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instruction ::= expression 
            {
              IInstruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression exp = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          RESULT = exp;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_any_type OP_WRAPPERPARENTHESISRIGHT 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 RESULT = e; 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression_any_type 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_any_type ::= expression_atomic 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          RESULT = e; 
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_any_type ::= expression_unary_operator IDENT 
            {
              IExpression RESULT =null;
		int eupleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eupright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		UnaryOperator eup = (UnaryOperator)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          IdentifierExpression id = new IdentifierExpression(i);
          cmp.checkIdentificableExpression(id);
          UnaryExpression expUnary =  new UnaryExpression(eup, id, true);
          RESULT = expUnary;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_any_type ::= IDENT expression_unary_operator 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int eupleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eupright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		UnaryOperator eup = (UnaryOperator)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          IdentifierExpression id = new IdentifierExpression(i);
          cmp.checkIdentificableExpression(id);
          UnaryExpression expUnary =  new UnaryExpression(eup, id, false);
          RESULT = expUnary;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_any_type ::= expression expression_binary_operators expression 
            {
              IExpression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IExpression e1 = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		BinaryOperator op = (BinaryOperator)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e2 = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryExpression bexp = new BinaryExpression(e1, op, e2);
          cmp.checkBinaryExpression(bexp);
          RESULT = bexp;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_any_type ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_any_type ::= OP_NEGATION expression_atomic 
            {
              IExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          UnaryOperator uOperator = new UnaryOperator(o);
          BooleanUnaryExpression boolExpUnary =  new BooleanUnaryExpression(uOperator,e);
          RESULT = boolExpUnary;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_any_type ::= OP_NOT expression_atomic 
            {
              IExpression RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          UnaryOperator uOperator = new UnaryOperator(o);
          BooleanUnaryExpression boolExpUnary =  new BooleanUnaryExpression(uOperator,e);
          RESULT = boolExpUnary;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_numeric ::= IDENT 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression_numeric ::= expression_atomic_literal_int 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_numeric ::= expression_atomic_call_functions_anytype 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_numeric ::= expression_unary_operator expression_numeric 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_numeric ::= expression_numeric expression_binary_operators expression_numeric 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_numeric ::= expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_atomic ::= IDENT 
            {
              IExpression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          IdentifierExpression id = new IdentifierExpression(i);
          cmp.checkIdentificableExpression(id);
          cmp.storeExpression(id);
          RESULT = id;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              IExpression RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		IdentifierToken fn = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<IExpression> params = (LinkedList<IExpression>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          FunctionCallExpression fce = new FunctionCallExpression(fn, params);
          cmp.storeCall(fce);
          cmp.storeExpression(fce);
          RESULT = fce;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              IExpression RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken fn = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
          LinkedList<IExpression> emptyParams = new LinkedList<>();
          FunctionCallExpression fce = new FunctionCallExpression(fn, emptyParams);
          cmp.storeCall(fce);
          cmp.storeExpression(fce);
          RESULT = fce;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_atomic ::= LIT_HEXVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LiteralToken l = (LiteralToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          RESULT = new LiteralDecimalExpression(l); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_atomic ::= LIT_FLOATVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_atomic ::= LIT_CHARVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_atomic ::= LIT_OCTALVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression_atomic ::= LIT_STRINGDEF 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              UnaryOperator RESULT =null;
		int opmmaleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int opmmaright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken opmma = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          UnaryOperator uOperator = new UnaryOperator(opmma);
          RESULT = uOperator;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              UnaryOperator RESULT =null;
		int opppaleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oppparight = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken opppa = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          UnaryOperator uOperator = new UnaryOperator(opppa);
          RESULT = uOperator;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expression_binary_operators ::= OP_MINUS 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expression_binary_operators ::= OP_DIV 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expression_binary_operators ::= OP_PLUS 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expression_binary_operators ::= OP_MULT 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expression_binary_operators ::= OP_MOD 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expression_binary_operators ::= OP_LT 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expression_binary_operators ::= OP_LTE 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expression_binary_operators ::= OP_GT 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expression_binary_operators ::= OP_GTE 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expression_binary_operators ::= OP_ANDCOMP 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expression_binary_operators ::= OP_ORCOMP 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expression_binary_operators ::= OP_NEGATION 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expression_binary_operators ::= OP_AND 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expression_binary_operators ::= OP_OR 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expression_binary_operators ::= OP_XOR 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expression_binary_operators ::= OP_ASIG 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expression_binary_operators ::= OP_MODASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expression_binary_operators ::= OP_ORASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              BinaryOperator RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		OperatorToken o = (OperatorToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // keyword_types ::= KW_INT 
            {
              ITypeToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		KeywordToken i = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new IntTypeToken(i); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // keyword_types ::= KW_CHAR 
            {
              ITypeToken RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new IntTypeToken(c); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // keyword_types ::= KW_LONG 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // keyword_types ::= KW_SHORT 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // keyword_types ::= KW_VOID 
            {
              ITypeToken RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		KeywordToken v = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new VoidTypeToken(v); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // keyword_types ::= KW_FLOAT 
            {
              ITypeToken RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		KeywordToken f = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new FloatTypeToken(f); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // keyword_types ::= KW_DOUBLE 
            {
              ITypeToken RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		KeywordToken d = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new DoubleTypeToken(d); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
