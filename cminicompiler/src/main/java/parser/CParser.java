
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import java.util.LinkedList;
import lexer.CLexer;
import handler.Analyzer;
import model.Token;
import errors.SyntaxError;
import interpreter.*;
import itypes.*;
import iexpressions.*;
import model.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\276\000\002\002\004\000\002\051\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\004\000\002\015\004" +
    "\000\002\015\002\000\002\064\004\000\002\064\004\000" +
    "\002\064\005\000\002\064\003\000\002\064\004\000\002" +
    "\064\004\000\002\064\004\000\002\004\007\000\002\004" +
    "\006\000\002\002\004\000\002\002\003\000\002\002\003" +
    "\000\002\007\004\000\002\007\005\000\002\003\005\000" +
    "\002\003\004\000\002\003\004\000\002\055\007\000\002" +
    "\055\007\000\002\055\007\000\002\055\010\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\036\003\000\002\036\003\000\002\037\010\000" +
    "\002\040\004\000\002\040\004\000\002\040\003\000\002" +
    "\040\003\000\002\052\010\000\002\052\010\000\002\052" +
    "\010\000\002\052\006\000\002\052\011\000\002\041\007" +
    "\000\002\042\006\000\002\042\006\000\002\042\006\000" +
    "\002\042\005\000\002\042\003\000\002\060\005\000\002" +
    "\060\006\000\002\060\007\000\002\043\011\000\002\043" +
    "\003\000\002\044\006\000\002\044\006\000\002\044\003" +
    "\000\002\053\011\000\002\053\011\000\002\053\011\000" +
    "\002\053\007\000\002\045\013\000\002\045\003\000\002" +
    "\054\013\000\002\054\013\000\002\054\013\000\002\054" +
    "\013\000\002\054\013\000\002\054\013\000\002\046\003" +
    "\000\002\046\005\000\002\046\003\000\002\046\002\000" +
    "\002\047\005\000\002\047\003\000\002\047\002\000\002" +
    "\016\005\000\002\016\004\000\002\016\004\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\004" +
    "\000\002\016\006\000\002\016\005\000\002\016\005\000" +
    "\002\016\006\000\002\016\002\000\002\031\004\000\002" +
    "\034\010\000\002\061\007\000\002\061\010\000\002\061" +
    "\011\000\002\061\011\000\002\061\011\000\002\061\011" +
    "\000\002\061\011\000\002\032\004\000\002\033\003\000" +
    "\002\033\005\000\002\033\005\000\002\033\007\000\002" +
    "\057\004\000\002\012\005\000\002\012\003\000\002\013" +
    "\003\000\002\005\005\000\002\005\003\000\002\006\004" +
    "\000\002\006\007\000\002\062\002\000\002\062\005\000" +
    "\002\062\005\000\002\017\005\000\002\017\003\000\002" +
    "\017\003\000\002\022\005\000\002\022\003\000\002\020" +
    "\003\000\002\020\004\000\002\020\004\000\002\020\005" +
    "\000\002\020\007\000\002\020\004\000\002\020\004\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\004\000\002\021\005\000\002\021\007\000\002\023" +
    "\003\000\002\023\006\000\002\023\005\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\027\003\000\002\027\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\030\005\000\002\030\006\000\002\024\003\000" +
    "\002\024\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\060\002\ufffb\003\027\004\033\010\015\014" +
    "\013\020\044\024\006\025\021\026\045\031\012\042\040" +
    "\066\014\067\011\074\037\075\020\112\036\123\042\124" +
    "\043\125\031\126\010\127\026\130\007\131\034\001\002" +
    "\000\060\002\ufffb\003\027\004\033\010\015\014\013\020" +
    "\044\024\006\025\021\026\045\031\012\042\040\066\014" +
    "\067\011\074\037\075\020\112\036\123\042\124\043\125" +
    "\031\126\010\127\026\130\007\131\034\001\002\000\004" +
    "\002\000\001\002\000\010\003\uff4a\004\uff4a\120\uff4a\001" +
    "\002\000\206\003\uff74\004\uff74\006\uff74\010\uff74\011\uff74" +
    "\014\uff74\015\uff74\020\uff74\021\uff74\023\uff74\024\uff74\025" +
    "\uff74\026\uff74\030\uff74\031\uff74\036\uff74\042\uff74\044\uff74" +
    "\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74\053" +
    "\uff74\054\uff74\055\uff74\056\uff74\057\uff74\060\uff74\061\uff74" +
    "\062\uff74\063\uff74\064\uff74\065\uff74\066\uff74\067\uff74\070" +
    "\uff74\071\uff74\072\uff74\073\uff74\074\uff74\075\uff74\076\uff74" +
    "\077\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104\uff74\105" +
    "\uff74\106\uff74\107\uff74\110\uff74\112\uff74\113\uff74\116\uff74" +
    "\117\uff74\120\uff74\123\uff74\124\uff74\125\uff74\126\uff74\127" +
    "\uff74\130\uff74\131\uff74\001\002\000\206\003\uff76\004\uff76" +
    "\006\uff76\010\uff76\011\uff76\014\uff76\015\uff76\020\uff76\021" +
    "\uff76\023\uff76\024\uff76\025\uff76\026\uff76\030\uff76\031\uff76" +
    "\036\uff76\042\uff76\044\uff76\045\uff76\046\uff76\047\uff76\050" +
    "\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055\uff76\056\uff76" +
    "\057\uff76\060\uff76\061\uff76\062\uff76\063\uff76\064\uff76\065" +
    "\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073\uff76" +
    "\074\uff76\075\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102" +
    "\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76\110\uff76" +
    "\112\uff76\113\uff76\116\uff76\117\uff76\120\uff76\123\uff76\124" +
    "\uff76\125\uff76\126\uff76\127\uff76\130\uff76\131\uff76\001\002" +
    "\000\034\004\053\066\014\067\011\074\037\075\020\112" +
    "\036\123\042\124\043\125\031\126\010\127\026\130\007" +
    "\131\034\001\002\000\010\003\uff47\004\uff47\120\uff47\001" +
    "\002\000\010\003\uff44\004\uff44\120\uff44\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\043\125\031\126\010\127\026\130\007\131\034" +
    "\001\002\000\010\003\uff49\004\uff49\120\uff49\001\002\000" +
    "\060\002\ufff7\003\ufff7\004\ufff7\010\ufff7\014\ufff7\020\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\031\ufff7\042\ufff7\066\ufff7\067" +
    "\ufff7\074\ufff7\075\ufff7\112\ufff7\123\ufff7\124\ufff7\125\ufff7" +
    "\126\ufff7\127\ufff7\130\ufff7\131\ufff7\001\002\000\060\002" +
    "\ufffb\003\027\004\033\010\015\014\013\020\044\024\006" +
    "\025\021\026\045\031\012\042\040\066\014\067\011\074" +
    "\037\075\020\112\036\123\042\124\043\125\031\126\010" +
    "\127\026\130\007\131\034\001\002\000\206\003\uff69\004" +
    "\uff69\006\uff69\010\uff69\011\uff69\014\uff69\015\uff69\020\uff69" +
    "\021\uff69\023\uff69\024\uff69\025\uff69\026\uff69\030\uff69\031" +
    "\uff69\036\uff69\042\uff69\044\uff69\045\uff69\046\uff69\047\uff69" +
    "\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69\055\uff69\056" +
    "\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064\uff69" +
    "\065\uff69\066\uff69\067\uff69\070\uff69\071\uff69\072\uff69\073" +
    "\uff69\074\uff69\075\uff69\076\uff69\077\uff69\100\uff69\101\uff69" +
    "\102\uff69\103\uff69\104\uff69\105\uff69\106\uff69\107\uff69\110" +
    "\uff69\112\uff69\113\uff69\116\uff69\117\uff69\120\uff69\123\uff69" +
    "\124\uff69\125\uff69\126\uff69\127\uff69\130\uff69\131\uff69\001" +
    "\002\000\020\010\015\014\013\020\044\024\006\026\045" +
    "\031\012\042\040\001\002\000\010\003\145\004\147\120" +
    "\144\001\002\000\004\120\143\001\002\000\206\003\uff8a" +
    "\004\uff8a\006\uff8a\010\uff8a\011\uff8a\014\uff8a\015\uff8a\020" +
    "\uff8a\021\uff8a\023\uff8a\024\uff8a\025\uff8a\026\uff8a\030\uff8a" +
    "\031\uff8a\036\uff8a\042\uff8a\044\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a\063\uff8a\064" +
    "\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071\uff8a\072\uff8a" +
    "\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a\100\uff8a\101" +
    "\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a\107\uff8a" +
    "\110\uff8a\112\uff8a\113\uff8a\116\uff8a\117\uff8a\120\uff8a\123" +
    "\uff8a\124\uff8a\125\uff8a\126\uff8a\127\uff8a\130\uff8a\131\uff8a" +
    "\001\002\000\102\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\105\100\115" +
    "\101\106\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\120\uff8d\001\002\000\206\003\uff75\004\uff75\006\uff75" +
    "\010\uff75\011\uff75\014\uff75\015\uff75\020\uff75\021\uff75\023" +
    "\uff75\024\uff75\025\uff75\026\uff75\030\uff75\031\uff75\036\uff75" +
    "\042\uff75\044\uff75\045\uff75\046\uff75\047\uff75\050\uff75\051" +
    "\uff75\052\uff75\053\uff75\054\uff75\055\uff75\056\uff75\057\uff75" +
    "\060\uff75\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75\066" +
    "\uff75\067\uff75\070\uff75\071\uff75\072\uff75\073\uff75\074\uff75" +
    "\075\uff75\076\uff75\077\uff75\100\uff75\101\uff75\102\uff75\103" +
    "\uff75\104\uff75\105\uff75\106\uff75\107\uff75\110\uff75\112\uff75" +
    "\113\uff75\116\uff75\117\uff75\120\uff75\123\uff75\124\uff75\125" +
    "\uff75\126\uff75\127\uff75\130\uff75\131\uff75\001\002\000\010" +
    "\116\141\117\142\120\140\001\002\000\004\004\137\001" +
    "\002\000\206\003\uff77\004\uff77\006\uff77\010\uff77\011\uff77" +
    "\014\uff77\015\uff77\020\uff77\021\uff77\023\uff77\024\uff77\025" +
    "\uff77\026\uff77\030\uff77\031\uff77\036\uff77\042\uff77\044\uff77" +
    "\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053" +
    "\uff77\054\uff77\055\uff77\056\uff77\057\uff77\060\uff77\061\uff77" +
    "\062\uff77\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\070" +
    "\uff77\071\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77" +
    "\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77\105" +
    "\uff77\106\uff77\107\uff77\110\uff77\112\uff77\113\uff77\116\uff77" +
    "\117\uff77\120\uff77\123\uff77\124\uff77\125\uff77\126\uff77\127" +
    "\uff77\130\uff77\131\uff77\001\002\000\060\002\ufffb\003\027" +
    "\004\033\010\015\014\013\020\044\024\006\025\021\026" +
    "\045\031\012\042\040\066\014\067\011\074\037\075\020" +
    "\112\036\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\202\003\uff7d\004\uff7d\006\uff7d" +
    "\010\uff7d\011\uff7d\014\uff7d\015\uff7d\020\uff7d\021\uff7d\023" +
    "\uff7d\024\uff7d\025\uff7d\026\uff7d\030\uff7d\031\uff7d\036\uff7d" +
    "\042\uff7d\044\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051" +
    "\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d" +
    "\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067" +
    "\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\037\075\020" +
    "\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104" +
    "\uff7d\106\134\107\uff7d\110\uff7d\112\123\113\uff7d\116\uff7d" +
    "\117\uff7d\120\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d\127" +
    "\uff7d\130\uff7d\131\uff7d\001\002\000\206\003\uff79\004\uff79" +
    "\006\uff79\010\uff79\011\uff79\014\uff79\015\uff79\020\uff79\021" +
    "\uff79\023\uff79\024\uff79\025\uff79\026\uff79\030\uff79\031\uff79" +
    "\036\uff79\042\uff79\044\uff79\045\uff79\046\uff79\047\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79" +
    "\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064\uff79\065" +
    "\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072\uff79\073\uff79" +
    "\074\uff79\075\uff79\076\uff79\077\uff79\100\uff79\101\uff79\102" +
    "\uff79\103\uff79\104\uff79\105\uff79\106\uff79\107\uff79\110\uff79" +
    "\112\uff79\113\uff79\116\uff79\117\uff79\120\uff79\123\uff79\124" +
    "\uff79\125\uff79\126\uff79\127\uff79\130\uff79\131\uff79\001\002" +
    "\000\206\003\uff8b\004\uff8b\006\uff8b\010\uff8b\011\uff8b\014" +
    "\uff8b\015\uff8b\020\uff8b\021\uff8b\023\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\030\uff8b\031\uff8b\036\uff8b\042\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062" +
    "\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b" +
    "\071\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077" +
    "\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b" +
    "\106\uff8b\107\uff8b\110\uff8b\112\uff8b\113\uff8b\116\uff8b\117" +
    "\uff8b\120\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b" +
    "\130\uff8b\131\uff8b\001\002\000\034\004\053\066\014\067" +
    "\011\074\037\075\020\112\036\123\042\124\043\125\031" +
    "\126\010\127\026\130\007\131\034\001\002\000\206\003" +
    "\uff6a\004\uff6a\006\uff6a\010\uff6a\011\uff6a\014\uff6a\015\uff6a" +
    "\020\uff6a\021\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\030" +
    "\uff6a\031\uff6a\036\uff6a\042\uff6a\044\uff6a\045\uff6a\046\uff6a" +
    "\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a\055" +
    "\uff6a\056\uff6a\057\uff6a\060\uff6a\061\uff6a\062\uff6a\063\uff6a" +
    "\064\uff6a\065\uff6a\066\uff6a\067\uff6a\070\uff6a\071\uff6a\072" +
    "\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a\077\uff6a\100\uff6a" +
    "\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\107" +
    "\uff6a\110\uff6a\112\uff6a\113\uff6a\116\uff6a\117\uff6a\120\uff6a" +
    "\123\uff6a\124\uff6a\125\uff6a\126\uff6a\127\uff6a\130\uff6a\131" +
    "\uff6a\001\002\000\010\003\uff46\004\uff46\120\uff46\001\002" +
    "\000\004\120\052\001\002\000\206\003\uff7a\004\uff7a\006" +
    "\uff7a\010\uff7a\011\uff7a\014\uff7a\015\uff7a\020\uff7a\021\uff7a" +
    "\023\uff7a\024\uff7a\025\uff7a\026\uff7a\030\uff7a\031\uff7a\036" +
    "\uff7a\042\uff7a\044\uff7a\045\uff7a\046\uff7a\047\uff7a\050\uff7a" +
    "\051\uff7a\052\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057" +
    "\uff7a\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a" +
    "\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\074" +
    "\uff7a\075\uff7a\076\uff7a\077\uff7a\100\uff7a\101\uff7a\102\uff7a" +
    "\103\uff7a\104\uff7a\105\uff7a\106\uff7a\107\uff7a\110\uff7a\112" +
    "\uff7a\113\uff7a\116\uff7a\117\uff7a\120\uff7a\123\uff7a\124\uff7a" +
    "\125\uff7a\126\uff7a\127\uff7a\130\uff7a\131\uff7a\001\002\000" +
    "\206\003\uff78\004\uff78\006\uff78\010\uff78\011\uff78\014\uff78" +
    "\015\uff78\020\uff78\021\uff78\023\uff78\024\uff78\025\uff78\026" +
    "\uff78\030\uff78\031\uff78\036\uff78\042\uff78\044\uff78\045\uff78" +
    "\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054" +
    "\uff78\055\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78" +
    "\063\uff78\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071" +
    "\uff78\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78\077\uff78" +
    "\100\uff78\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106" +
    "\uff78\107\uff78\110\uff78\112\uff78\113\uff78\116\uff78\117\uff78" +
    "\120\uff78\123\uff78\124\uff78\125\uff78\126\uff78\127\uff78\130" +
    "\uff78\131\uff78\001\002\000\010\003\uff45\004\uff45\120\uff45" +
    "\001\002\000\010\003\uff48\004\uff48\120\uff48\001\002\000" +
    "\060\002\ufffb\003\027\004\033\010\015\014\013\020\044" +
    "\024\006\025\021\026\045\031\012\042\040\066\014\067" +
    "\011\074\037\075\020\112\036\123\042\124\043\125\031" +
    "\126\010\127\026\130\007\131\034\001\002\000\004\002" +
    "\050\001\002\000\004\002\001\001\002\000\004\002\ufffc" +
    "\001\002\000\060\002\uffa8\003\uffa8\004\uffa8\010\uffa8\014" +
    "\uffa8\020\uffa8\024\uffa8\025\uffa8\026\uffa8\031\uffa8\042\uffa8" +
    "\066\uffa8\067\uffa8\074\uffa8\075\uffa8\112\uffa8\123\uffa8\124" +
    "\uffa8\125\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8\001\002" +
    "\000\206\003\uff7d\004\uff7d\006\uff7d\010\uff7d\011\uff7d\014" +
    "\uff7d\015\uff7d\020\uff7d\021\uff7d\023\uff7d\024\uff7d\025\uff7d" +
    "\026\uff7d\030\uff7d\031\uff7d\036\uff7d\042\uff7d\044\uff7d\045" +
    "\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d" +
    "\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062" +
    "\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\073\uff7d\074\037\075\020\076\uff7d\077" +
    "\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d" +
    "\106\uff7d\107\uff7d\110\uff7d\112\123\113\uff7d\116\uff7d\117" +
    "\uff7d\120\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d\127\uff7d" +
    "\130\uff7d\131\uff7d\001\002\000\102\045\uff8b\046\uff8b\047" +
    "\uff8b\050\uff8b\051\uff8b\053\uff8b\054\uff8b\055\uff8b\056\uff8b" +
    "\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063\uff8b\064\uff8b\065" +
    "\uff8b\067\uff8b\070\uff8b\071\uff8b\072\uff8b\073\uff8b\076\uff8b" +
    "\077\uff8b\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\106" +
    "\uff8b\107\uff8b\110\uff8b\113\122\001\002\000\100\045\104" +
    "\046\071\047\101\050\107\051\060\053\076\054\066\055" +
    "\070\056\102\057\114\060\064\061\103\062\067\063\061" +
    "\064\112\065\073\067\062\070\072\071\100\072\113\073" +
    "\057\076\056\077\105\100\115\101\106\102\110\103\111" +
    "\104\077\106\063\107\065\110\075\001\002\000\034\004" +
    "\uff50\066\uff50\067\uff50\074\uff50\075\uff50\112\uff50\123\uff50" +
    "\124\uff50\125\uff50\126\uff50\127\uff50\130\uff50\131\uff50\001" +
    "\002\000\034\004\uff51\066\uff51\067\uff51\074\uff51\075\uff51" +
    "\112\uff51\123\uff51\124\uff51\125\uff51\126\uff51\127\uff51\130" +
    "\uff51\131\uff51\001\002\000\034\004\uff64\066\uff64\067\uff64" +
    "\074\uff64\075\uff64\112\uff64\123\uff64\124\uff64\125\uff64\126" +
    "\uff64\127\uff64\130\uff64\131\uff64\001\002\000\034\004\uff5a" +
    "\066\uff5a\067\uff5a\074\uff5a\075\uff5a\112\uff5a\123\uff5a\124" +
    "\uff5a\125\uff5a\126\uff5a\127\uff5a\130\uff5a\131\uff5a\001\002" +
    "\000\034\004\uff5b\066\uff5b\067\uff5b\074\uff5b\075\uff5b\112" +
    "\uff5b\123\uff5b\124\uff5b\125\uff5b\126\uff5b\127\uff5b\130\uff5b" +
    "\131\uff5b\001\002\000\034\004\uff55\066\uff55\067\uff55\074" +
    "\uff55\075\uff55\112\uff55\123\uff55\124\uff55\125\uff55\126\uff55" +
    "\127\uff55\130\uff55\131\uff55\001\002\000\034\004\uff5c\066" +
    "\uff5c\067\uff5c\074\uff5c\075\uff5c\112\uff5c\123\uff5c\124\uff5c" +
    "\125\uff5c\126\uff5c\127\uff5c\130\uff5c\131\uff5c\001\002\000" +
    "\034\004\uff57\066\uff57\067\uff57\074\uff57\075\uff57\112\uff57" +
    "\123\uff57\124\uff57\125\uff57\126\uff57\127\uff57\130\uff57\131" +
    "\uff57\001\002\000\034\004\uff62\066\uff62\067\uff62\074\uff62" +
    "\075\uff62\112\uff62\123\uff62\124\uff62\125\uff62\126\uff62\127" +
    "\uff62\130\uff62\131\uff62\001\002\000\034\004\uff5f\066\uff5f" +
    "\067\uff5f\074\uff5f\075\uff5f\112\uff5f\123\uff5f\124\uff5f\125" +
    "\uff5f\126\uff5f\127\uff5f\130\uff5f\131\uff5f\001\002\000\034" +
    "\004\uff63\066\uff63\067\uff63\074\uff63\075\uff63\112\uff63\123" +
    "\uff63\124\uff63\125\uff63\126\uff63\127\uff63\130\uff63\131\uff63" +
    "\001\002\000\034\004\uff66\066\uff66\067\uff66\074\uff66\075" +
    "\uff66\112\uff66\123\uff66\124\uff66\125\uff66\126\uff66\127\uff66" +
    "\130\uff66\131\uff66\001\002\000\034\004\uff54\066\uff54\067" +
    "\uff54\074\uff54\075\uff54\112\uff54\123\uff54\124\uff54\125\uff54" +
    "\126\uff54\127\uff54\130\uff54\131\uff54\001\002\000\034\004" +
    "\uff59\066\uff59\067\uff59\074\uff59\075\uff59\112\uff59\123\uff59" +
    "\124\uff59\125\uff59\126\uff59\127\uff59\130\uff59\131\uff59\001" +
    "\002\000\034\004\053\066\014\067\011\074\037\075\020" +
    "\112\036\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\034\004\uff58\066\uff58\067\uff58" +
    "\074\uff58\075\uff58\112\uff58\123\uff58\124\uff58\125\uff58\126" +
    "\uff58\127\uff58\130\uff58\131\uff58\001\002\000\034\004\uff60" +
    "\066\uff60\067\uff60\074\uff60\075\uff60\112\uff60\123\uff60\124" +
    "\uff60\125\uff60\126\uff60\127\uff60\130\uff60\131\uff60\001\002" +
    "\000\034\004\053\066\014\067\011\074\037\075\020\112" +
    "\036\123\042\124\043\125\031\126\010\127\026\130\007" +
    "\131\034\001\002\000\034\004\uff53\066\uff53\067\uff53\074" +
    "\uff53\075\uff53\112\uff53\123\uff53\124\uff53\125\uff53\126\uff53" +
    "\127\uff53\130\uff53\131\uff53\001\002\000\034\004\uff68\066" +
    "\uff68\067\uff68\074\uff68\075\uff68\112\uff68\123\uff68\124\uff68" +
    "\125\uff68\126\uff68\127\uff68\130\uff68\131\uff68\001\002\000" +
    "\034\004\uff61\066\uff61\067\uff61\074\uff61\075\uff61\112\uff61" +
    "\123\uff61\124\uff61\125\uff61\126\uff61\127\uff61\130\uff61\131" +
    "\uff61\001\002\000\034\004\uff5d\066\uff5d\067\uff5d\074\uff5d" +
    "\075\uff5d\112\uff5d\123\uff5d\124\uff5d\125\uff5d\126\uff5d\127" +
    "\uff5d\130\uff5d\131\uff5d\001\002\000\034\004\uff67\066\uff67" +
    "\067\uff67\074\uff67\075\uff67\112\uff67\123\uff67\124\uff67\125" +
    "\uff67\126\uff67\127\uff67\130\uff67\131\uff67\001\002\000\034" +
    "\004\uff4b\066\uff4b\067\uff4b\074\uff4b\075\uff4b\112\uff4b\123" +
    "\uff4b\124\uff4b\125\uff4b\126\uff4b\127\uff4b\130\uff4b\131\uff4b" +
    "\001\002\000\034\004\uff4c\066\uff4c\067\uff4c\074\uff4c\075" +
    "\uff4c\112\uff4c\123\uff4c\124\uff4c\125\uff4c\126\uff4c\127\uff4c" +
    "\130\uff4c\131\uff4c\001\002\000\034\004\uff65\066\uff65\067" +
    "\uff65\074\uff65\075\uff65\112\uff65\123\uff65\124\uff65\125\uff65" +
    "\126\uff65\127\uff65\130\uff65\131\uff65\001\002\000\034\004" +
    "\uff4f\066\uff4f\067\uff4f\074\uff4f\075\uff4f\112\uff4f\123\uff4f" +
    "\124\uff4f\125\uff4f\126\uff4f\127\uff4f\130\uff4f\131\uff4f\001" +
    "\002\000\034\004\uff4e\066\uff4e\067\uff4e\074\uff4e\075\uff4e" +
    "\112\uff4e\123\uff4e\124\uff4e\125\uff4e\126\uff4e\127\uff4e\130" +
    "\uff4e\131\uff4e\001\002\000\034\004\uff56\066\uff56\067\uff56" +
    "\074\uff56\075\uff56\112\uff56\123\uff56\124\uff56\125\uff56\126" +
    "\uff56\127\uff56\130\uff56\131\uff56\001\002\000\034\004\uff52" +
    "\066\uff52\067\uff52\074\uff52\075\uff52\112\uff52\123\uff52\124" +
    "\uff52\125\uff52\126\uff52\127\uff52\130\uff52\131\uff52\001\002" +
    "\000\034\004\uff5e\066\uff5e\067\uff5e\074\uff5e\075\uff5e\112" +
    "\uff5e\123\uff5e\124\uff5e\125\uff5e\126\uff5e\127\uff5e\130\uff5e" +
    "\131\uff5e\001\002\000\034\004\uff4d\066\uff4d\067\uff4d\074" +
    "\uff4d\075\uff4d\112\uff4d\123\uff4d\124\uff4d\125\uff4d\126\uff4d" +
    "\127\uff4d\130\uff4d\131\uff4d\001\002\000\102\045\104\046" +
    "\071\047\101\050\107\051\060\053\076\054\066\055\070" +
    "\056\102\057\114\060\064\061\103\062\067\063\061\064" +
    "\112\065\073\067\062\070\072\071\100\072\113\073\057" +
    "\076\056\077\105\100\115\101\106\102\110\103\111\104" +
    "\077\105\117\106\063\107\065\110\075\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\043\125\031\126\010\127\026\130\007\131\034" +
    "\001\002\000\206\003\uff86\004\uff86\006\uff86\010\uff86\011" +
    "\uff86\014\uff86\015\uff86\020\uff86\021\uff86\023\uff86\024\uff86" +
    "\025\uff86\026\uff86\030\uff86\031\uff86\036\uff86\042\uff86\044" +
    "\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\052\uff86" +
    "\053\076\054\066\055\070\056\102\057\114\060\064\061" +
    "\103\062\067\063\061\064\112\065\073\066\uff86\067\062" +
    "\070\072\071\100\072\113\073\057\074\uff86\075\uff86\076" +
    "\056\077\105\100\115\101\106\102\110\103\111\104\uff86" +
    "\105\uff86\106\063\107\065\110\075\112\uff86\113\uff86\116" +
    "\uff86\117\uff86\120\uff86\123\uff86\124\uff86\125\uff86\126\uff86" +
    "\127\uff86\130\uff86\131\uff86\001\002\000\206\003\uff87\004" +
    "\uff87\006\uff87\010\uff87\011\uff87\014\uff87\015\uff87\020\uff87" +
    "\021\uff87\023\uff87\024\uff87\025\uff87\026\uff87\030\uff87\031" +
    "\uff87\036\uff87\042\uff87\044\uff87\045\104\046\071\047\101" +
    "\050\107\051\060\052\uff87\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\066\uff87\067\062\070\072\071\100\072\113\073" +
    "\057\074\uff87\075\uff87\076\056\077\105\100\115\101\106" +
    "\102\110\103\111\104\077\105\uff87\106\063\107\065\110" +
    "\075\112\uff87\113\uff87\116\uff87\117\uff87\120\uff87\123\uff87" +
    "\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87\001" +
    "\002\000\206\003\uff8c\004\uff8c\006\uff8c\010\uff8c\011\uff8c" +
    "\014\uff8c\015\uff8c\020\uff8c\021\uff8c\023\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\030\uff8c\031\uff8c\036\uff8c\042\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052\uff8c\053" +
    "\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060\uff8c\061\uff8c" +
    "\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c\067\uff8c\070" +
    "\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075\uff8c\076\uff8c" +
    "\077\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\uff8c\110\uff8c\112\uff8c\113\uff8c\116\uff8c" +
    "\117\uff8c\120\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c\127" +
    "\uff8c\130\uff8c\131\uff8c\001\002\000\036\004\053\066\014" +
    "\067\011\074\037\075\020\112\036\113\130\123\042\124" +
    "\043\125\031\126\010\127\026\130\007\131\034\001\002" +
    "\000\206\003\uff88\004\uff88\006\uff88\010\uff88\011\uff88\014" +
    "\uff88\015\uff88\020\uff88\021\uff88\023\uff88\024\uff88\025\uff88" +
    "\026\uff88\030\uff88\031\uff88\036\uff88\042\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077" +
    "\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88" +
    "\106\uff88\107\uff88\110\uff88\112\uff88\113\uff88\116\uff88\117" +
    "\uff88\120\uff88\123\uff88\124\uff88\125\uff88\126\uff88\127\uff88" +
    "\130\uff88\131\uff88\001\002\000\006\052\132\113\uff98\001" +
    "\002\000\004\113\131\001\002\000\104\045\104\046\071" +
    "\047\101\050\107\051\060\052\uff97\053\076\054\066\055" +
    "\070\056\102\057\114\060\064\061\103\062\067\063\061" +
    "\064\112\065\073\067\062\070\072\071\100\072\113\073" +
    "\057\076\056\077\105\100\115\101\106\102\110\103\111" +
    "\104\077\106\063\107\065\110\075\113\uff97\001\002\000" +
    "\206\003\uff7b\004\uff7b\006\uff7b\010\uff7b\011\uff7b\014\uff7b" +
    "\015\uff7b\020\uff7b\021\uff7b\023\uff7b\024\uff7b\025\uff7b\026" +
    "\uff7b\030\uff7b\031\uff7b\036\uff7b\042\uff7b\044\uff7b\045\uff7b" +
    "\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b\054" +
    "\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b" +
    "\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071" +
    "\uff7b\072\uff7b\073\uff7b\074\uff7b\075\uff7b\076\uff7b\077\uff7b" +
    "\100\uff7b\101\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\106" +
    "\uff7b\107\uff7b\110\uff7b\112\uff7b\113\uff7b\116\uff7b\117\uff7b" +
    "\120\uff7b\123\uff7b\124\uff7b\125\uff7b\126\uff7b\127\uff7b\130" +
    "\uff7b\131\uff7b\001\002\000\206\003\uff7c\004\uff7c\006\uff7c" +
    "\010\uff7c\011\uff7c\014\uff7c\015\uff7c\020\uff7c\021\uff7c\023" +
    "\uff7c\024\uff7c\025\uff7c\026\uff7c\030\uff7c\031\uff7c\036\uff7c" +
    "\042\uff7c\044\uff7c\045\uff7c\046\uff7c\047\uff7c\050\uff7c\051" +
    "\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\057\uff7c" +
    "\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c\065\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\074\uff7c" +
    "\075\uff7c\076\uff7c\077\uff7c\100\uff7c\101\uff7c\102\uff7c\103" +
    "\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\112\uff7c" +
    "\113\uff7c\116\uff7c\117\uff7c\120\uff7c\123\uff7c\124\uff7c\125" +
    "\uff7c\126\uff7c\127\uff7c\130\uff7c\131\uff7c\001\002\000\034" +
    "\004\053\066\014\067\011\074\037\075\020\112\036\123" +
    "\042\124\043\125\031\126\010\127\026\130\007\131\034" +
    "\001\002\000\004\113\uff99\001\002\000\034\004\053\066" +
    "\014\067\011\074\037\075\020\112\036\123\042\124\043" +
    "\125\031\126\010\127\026\130\007\131\034\001\002\000" +
    "\174\004\uff8f\006\uff8f\010\uff8f\011\uff8f\014\uff8f\015\uff8f" +
    "\020\uff8f\021\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f\030" +
    "\uff8f\031\uff8f\036\uff8f\042\uff8f\044\uff8f\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\066\uff8f\070\072\071\100\072\113\073\057\074" +
    "\uff8f\075\uff8f\076\056\077\105\100\115\101\106\102\110" +
    "\103\111\104\077\106\063\107\065\110\075\112\uff8f\116" +
    "\uff8f\117\uff8f\120\uff8f\123\uff8f\124\uff8f\125\uff8f\126\uff8f" +
    "\127\uff8f\130\uff8f\131\uff8f\001\002\000\004\002\ufffd\001" +
    "\002\000\206\003\uff89\004\uff89\006\uff89\010\uff89\011\uff89" +
    "\014\uff89\015\uff89\020\uff89\021\uff89\023\uff89\024\uff89\025" +
    "\uff89\026\uff89\030\uff89\031\uff89\036\uff89\042\uff89\044\uff89" +
    "\045\uff89\046\uff89\047\uff89\050\uff89\051\uff89\052\uff89\053" +
    "\uff89\054\uff89\055\uff89\056\uff89\057\uff89\060\uff89\061\uff89" +
    "\062\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\070" +
    "\uff89\071\uff89\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89" +
    "\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104\uff89\105" +
    "\uff89\106\uff89\107\uff89\110\uff89\112\uff89\113\uff89\116\uff89" +
    "\117\uff89\120\uff89\123\uff89\124\uff89\125\uff89\126\uff89\127" +
    "\uff89\130\uff89\131\uff89\001\002\000\060\002\ufff6\003\ufff6" +
    "\004\ufff6\010\ufff6\014\ufff6\020\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\031\ufff6\042\ufff6\066\ufff6\067\ufff6\074\ufff6\075\ufff6" +
    "\112\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130" +
    "\ufff6\131\ufff6\001\002\000\060\002\ufff4\003\ufff4\004\ufff4" +
    "\010\ufff4\014\ufff4\020\ufff4\024\ufff4\025\ufff4\026\ufff4\031" +
    "\ufff4\042\ufff4\066\ufff4\067\ufff4\074\ufff4\075\ufff4\112\ufff4" +
    "\123\ufff4\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131" +
    "\ufff4\001\002\000\060\002\ufff5\003\ufff5\004\ufff5\010\ufff5" +
    "\014\ufff5\020\ufff5\024\ufff5\025\ufff5\026\ufff5\031\ufff5\042" +
    "\ufff5\066\ufff5\067\ufff5\074\ufff5\075\ufff5\112\ufff5\123\ufff5" +
    "\124\ufff5\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5\001" +
    "\002\000\060\002\ufff9\003\ufff9\004\ufff9\010\ufff9\014\ufff9" +
    "\020\ufff9\024\ufff9\025\ufff9\026\ufff9\031\ufff9\042\ufff9\066" +
    "\ufff9\067\ufff9\074\ufff9\075\ufff9\112\ufff9\123\ufff9\124\ufff9" +
    "\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\001\002\000" +
    "\060\002\ufffa\003\ufffa\004\ufffa\010\ufffa\014\ufffa\020\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\031\ufffa\042\ufffa\066\ufffa\067" +
    "\ufffa\074\ufffa\075\ufffa\112\ufffa\123\ufffa\124\ufffa\125\ufffa" +
    "\126\ufffa\127\ufffa\130\ufffa\131\ufffa\001\002\000\030\003" +
    "\165\010\015\014\013\020\044\024\006\025\167\026\045" +
    "\031\012\042\040\113\162\120\u014d\001\002\000\104\003" +
    "\uff9f\004\uff9f\006\uff9f\010\uff9f\011\uff9f\014\uff9f\015\uff9f" +
    "\020\uff9f\021\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\030" +
    "\uff9f\031\uff9f\036\uff9f\042\uff9f\044\uff9f\066\uff9f\067\uff9f" +
    "\074\uff9f\075\uff9f\112\uff9f\116\uff9f\117\uff9f\120\uff9f\123" +
    "\uff9f\124\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f" +
    "\001\002\000\012\052\151\106\152\112\150\120\uff9e\001" +
    "\002\000\026\003\165\010\015\014\013\020\044\024\006" +
    "\025\167\026\045\031\012\042\040\113\162\001\002\000" +
    "\004\004\156\001\002\000\034\004\053\066\014\067\011" +
    "\074\037\075\020\112\036\123\042\124\043\125\031\126" +
    "\010\127\026\130\007\131\034\001\002\000\200\003\uff9d" +
    "\004\uff9d\006\uff9d\010\uff9d\011\uff9d\014\uff9d\015\uff9d\020" +
    "\uff9d\021\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\030\uff9d" +
    "\031\uff9d\036\uff9d\042\uff9d\044\uff9d\045\104\046\071\047" +
    "\101\050\107\051\060\052\154\053\076\054\066\055\070" +
    "\056\102\057\114\060\064\061\103\062\067\063\061\064" +
    "\112\065\073\066\uff9d\070\072\071\100\072\113\073\057" +
    "\074\uff9d\075\uff9d\076\056\077\105\100\115\101\106\102" +
    "\110\103\111\104\077\106\063\107\065\110\075\112\uff9d" +
    "\116\uff9d\117\uff9d\120\uff9d\123\uff9d\124\uff9d\125\uff9d\126" +
    "\uff9d\127\uff9d\130\uff9d\131\uff9d\001\002\000\004\004\156" +
    "\001\002\000\104\003\uff9b\004\uff9b\006\uff9b\010\uff9b\011" +
    "\uff9b\014\uff9b\015\uff9b\020\uff9b\021\uff9b\023\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\030\uff9b\031\uff9b\036\uff9b\042\uff9b\044" +
    "\uff9b\066\uff9b\067\uff9b\074\uff9b\075\uff9b\112\uff9b\116\uff9b" +
    "\117\uff9b\120\uff9b\123\uff9b\124\uff9b\125\uff9b\126\uff9b\127" +
    "\uff9b\130\uff9b\131\uff9b\001\002\000\110\003\uff9e\004\uff9e" +
    "\006\uff9e\010\uff9e\011\uff9e\014\uff9e\015\uff9e\020\uff9e\021" +
    "\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e" +
    "\036\uff9e\042\uff9e\044\uff9e\052\151\066\uff9e\067\uff9e\074" +
    "\uff9e\075\uff9e\106\152\112\uff9e\116\uff9e\117\uff9e\120\uff9e" +
    "\123\uff9e\124\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131" +
    "\uff9e\001\002\000\104\003\uff9c\004\uff9c\006\uff9c\010\uff9c" +
    "\011\uff9c\014\uff9c\015\uff9c\020\uff9c\021\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\030\uff9c\031\uff9c\036\uff9c\042\uff9c" +
    "\044\uff9c\066\uff9c\067\uff9c\074\uff9c\075\uff9c\112\uff9c\116" +
    "\uff9c\117\uff9c\120\uff9c\123\uff9c\124\uff9c\125\uff9c\126\uff9c" +
    "\127\uff9c\130\uff9c\131\uff9c\001\002\000\010\003\uff95\052" +
    "\u014b\113\uff95\001\002\000\076\004\uffef\010\uffef\014\uffef" +
    "\015\uffef\020\uffef\021\uffef\023\uffef\024\uffef\025\uffef\026" +
    "\uffef\030\uffef\031\uffef\036\uffef\042\uffef\044\uffef\066\uffef" +
    "\067\uffef\074\uffef\075\uffef\112\uffef\116\uffef\117\uffef\120" +
    "\uffef\123\uffef\124\uffef\125\uffef\126\uffef\127\uffef\130\uffef" +
    "\131\uffef\001\002\000\076\004\ufff0\010\ufff0\014\ufff0\015" +
    "\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\030\ufff0\031\ufff0\036\ufff0\042\ufff0\044\ufff0\066\ufff0\067" +
    "\ufff0\074\ufff0\075\ufff0\112\ufff0\116\ufff0\117\ufff0\120\ufff0" +
    "\123\ufff0\124\ufff0\125\ufff0\126\ufff0\127\ufff0\130\ufff0\131" +
    "\ufff0\001\002\000\006\003\u0148\113\u0149\001\002\000\004" +
    "\004\u0147\001\002\000\004\113\u0146\001\002\000\076\004" +
    "\033\010\015\014\013\015\221\020\044\021\201\023\214" +
    "\024\006\025\203\026\045\030\207\031\012\036\213\042" +
    "\040\044\224\066\014\067\011\074\037\075\020\112\036" +
    "\116\205\117\uffa9\120\225\123\042\124\043\125\031\126" +
    "\010\127\026\130\007\131\034\001\002\000\020\010\015" +
    "\014\013\020\044\024\006\026\045\031\012\042\040\001" +
    "\002\000\004\004\171\001\002\000\004\106\172\001\002" +
    "\000\022\004\173\123\042\124\043\125\031\126\010\127" +
    "\026\130\007\131\034\001\002\000\012\003\uff7d\052\uff7d" +
    "\112\123\113\uff7d\001\002\000\010\003\uff93\052\uff93\113" +
    "\uff93\001\002\000\102\004\uffcb\006\uffcb\010\uffcb\011\uffcb" +
    "\014\uffcb\015\uffcb\020\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\030\uffcb\031\uffcb\036\uffcb\042\uffcb\044\uffcb" +
    "\066\uffcb\067\uffcb\074\uffcb\075\uffcb\112\uffcb\116\uffcb\117" +
    "\uffcb\120\uffcb\123\uffcb\124\uffcb\125\uffcb\126\uffcb\127\uffcb" +
    "\130\uffcb\131\uffcb\001\002\000\102\004\uffe2\006\uffe2\010" +
    "\uffe2\011\uffe2\014\uffe2\015\uffe2\020\uffe2\021\uffe2\023\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\036\uffe2\042" +
    "\uffe2\044\uffe2\066\uffe2\067\uffe2\074\uffe2\075\uffe2\112\uffe2" +
    "\116\uffe2\117\uffe2\120\uffe2\123\uffe2\124\uffe2\125\uffe2\126" +
    "\uffe2\127\uffe2\130\uffe2\131\uffe2\001\002\000\102\004\uffe0" +
    "\006\uffe0\010\uffe0\011\uffe0\014\uffe0\015\uffe0\020\uffe0\021" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0" +
    "\036\uffe0\042\uffe0\044\uffe0\066\uffe0\067\uffe0\074\uffe0\075" +
    "\uffe0\112\uffe0\116\uffe0\117\uffe0\120\uffe0\123\uffe0\124\uffe0" +
    "\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002\000" +
    "\102\004\uffc2\006\uffc2\010\uffc2\011\uffc2\014\uffc2\015\uffc2" +
    "\020\uffc2\021\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\030" +
    "\uffc2\031\uffc2\036\uffc2\042\uffc2\044\uffc2\066\uffc2\067\uffc2" +
    "\074\uffc2\075\uffc2\112\uffc2\116\uffc2\117\uffc2\120\uffc2\123" +
    "\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2" +
    "\001\002\000\006\003\u0119\112\u0118\001\002\000\102\004" +
    "\uffe5\006\uffe5\010\uffe5\011\uffe5\014\uffe5\015\uffe5\020\uffe5" +
    "\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031" +
    "\uffe5\036\uffe5\042\uffe5\044\uffe5\066\uffe5\067\uffe5\074\uffe5" +
    "\075\uffe5\112\uffe5\116\uffe5\117\uffe5\120\uffe5\123\uffe5\124" +
    "\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5\001\002" +
    "\000\020\010\015\014\013\020\044\024\006\026\045\031" +
    "\012\042\040\001\002\000\004\004\156\001\002\000\100" +
    "\003\u0110\004\033\010\015\014\013\015\221\020\044\021" +
    "\201\023\214\024\006\025\203\026\045\030\207\031\012" +
    "\036\213\042\040\044\224\066\014\067\011\074\037\075" +
    "\020\112\036\116\226\117\uffa9\120\225\123\042\124\043" +
    "\125\031\126\010\127\026\130\007\131\034\001\002\000" +
    "\004\120\311\001\002\000\036\004\053\066\014\067\011" +
    "\074\037\075\020\112\036\120\u010c\123\042\124\043\125" +
    "\031\126\010\127\026\130\007\131\034\001\002\000\200" +
    "\003\314\004\uff8d\006\uff8d\010\uff8d\011\uff8d\014\uff8d\015" +
    "\uff8d\020\uff8d\021\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\030\uff8d\031\uff8d\036\uff8d\042\uff8d\044\uff8d\045\104\046" +
    "\071\047\101\050\107\051\060\053\076\054\066\055\070" +
    "\056\102\057\114\060\064\061\103\062\067\063\061\064" +
    "\112\065\073\066\uff8d\067\062\070\072\071\100\072\113" +
    "\073\057\074\uff8d\075\uff8d\076\056\077\105\100\115\101" +
    "\106\102\110\103\111\104\077\106\063\107\065\110\075" +
    "\112\uff8d\116\uff8d\117\uff8d\120\313\123\uff8d\124\uff8d\125" +
    "\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d\001\002\000\102" +
    "\004\uffe3\006\uffe3\010\uffe3\011\uffe3\014\uffe3\015\uffe3\020" +
    "\uffe3\021\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\030\uffe3" +
    "\031\uffe3\036\uffe3\042\uffe3\044\uffe3\066\uffe3\067\uffe3\074" +
    "\uffe3\075\uffe3\112\uffe3\116\uffe3\117\uffe3\120\uffe3\123\uffe3" +
    "\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\001" +
    "\002\000\102\004\033\006\uffa9\010\015\011\uffa9\014\013" +
    "\015\221\020\044\021\201\023\214\024\006\025\203\026" +
    "\045\030\207\031\012\036\213\042\040\044\224\066\014" +
    "\067\011\074\037\075\020\112\036\116\226\117\uffa9\120" +
    "\225\123\042\124\043\125\031\126\010\127\026\130\007" +
    "\131\034\001\002\000\004\112\341\001\002\000\006\003" +
    "\300\112\277\001\002\000\102\004\uffe4\006\uffe4\010\uffe4" +
    "\011\uffe4\014\uffe4\015\uffe4\020\uffe4\021\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\036\uffe4\042\uffe4" +
    "\044\uffe4\066\uffe4\067\uffe4\074\uffe4\075\uffe4\112\uffe4\116" +
    "\uffe4\117\uffe4\120\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4" +
    "\127\uffe4\130\uffe4\131\uffe4\001\002\000\102\004\uffe1\006" +
    "\uffe1\010\uffe1\011\uffe1\014\uffe1\015\uffe1\020\uffe1\021\uffe1" +
    "\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\036" +
    "\uffe1\042\uffe1\044\uffe1\066\uffe1\067\uffe1\074\uffe1\075\uffe1" +
    "\112\uffe1\116\uffe1\117\uffe1\120\uffe1\123\uffe1\124\uffe1\125" +
    "\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002\000\102" +
    "\004\033\006\uffa9\010\015\011\uffa9\014\013\015\221\020" +
    "\044\021\201\023\214\024\006\025\203\026\045\030\207" +
    "\031\012\036\213\042\040\044\224\066\014\067\011\074" +
    "\037\075\020\112\036\116\226\117\uffa9\120\225\123\042" +
    "\124\043\125\031\126\010\127\026\130\007\131\034\001" +
    "\002\000\102\004\uff8e\006\uff8e\010\uff8e\011\uff8e\014\uff8e" +
    "\015\uff8e\020\uff8e\021\uff8e\023\uff8e\024\uff8e\025\uff8e\026" +
    "\uff8e\030\uff8e\031\uff8e\036\uff8e\042\uff8e\044\uff8e\066\uff8e" +
    "\067\uff8e\074\uff8e\075\uff8e\112\uff8e\116\uff8e\117\uff8e\120" +
    "\274\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e" +
    "\131\uff8e\001\002\000\004\003\272\001\002\000\060\002" +
    "\ufff3\003\ufff3\004\ufff3\010\ufff3\014\ufff3\020\ufff3\024\ufff3" +
    "\025\ufff3\026\ufff3\031\ufff3\042\ufff3\066\ufff3\067\ufff3\074" +
    "\ufff3\075\ufff3\112\ufff3\123\ufff3\124\ufff3\125\ufff3\126\ufff3" +
    "\127\ufff3\130\ufff3\131\ufff3\001\002\000\004\117\271\001" +
    "\002\000\006\003\233\112\232\001\002\000\102\004\033" +
    "\006\uffa9\010\015\011\uffa9\014\013\015\221\020\044\021" +
    "\201\023\214\024\006\025\203\026\045\030\207\031\012" +
    "\036\213\042\040\044\224\066\014\067\011\074\037\075" +
    "\020\112\036\116\226\117\uffa9\120\225\123\042\124\043" +
    "\125\031\126\010\127\026\130\007\131\034\001\002\000" +
    "\076\004\033\010\015\014\013\015\221\020\044\021\201" +
    "\023\214\024\006\025\203\026\045\030\207\031\012\036" +
    "\213\042\040\044\224\066\014\067\011\074\037\075\020" +
    "\112\036\116\226\117\uffa9\120\225\123\042\124\043\125" +
    "\031\126\010\127\026\130\007\131\034\001\002\000\102" +
    "\004\uffb2\006\uffb2\010\uffb2\011\uffb2\014\uffb2\015\uffb2\020" +
    "\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2" +
    "\031\uffb2\036\uffb2\042\uffb2\044\uffb2\066\uffb2\067\uffb2\074" +
    "\uffb2\075\uffb2\112\uffb2\116\uffb2\117\uffb2\120\uffb2\123\uffb2" +
    "\124\uffb2\125\uffb2\126\uffb2\127\uffb2\130\uffb2\131\uffb2\001" +
    "\002\000\004\117\231\001\002\000\102\004\uffb4\006\uffb4" +
    "\010\uffb4\011\uffb4\014\uffb4\015\uffb4\020\uffb4\021\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\036\uffb4" +
    "\042\uffb4\044\uffb4\066\uffb4\067\uffb4\074\uffb4\075\uffb4\112" +
    "\uffb4\116\uffb4\117\uffb4\120\uffb4\123\uffb4\124\uffb4\125\uffb4" +
    "\126\uffb4\127\uffb4\130\uffb4\131\uffb4\001\002\000\036\003" +
    "\254\004\053\066\014\067\011\074\037\075\020\112\036" +
    "\123\042\124\043\125\031\126\010\127\026\130\007\131" +
    "\034\001\002\000\036\004\053\066\014\067\011\074\037" +
    "\075\020\112\036\116\235\123\042\124\043\125\031\126" +
    "\010\127\026\130\007\131\034\001\002\000\102\045\104" +
    "\046\071\047\101\050\107\051\060\053\076\054\066\055" +
    "\070\056\102\057\114\060\064\061\103\062\067\063\061" +
    "\064\112\065\073\067\062\070\072\071\100\072\113\073" +
    "\057\076\056\077\105\100\115\101\106\102\110\103\111" +
    "\104\077\106\063\107\065\110\075\113\247\001\002\000" +
    "\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015\221" +
    "\020\044\021\201\023\214\024\006\025\203\026\045\030" +
    "\207\031\012\036\213\042\040\044\224\066\014\067\011" +
    "\074\037\075\020\112\036\116\226\117\uffa9\120\225\123" +
    "\042\124\043\125\031\126\010\127\026\130\007\131\034" +
    "\001\002\000\004\117\246\001\002\000\010\006\240\011" +
    "\241\117\uffc8\001\002\000\004\120\244\001\002\000\004" +
    "\120\242\001\002\000\102\004\033\006\uffa9\010\015\011" +
    "\uffa9\014\013\015\221\020\044\021\201\023\214\024\006" +
    "\025\203\026\045\030\207\031\012\036\213\042\040\044" +
    "\224\066\014\067\011\074\037\075\020\112\036\116\226" +
    "\117\uffa9\120\225\123\042\124\043\125\031\126\010\127" +
    "\026\130\007\131\034\001\002\000\004\117\uffc9\001\002" +
    "\000\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015" +
    "\221\020\044\021\201\023\214\024\006\025\203\026\045" +
    "\030\207\031\012\036\213\042\040\044\224\066\014\067" +
    "\011\074\037\075\020\112\036\116\226\117\uffa9\120\225" +
    "\123\042\124\043\125\031\126\010\127\026\130\007\131" +
    "\034\001\002\000\004\117\uffca\001\002\000\102\004\uffc4" +
    "\006\uffc4\010\uffc4\011\uffc4\014\uffc4\015\uffc4\020\uffc4\021" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4" +
    "\036\uffc4\042\uffc4\044\uffc4\066\uffc4\067\uffc4\074\uffc4\075" +
    "\uffc4\112\uffc4\116\uffc4\117\uffc4\120\uffc4\123\uffc4\124\uffc4" +
    "\125\uffc4\126\uffc4\127\uffc4\130\uffc4\131\uffc4\001\002\000" +
    "\004\116\250\001\002\000\102\004\033\006\uffa9\010\015" +
    "\011\uffa9\014\013\015\221\020\044\021\201\023\214\024" +
    "\006\025\203\026\045\030\207\031\012\036\213\042\040" +
    "\044\224\066\014\067\011\074\037\075\020\112\036\116" +
    "\226\117\uffa9\120\225\123\042\124\043\125\031\126\010" +
    "\127\026\130\007\131\034\001\002\000\004\117\252\001" +
    "\002\000\102\004\uffc7\006\uffc7\010\uffc7\011\uffc7\014\uffc7" +
    "\015\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\030\uffc7\031\uffc7\036\uffc7\042\uffc7\044\uffc7\066\uffc7" +
    "\067\uffc7\074\uffc7\075\uffc7\112\uffc7\116\uffc7\117\uffc7\120" +
    "\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127\uffc7\130\uffc7" +
    "\131\uffc7\001\002\000\104\003\261\045\104\046\071\047" +
    "\101\050\107\051\060\053\076\054\066\055\070\056\102" +
    "\057\114\060\064\061\103\062\067\063\061\064\112\065" +
    "\073\067\062\070\072\071\100\072\113\073\057\076\056" +
    "\077\105\100\115\101\106\102\110\103\111\104\077\106" +
    "\063\107\065\110\075\113\262\001\002\000\004\113\255" +
    "\001\002\000\004\116\256\001\002\000\102\004\033\006" +
    "\uffa9\010\015\011\uffa9\014\013\015\221\020\044\021\201" +
    "\023\214\024\006\025\203\026\045\030\207\031\012\036" +
    "\213\042\040\044\224\066\014\067\011\074\037\075\020" +
    "\112\036\116\226\117\uffa9\120\225\123\042\124\043\125" +
    "\031\126\010\127\026\130\007\131\034\001\002\000\004" +
    "\117\260\001\002\000\102\004\uffc6\006\uffc6\010\uffc6\011" +
    "\uffc6\014\uffc6\015\uffc6\020\uffc6\021\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\030\uffc6\031\uffc6\036\uffc6\042\uffc6\044" +
    "\uffc6\066\uffc6\067\uffc6\074\uffc6\075\uffc6\112\uffc6\116\uffc6" +
    "\117\uffc6\120\uffc6\123\uffc6\124\uffc6\125\uffc6\126\uffc6\127" +
    "\uffc6\130\uffc6\131\uffc6\001\002\000\004\116\266\001\002" +
    "\000\004\116\263\001\002\000\102\004\033\006\uffa9\010" +
    "\015\011\uffa9\014\013\015\221\020\044\021\201\023\214" +
    "\024\006\025\203\026\045\030\207\031\012\036\213\042" +
    "\040\044\224\066\014\067\011\074\037\075\020\112\036" +
    "\116\226\117\uffa9\120\225\123\042\124\043\125\031\126" +
    "\010\127\026\130\007\131\034\001\002\000\004\117\265" +
    "\001\002\000\102\004\uffcc\006\uffcc\010\uffcc\011\uffcc\014" +
    "\uffcc\015\uffcc\020\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\030\uffcc\031\uffcc\036\uffcc\042\uffcc\044\uffcc\066" +
    "\uffcc\067\uffcc\074\uffcc\075\uffcc\112\uffcc\116\uffcc\117\uffcc" +
    "\120\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc\127\uffcc\130" +
    "\uffcc\131\uffcc\001\002\000\102\004\033\006\uffa9\010\015" +
    "\011\uffa9\014\013\015\221\020\044\021\201\023\214\024" +
    "\006\025\203\026\045\030\207\031\012\036\213\042\040" +
    "\044\224\066\014\067\011\074\037\075\020\112\036\116" +
    "\226\117\uffa9\120\225\123\042\124\043\125\031\126\010" +
    "\127\026\130\007\131\034\001\002\000\004\117\270\001" +
    "\002\000\102\004\uffc5\006\uffc5\010\uffc5\011\uffc5\014\uffc5" +
    "\015\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026" +
    "\uffc5\030\uffc5\031\uffc5\036\uffc5\042\uffc5\044\uffc5\066\uffc5" +
    "\067\uffc5\074\uffc5\075\uffc5\112\uffc5\116\uffc5\117\uffc5\120" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5" +
    "\131\uffc5\001\002\000\060\002\uffea\003\uffea\004\uffea\010" +
    "\uffea\014\uffea\020\uffea\024\uffea\025\uffea\026\uffea\031\uffea" +
    "\042\uffea\066\uffea\067\uffea\074\uffea\075\uffea\112\uffea\123" +
    "\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131\uffea" +
    "\001\002\000\102\004\033\006\uffa9\010\015\011\uffa9\014" +
    "\013\015\221\020\044\021\201\023\214\024\006\025\203" +
    "\026\045\030\207\031\012\036\213\042\040\044\224\066" +
    "\014\067\011\074\037\075\020\112\036\116\226\117\uffa9" +
    "\120\225\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\102\004\uffab\006\uffab\010\uffab" +
    "\011\uffab\014\uffab\015\uffab\020\uffab\021\uffab\023\uffab\024" +
    "\uffab\025\uffab\026\uffab\030\uffab\031\uffab\036\uffab\042\uffab" +
    "\044\uffab\066\uffab\067\uffab\074\uffab\075\uffab\112\uffab\116" +
    "\uffab\117\uffab\120\uffab\123\uffab\124\uffab\125\uffab\126\uffab" +
    "\127\uffab\130\uffab\131\uffab\001\002\000\102\004\033\006" +
    "\uffa9\010\015\011\uffa9\014\013\015\221\020\044\021\201" +
    "\023\214\024\006\025\203\026\045\030\207\031\012\036" +
    "\213\042\040\044\224\066\014\067\011\074\037\075\020" +
    "\112\036\116\226\117\uffa9\120\225\123\042\124\043\125" +
    "\031\126\010\127\026\130\007\131\034\001\002\000\102" +
    "\004\uffb1\006\uffb1\010\uffb1\011\uffb1\014\uffb1\015\uffb1\020" +
    "\uffb1\021\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1" +
    "\031\uffb1\036\uffb1\042\uffb1\044\uffb1\066\uffb1\067\uffb1\074" +
    "\uffb1\075\uffb1\112\uffb1\116\uffb1\117\uffb1\120\uffb1\123\uffb1" +
    "\124\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001" +
    "\002\000\102\004\uffae\006\uffae\010\uffae\011\uffae\014\uffae" +
    "\015\uffae\020\uffae\021\uffae\023\uffae\024\uffae\025\uffae\026" +
    "\uffae\030\uffae\031\uffae\036\uffae\042\uffae\044\uffae\066\uffae" +
    "\067\uffae\074\uffae\075\uffae\112\uffae\116\uffae\117\uffae\120" +
    "\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae" +
    "\131\uffae\001\002\000\036\003\324\004\053\066\014\067" +
    "\011\074\037\075\020\112\036\123\042\124\043\125\031" +
    "\126\010\127\026\130\007\131\034\001\002\000\102\004" +
    "\033\006\uffa9\010\015\011\uffa9\014\013\015\221\020\044" +
    "\021\201\023\214\024\006\025\203\026\045\030\207\031" +
    "\012\036\213\042\040\044\224\066\014\067\011\074\037" +
    "\075\020\112\036\116\226\117\uffa9\120\225\123\042\124" +
    "\043\125\031\126\010\127\026\130\007\131\034\001\002" +
    "\000\106\003\314\045\104\046\071\047\101\050\107\051" +
    "\060\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\105\100\115" +
    "\101\106\102\110\103\111\104\077\106\063\107\065\110" +
    "\075\113\315\120\313\001\002\000\102\004\033\006\uffa9" +
    "\010\015\011\uffa9\014\013\015\305\020\044\021\201\023" +
    "\214\024\006\025\203\026\045\030\207\031\012\036\213" +
    "\042\040\044\224\066\014\067\011\074\037\075\020\112" +
    "\036\116\226\117\uffa9\120\225\123\042\124\043\125\031" +
    "\126\010\127\026\130\007\131\034\001\002\000\102\004" +
    "\uffd7\006\uffd7\010\uffd7\011\uffd7\014\uffd7\015\uffd7\020\uffd7" +
    "\021\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031" +
    "\uffd7\036\uffd7\042\uffd7\044\uffd7\066\uffd7\067\uffd7\074\uffd7" +
    "\075\uffd7\112\uffd7\116\uffd7\117\uffd7\120\uffd7\123\uffd7\124" +
    "\uffd7\125\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7\001\002" +
    "\000\102\004\uffdc\006\uffdc\010\uffdc\011\uffdc\014\uffdc\015" +
    "\uffdc\020\uffdc\021\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc" +
    "\030\uffdc\031\uffdc\036\uffdc\042\uffdc\044\uffdc\066\uffdc\067" +
    "\uffdc\074\uffdc\075\uffdc\112\uffdc\116\uffdc\117\uffdc\120\311" +
    "\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc\131" +
    "\uffdc\001\002\000\104\003\272\004\033\006\uffa9\010\015" +
    "\011\uffa9\014\013\015\221\020\044\021\201\023\214\024" +
    "\006\025\203\026\045\030\207\031\012\036\213\042\040" +
    "\044\224\066\014\067\011\074\037\075\020\112\036\116" +
    "\226\117\uffa9\120\225\123\042\124\043\125\031\126\010" +
    "\127\026\130\007\131\034\001\002\000\102\004\uffdb\006" +
    "\uffdb\010\uffdb\011\uffdb\014\uffdb\015\uffdb\020\uffdb\021\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\036" +
    "\uffdb\042\uffdb\044\uffdb\066\uffdb\067\uffdb\074\uffdb\075\uffdb" +
    "\112\uffdb\116\uffdb\117\uffdb\120\uffdb\123\uffdb\124\uffdb\125" +
    "\uffdb\126\uffdb\127\uffdb\130\uffdb\131\uffdb\001\002\000\102" +
    "\004\uffdd\006\uffdd\010\uffdd\011\uffdd\014\uffdd\015\uffdd\020" +
    "\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd" +
    "\031\uffdd\036\uffdd\042\uffdd\044\uffdd\066\uffdd\067\uffdd\074" +
    "\uffdd\075\uffdd\112\uffdd\116\uffdd\117\uffdd\120\uffdd\123\uffdd" +
    "\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\001" +
    "\002\000\102\004\uffde\006\uffde\010\uffde\011\uffde\014\uffde" +
    "\015\uffde\020\uffde\021\uffde\023\uffde\024\uffde\025\uffde\026" +
    "\uffde\030\uffde\031\uffde\036\uffde\042\uffde\044\uffde\066\uffde" +
    "\067\uffde\074\uffde\075\uffde\112\uffde\116\uffde\117\uffde\120" +
    "\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde" +
    "\131\uffde\001\002\000\102\004\033\006\uffa9\010\015\011" +
    "\uffa9\014\013\015\221\020\044\021\201\023\214\024\006" +
    "\025\203\026\045\030\207\031\012\036\213\042\040\044" +
    "\224\066\014\067\011\074\037\075\020\112\036\116\226" +
    "\117\uffa9\120\225\123\042\124\043\125\031\126\010\127" +
    "\026\130\007\131\034\001\002\000\102\004\uffaf\006\uffaf" +
    "\010\uffaf\011\uffaf\014\uffaf\015\uffaf\020\uffaf\021\uffaf\023" +
    "\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf\036\uffaf" +
    "\042\uffaf\044\uffaf\066\uffaf\067\uffaf\074\uffaf\075\uffaf\112" +
    "\uffaf\116\uffaf\117\uffaf\120\uffaf\123\uffaf\124\uffaf\125\uffaf" +
    "\126\uffaf\127\uffaf\130\uffaf\131\uffaf\001\002\000\102\004" +
    "\033\006\uffa9\010\015\011\uffa9\014\013\015\221\020\044" +
    "\021\201\023\214\024\006\025\203\026\045\030\207\031" +
    "\012\036\213\042\040\044\224\066\014\067\011\074\037" +
    "\075\020\112\036\116\226\117\uffa9\120\225\123\042\124" +
    "\043\125\031\126\010\127\026\130\007\131\034\001\002" +
    "\000\004\120\320\001\002\000\102\004\033\006\uffa9\010" +
    "\015\011\uffa9\014\013\015\221\020\044\021\201\023\214" +
    "\024\006\025\203\026\045\030\207\031\012\036\213\042" +
    "\040\044\224\066\014\067\011\074\037\075\020\112\036" +
    "\116\226\117\uffa9\120\225\123\042\124\043\125\031\126" +
    "\010\127\026\130\007\131\034\001\002\000\102\004\033" +
    "\006\uffa9\010\015\011\uffa9\014\013\015\305\020\044\021" +
    "\201\023\214\024\006\025\203\026\045\030\207\031\012" +
    "\036\213\042\040\044\224\066\014\067\011\074\037\075" +
    "\020\112\036\116\226\117\uffa9\120\225\123\042\124\043" +
    "\125\031\126\010\127\026\130\007\131\034\001\002\000" +
    "\102\004\uffda\006\uffda\010\uffda\011\uffda\014\uffda\015\uffda" +
    "\020\uffda\021\uffda\023\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\031\uffda\036\uffda\042\uffda\044\uffda\066\uffda\067\uffda" +
    "\074\uffda\075\uffda\112\uffda\116\uffda\117\uffda\120\uffda\123" +
    "\uffda\124\uffda\125\uffda\126\uffda\127\uffda\130\uffda\131\uffda" +
    "\001\002\000\102\004\033\006\uffa9\010\015\011\uffa9\014" +
    "\013\015\221\020\044\021\201\023\214\024\006\025\203" +
    "\026\045\030\207\031\012\036\213\042\040\044\224\066" +
    "\014\067\011\074\037\075\020\112\036\116\226\117\uffa9" +
    "\120\225\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\102\004\uffaa\006\uffaa\010\uffaa" +
    "\011\uffaa\014\uffaa\015\uffaa\020\uffaa\021\uffaa\023\uffaa\024" +
    "\uffaa\025\uffaa\026\uffaa\030\uffaa\031\uffaa\036\uffaa\042\uffaa" +
    "\044\uffaa\066\uffaa\067\uffaa\074\uffaa\075\uffaa\112\uffaa\116" +
    "\uffaa\117\uffaa\120\uffaa\123\uffaa\124\uffaa\125\uffaa\126\uffaa" +
    "\127\uffaa\130\uffaa\131\uffaa\001\002\000\102\004\uffb0\006" +
    "\uffb0\010\uffb0\011\uffb0\014\uffb0\015\uffb0\020\uffb0\021\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0\036" +
    "\uffb0\042\uffb0\044\uffb0\066\uffb0\067\uffb0\074\uffb0\075\uffb0" +
    "\112\uffb0\116\uffb0\117\uffb0\120\uffb0\123\uffb0\124\uffb0\125" +
    "\uffb0\126\uffb0\127\uffb0\130\uffb0\131\uffb0\001\002\000\104" +
    "\003\330\045\104\046\071\047\101\050\107\051\060\053" +
    "\076\054\066\055\070\056\102\057\114\060\064\061\103" +
    "\062\067\063\061\064\112\065\073\067\062\070\072\071" +
    "\100\072\113\073\057\076\056\077\105\100\115\101\106" +
    "\102\110\103\111\104\077\106\063\107\065\110\075\113" +
    "\331\001\002\000\004\113\325\001\002\000\102\004\033" +
    "\006\uffa9\010\015\011\uffa9\014\013\015\221\020\044\021" +
    "\201\023\214\024\006\025\203\026\045\030\207\031\012" +
    "\036\213\042\040\044\224\066\014\067\011\074\037\075" +
    "\020\112\036\116\226\117\uffa9\120\225\123\042\124\043" +
    "\125\031\126\010\127\026\130\007\131\034\001\002\000" +
    "\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015\305" +
    "\020\044\021\201\023\214\024\006\025\203\026\045\030" +
    "\207\031\012\036\213\042\040\044\224\066\014\067\011" +
    "\074\037\075\020\112\036\116\226\117\uffa9\120\225\123" +
    "\042\124\043\125\031\126\010\127\026\130\007\131\034" +
    "\001\002\000\102\004\uffd9\006\uffd9\010\uffd9\011\uffd9\014" +
    "\uffd9\015\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\030\uffd9\031\uffd9\036\uffd9\042\uffd9\044\uffd9\066" +
    "\uffd9\067\uffd9\074\uffd9\075\uffd9\112\uffd9\116\uffd9\117\uffd9" +
    "\120\uffd9\123\uffd9\124\uffd9\125\uffd9\126\uffd9\127\uffd9\130" +
    "\uffd9\131\uffd9\001\002\000\102\004\033\006\uffa9\010\015" +
    "\011\uffa9\014\013\015\221\020\044\021\201\023\214\024" +
    "\006\025\203\026\045\030\207\031\012\036\213\042\040" +
    "\044\224\066\014\067\011\074\037\075\020\112\036\116" +
    "\226\117\uffa9\120\225\123\042\124\043\125\031\126\010" +
    "\127\026\130\007\131\034\001\002\000\104\003\332\004" +
    "\033\006\uffa9\010\015\011\uffa9\014\013\015\221\020\044" +
    "\021\201\023\214\024\006\025\203\026\045\030\207\031" +
    "\012\036\213\042\040\044\224\066\014\067\011\074\037" +
    "\075\020\112\036\116\226\117\uffa9\120\225\123\042\124" +
    "\043\125\031\126\010\127\026\130\007\131\034\001\002" +
    "\000\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015" +
    "\221\020\044\021\201\023\214\024\006\025\203\026\045" +
    "\030\207\031\012\036\213\042\040\044\224\066\014\067" +
    "\011\074\037\075\020\112\036\116\226\117\uffa9\120\225" +
    "\123\042\124\043\125\031\126\010\127\026\130\007\131" +
    "\034\001\002\000\102\004\033\006\uffa9\010\015\011\uffa9" +
    "\014\013\015\305\020\044\021\201\023\214\024\006\025" +
    "\203\026\045\030\207\031\012\036\213\042\040\044\224" +
    "\066\014\067\011\074\037\075\020\112\036\116\226\117" +
    "\uffa9\120\225\123\042\124\043\125\031\126\010\127\026" +
    "\130\007\131\034\001\002\000\102\004\uffdf\006\uffdf\010" +
    "\uffdf\011\uffdf\014\uffdf\015\uffdf\020\uffdf\021\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\030\uffdf\031\uffdf\036\uffdf\042" +
    "\uffdf\044\uffdf\066\uffdf\067\uffdf\074\uffdf\075\uffdf\112\uffdf" +
    "\116\uffdf\117\uffdf\120\uffdf\123\uffdf\124\uffdf\125\uffdf\126" +
    "\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\102\004\033" +
    "\006\uffa9\010\015\011\uffa9\014\013\015\305\020\044\021" +
    "\201\023\214\024\006\025\203\026\045\030\207\031\012" +
    "\036\213\042\040\044\224\066\014\067\011\074\037\075" +
    "\020\112\036\116\226\117\uffa9\120\225\123\042\124\043" +
    "\125\031\126\010\127\026\130\007\131\034\001\002\000" +
    "\102\004\uffd6\006\uffd6\010\uffd6\011\uffd6\014\uffd6\015\uffd6" +
    "\020\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\030" +
    "\uffd6\031\uffd6\036\uffd6\042\uffd6\044\uffd6\066\uffd6\067\uffd6" +
    "\074\uffd6\075\uffd6\112\uffd6\116\uffd6\117\uffd6\120\uffd6\123" +
    "\uffd6\124\uffd6\125\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6" +
    "\001\002\000\102\004\033\006\uffa9\010\015\011\uffa9\014" +
    "\013\015\305\020\044\021\201\023\214\024\006\025\203" +
    "\026\045\030\207\031\012\036\213\042\040\044\224\066" +
    "\014\067\011\074\037\075\020\112\036\116\226\117\uffa9" +
    "\120\225\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\102\004\uffd8\006\uffd8\010\uffd8" +
    "\011\uffd8\014\uffd8\015\uffd8\020\uffd8\021\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8\036\uffd8\042\uffd8" +
    "\044\uffd8\066\uffd8\067\uffd8\074\uffd8\075\uffd8\112\uffd8\116" +
    "\uffd8\117\uffd8\120\uffd8\123\uffd8\124\uffd8\125\uffd8\126\uffd8" +
    "\127\uffd8\130\uffd8\131\uffd8\001\002\000\022\004\343\074" +
    "\037\075\020\123\352\125\350\126\342\130\345\131\346" +
    "\001\002\000\106\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051" +
    "\uff6e\053\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e" +
    "\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\067\uff6e\070" +
    "\uff6e\071\uff6e\072\uff6e\073\uff6e\076\uff6e\077\uff6e\100\uff6e" +
    "\101\uff6e\102\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107" +
    "\uff6e\110\uff6e\113\uff6e\120\uff6e\001\002\000\106\045\uff83" +
    "\046\uff83\047\uff83\050\uff83\051\uff83\053\uff83\054\uff83\055" +
    "\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\064\uff83\065\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073" +
    "\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102\uff83\103\uff83" +
    "\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83\112\u0106\113" +
    "\uff83\001\002\000\104\045\uff81\046\uff81\047\uff81\050\uff81" +
    "\051\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060" +
    "\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\067\uff81" +
    "\070\uff81\071\uff81\072\uff81\073\uff81\076\uff81\077\uff81\100" +
    "\uff81\101\uff81\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81" +
    "\107\uff81\110\uff81\113\uff81\001\002\000\106\045\uff6d\046" +
    "\uff6d\047\uff6d\050\uff6d\051\uff6d\053\uff6d\054\uff6d\055\uff6d" +
    "\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064" +
    "\uff6d\065\uff6d\067\uff6d\070\uff6d\071\uff6d\072\uff6d\073\uff6d" +
    "\076\uff6d\077\uff6d\100\uff6d\101\uff6d\102\uff6d\103\uff6d\104" +
    "\uff6d\105\uff6d\106\uff6d\107\uff6d\110\uff6d\113\uff6d\120\uff6d" +
    "\001\002\000\106\045\uff70\046\uff70\047\uff70\050\uff70\051" +
    "\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70\060\uff70" +
    "\061\uff70\062\uff70\063\uff70\064\uff70\065\uff70\067\uff70\070" +
    "\uff70\071\uff70\072\uff70\073\uff70\076\uff70\077\uff70\100\uff70" +
    "\101\uff70\102\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107" +
    "\uff70\110\uff70\113\uff70\120\uff70\001\002\000\104\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\051\uff82\053\uff82\054\uff82\055" +
    "\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062\uff82\063\uff82" +
    "\064\uff82\065\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073" +
    "\uff82\076\uff82\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82" +
    "\104\uff82\105\uff82\106\uff82\107\uff82\110\uff82\113\uff82\001" +
    "\002\000\106\045\uff6f\046\uff6f\047\uff6f\050\uff6f\051\uff6f" +
    "\053\uff6f\054\uff6f\055\uff6f\056\uff6f\057\uff6f\060\uff6f\061" +
    "\uff6f\062\uff6f\063\uff6f\064\uff6f\065\uff6f\067\uff6f\070\uff6f" +
    "\071\uff6f\072\uff6f\073\uff6f\076\uff6f\077\uff6f\100\uff6f\101" +
    "\uff6f\102\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f" +
    "\110\uff6f\113\uff6f\120\uff6f\001\002\000\102\045\104\046" +
    "\071\047\101\050\107\051\060\053\076\054\066\055\070" +
    "\056\102\057\114\060\064\061\103\062\067\063\061\064" +
    "\112\065\073\067\062\070\072\071\100\072\113\073\057" +
    "\076\056\077\105\100\115\101\106\102\110\103\111\104" +
    "\356\106\063\107\065\110\075\113\363\001\002\000\106" +
    "\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\053\uff71\054" +
    "\uff71\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71" +
    "\063\uff71\064\uff71\065\uff71\067\uff71\070\uff71\071\uff71\072" +
    "\uff71\073\uff71\076\uff71\077\uff71\100\uff71\101\uff71\102\uff71" +
    "\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71\113" +
    "\uff71\120\uff71\001\002\000\022\004\343\074\037\075\020" +
    "\123\352\125\350\126\342\130\345\131\346\001\002\000" +
    "\104\045\104\046\071\047\101\050\107\051\060\053\076" +
    "\054\066\055\070\056\102\057\114\060\064\061\103\062" +
    "\067\063\061\064\112\065\073\067\062\070\072\071\100" +
    "\072\113\073\057\076\056\077\105\100\115\101\106\102" +
    "\110\103\111\104\356\105\uff80\106\063\107\065\110\075" +
    "\113\uff80\001\002\000\022\004\343\074\037\075\020\123" +
    "\352\125\350\126\342\130\345\131\346\001\002\000\022" +
    "\004\343\074\037\075\020\123\352\125\350\126\342\130" +
    "\345\131\346\001\002\000\102\045\104\046\071\047\101" +
    "\050\107\051\060\053\076\054\066\055\070\056\102\057" +
    "\114\060\064\061\103\062\067\063\061\064\112\065\073" +
    "\067\062\070\072\071\100\072\113\073\057\076\056\077" +
    "\105\100\115\101\106\102\110\103\111\104\356\105\360" +
    "\106\063\107\065\110\075\001\002\000\022\004\343\074" +
    "\037\075\020\123\352\125\350\126\342\130\345\131\346" +
    "\001\002\000\104\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051" +
    "\uff7e\053\076\054\066\055\070\056\102\057\114\060\064" +
    "\061\103\062\067\063\061\064\112\065\073\067\062\070" +
    "\072\071\100\072\113\073\057\076\056\077\105\100\115" +
    "\101\106\102\110\103\111\104\uff7e\105\uff7e\106\063\107" +
    "\065\110\075\113\uff7e\001\002\000\104\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\067\062\070\072\071\100\072\113\073\057\076" +
    "\056\077\105\100\115\101\106\102\110\103\111\104\356" +
    "\105\uff7f\106\063\107\065\110\075\113\uff7f\001\002\000" +
    "\106\004\033\006\366\007\364\010\015\011\uffa9\012\370" +
    "\014\013\015\221\020\044\021\201\023\214\024\006\025" +
    "\203\026\045\030\207\031\012\036\213\042\040\044\224" +
    "\066\014\067\011\074\037\075\020\112\036\116\365\117" +
    "\uffa9\120\225\123\042\124\043\125\031\126\010\127\026" +
    "\130\007\131\034\001\002\000\022\004\343\074\037\075" +
    "\020\123\352\125\350\126\342\130\345\131\346\001\002" +
    "\000\104\004\033\006\366\007\364\010\015\012\370\014" +
    "\013\015\221\020\044\021\201\023\214\024\006\025\203" +
    "\026\045\030\207\031\012\036\213\042\040\044\224\066" +
    "\014\067\011\074\037\075\020\112\036\116\365\117\uffa9" +
    "\120\225\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\004\120\375\001\002\000\102" +
    "\004\uffd0\006\uffd0\010\uffd0\011\uffd0\014\uffd0\015\uffd0\020" +
    "\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0" +
    "\031\uffd0\036\uffd0\042\uffd0\044\uffd0\066\uffd0\067\uffd0\074" +
    "\uffd0\075\uffd0\112\uffd0\116\uffd0\117\uffd0\120\uffd0\123\uffd0" +
    "\124\uffd0\125\uffd0\126\uffd0\127\uffd0\130\uffd0\131\uffd0\001" +
    "\002\000\022\004\343\074\037\075\020\123\352\125\350" +
    "\126\342\130\345\131\346\001\002\000\102\004\uffd5\006" +
    "\uffd5\010\uffd5\011\uffd5\014\uffd5\015\uffd5\020\uffd5\021\uffd5" +
    "\023\uffd5\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\036" +
    "\uffd5\042\uffd5\044\uffd5\066\uffd5\067\uffd5\074\uffd5\075\uffd5" +
    "\112\uffd5\116\uffd5\117\uffd5\120\uffd5\123\uffd5\124\uffd5\125" +
    "\uffd5\126\uffd5\127\uffd5\130\uffd5\131\uffd5\001\002\000\102" +
    "\045\104\046\071\047\101\050\107\051\060\053\076\054" +
    "\066\055\070\056\102\057\114\060\064\061\103\062\067" +
    "\063\061\064\112\065\073\067\062\070\072\071\100\072" +
    "\113\073\057\076\056\077\105\100\115\101\106\102\110" +
    "\103\111\104\356\105\373\106\063\107\065\110\075\001" +
    "\002\000\106\004\033\006\366\007\364\010\015\011\uffa9" +
    "\012\370\014\013\015\221\020\044\021\201\023\214\024" +
    "\006\025\203\026\045\030\207\031\012\036\213\042\040" +
    "\044\224\066\014\067\011\074\037\075\020\112\036\116" +
    "\365\117\uffa9\120\225\123\042\124\043\125\031\126\010" +
    "\127\026\130\007\131\034\001\002\000\102\004\uffd2\006" +
    "\uffd2\010\uffd2\011\uffd2\014\uffd2\015\uffd2\020\uffd2\021\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\030\uffd2\031\uffd2\036" +
    "\uffd2\042\uffd2\044\uffd2\066\uffd2\067\uffd2\074\uffd2\075\uffd2" +
    "\112\uffd2\116\uffd2\117\uffd2\120\uffd2\123\uffd2\124\uffd2\125" +
    "\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\001\002\000\106" +
    "\004\033\006\366\007\364\010\015\011\uffa9\012\370\014" +
    "\013\015\221\020\044\021\201\023\214\024\006\025\203" +
    "\026\045\030\207\031\012\036\213\042\040\044\224\066" +
    "\014\067\011\074\037\075\020\112\036\116\365\117\uffa9" +
    "\120\225\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\102\004\uffd1\006\uffd1\010\uffd1" +
    "\011\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\030\uffd1\031\uffd1\036\uffd1\042\uffd1" +
    "\044\uffd1\066\uffd1\067\uffd1\074\uffd1\075\uffd1\112\uffd1\116" +
    "\uffd1\117\uffd1\120\uffd1\123\uffd1\124\uffd1\125\uffd1\126\uffd1" +
    "\127\uffd1\130\uffd1\131\uffd1\001\002\000\004\117\231\001" +
    "\002\000\004\117\u0101\001\002\000\106\004\033\006\366" +
    "\007\364\010\015\011\uffa9\012\370\014\013\015\221\020" +
    "\044\021\201\023\214\024\006\025\203\026\045\030\207" +
    "\031\012\036\213\042\040\044\224\066\014\067\011\074" +
    "\037\075\020\112\036\116\365\117\uffa9\120\225\123\042" +
    "\124\043\125\031\126\010\127\026\130\007\131\034\001" +
    "\002\000\102\004\uffd4\006\uffd4\010\uffd4\011\uffd4\014\uffd4" +
    "\015\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\030\uffd4\031\uffd4\036\uffd4\042\uffd4\044\uffd4\066\uffd4" +
    "\067\uffd4\074\uffd4\075\uffd4\112\uffd4\116\uffd4\117\uffd4\120" +
    "\uffd4\123\uffd4\124\uffd4\125\uffd4\126\uffd4\127\uffd4\130\uffd4" +
    "\131\uffd4\001\002\000\102\045\104\046\071\047\101\050" +
    "\107\051\060\053\076\054\066\055\070\056\102\057\114" +
    "\060\064\061\103\062\067\063\061\064\112\065\073\067" +
    "\062\070\072\071\100\072\113\073\057\076\056\077\105" +
    "\100\115\101\106\102\110\103\111\104\356\105\u0104\106" +
    "\063\107\065\110\075\001\002\000\106\004\033\006\366" +
    "\007\364\010\015\011\uffa9\012\370\014\013\015\221\020" +
    "\044\021\201\023\214\024\006\025\203\026\045\030\207" +
    "\031\012\036\213\042\040\044\224\066\014\067\011\074" +
    "\037\075\020\112\036\116\365\117\uffa9\120\225\123\042" +
    "\124\043\125\031\126\010\127\026\130\007\131\034\001" +
    "\002\000\102\004\uffd3\006\uffd3\010\uffd3\011\uffd3\014\uffd3" +
    "\015\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\030\uffd3\031\uffd3\036\uffd3\042\uffd3\044\uffd3\066\uffd3" +
    "\067\uffd3\074\uffd3\075\uffd3\112\uffd3\116\uffd3\117\uffd3\120" +
    "\uffd3\123\uffd3\124\uffd3\125\uffd3\126\uffd3\127\uffd3\130\uffd3" +
    "\131\uffd3\001\002\000\036\004\053\066\014\067\011\074" +
    "\037\075\020\112\036\113\u0108\123\042\124\043\125\031" +
    "\126\010\127\026\130\007\131\034\001\002\000\004\113" +
    "\u0109\001\002\000\104\045\uff6c\046\uff6c\047\uff6c\050\uff6c" +
    "\051\uff6c\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\060" +
    "\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\067\uff6c" +
    "\070\uff6c\071\uff6c\072\uff6c\073\uff6c\076\uff6c\077\uff6c\100" +
    "\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c" +
    "\107\uff6c\110\uff6c\113\uff6c\001\002\000\104\045\uff6b\046" +
    "\uff6b\047\uff6b\050\uff6b\051\uff6b\053\uff6b\054\uff6b\055\uff6b" +
    "\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064" +
    "\uff6b\065\uff6b\067\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b" +
    "\076\uff6b\077\uff6b\100\uff6b\101\uff6b\102\uff6b\103\uff6b\104" +
    "\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b\113\uff6b\001\002" +
    "\000\102\004\uffb3\006\uffb3\010\uffb3\011\uffb3\014\uffb3\015" +
    "\uffb3\020\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3" +
    "\030\uffb3\031\uffb3\036\uffb3\042\uffb3\044\uffb3\066\uffb3\067" +
    "\uffb3\074\uffb3\075\uffb3\112\uffb3\116\uffb3\117\uffb3\120\uffb3" +
    "\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3\131" +
    "\uffb3\001\002\000\102\045\104\046\071\047\101\050\107" +
    "\051\060\053\076\054\066\055\070\056\102\057\114\060" +
    "\064\061\103\062\067\063\061\064\112\065\073\067\062" +
    "\070\072\071\100\072\113\073\057\076\056\077\105\100" +
    "\115\101\106\102\110\103\111\104\077\106\063\107\065" +
    "\110\075\120\u010e\001\002\000\102\004\033\006\uffa9\010" +
    "\015\011\uffa9\014\013\015\221\020\044\021\201\023\214" +
    "\024\006\025\203\026\045\030\207\031\012\036\213\042" +
    "\040\044\224\066\014\067\011\074\037\075\020\112\036" +
    "\116\226\117\uffa9\120\225\123\042\124\043\125\031\126" +
    "\010\127\026\130\007\131\034\001\002\000\102\004\uffac" +
    "\006\uffac\010\uffac\011\uffac\014\uffac\015\uffac\020\uffac\021" +
    "\uffac\023\uffac\024\uffac\025\uffac\026\uffac\030\uffac\031\uffac" +
    "\036\uffac\042\uffac\044\uffac\066\uffac\067\uffac\074\uffac\075" +
    "\uffac\112\uffac\116\uffac\117\uffac\120\uffac\123\uffac\124\uffac" +
    "\125\uffac\126\uffac\127\uffac\130\uffac\131\uffac\001\002\000" +
    "\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015\221" +
    "\020\044\021\201\023\214\024\006\025\203\026\045\030" +
    "\207\031\012\036\213\042\040\044\224\066\014\067\011" +
    "\074\037\075\020\112\036\116\226\117\uffa9\120\225\123" +
    "\042\124\043\125\031\126\010\127\026\130\007\131\034" +
    "\001\002\000\102\004\uffad\006\uffad\010\uffad\011\uffad\014" +
    "\uffad\015\uffad\020\uffad\021\uffad\023\uffad\024\uffad\025\uffad" +
    "\026\uffad\030\uffad\031\uffad\036\uffad\042\uffad\044\uffad\066" +
    "\uffad\067\uffad\074\uffad\075\uffad\112\uffad\116\uffad\117\uffad" +
    "\120\uffad\123\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130" +
    "\uffad\131\uffad\001\002\000\060\002\uffeb\003\uffeb\004\uffeb" +
    "\010\uffeb\014\uffeb\020\uffeb\024\uffeb\025\uffeb\026\uffeb\031" +
    "\uffeb\042\uffeb\066\uffeb\067\uffeb\074\uffeb\075\uffeb\112\uffeb" +
    "\123\uffeb\124\uffeb\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131" +
    "\uffeb\001\002\000\004\117\u0112\001\002\000\062\002\uffec" +
    "\003\uffec\004\uffec\010\uffec\014\uffec\020\uffec\024\uffec\025" +
    "\uffec\026\uffec\031\uffec\042\uffec\066\uffec\067\uffec\074\uffec" +
    "\075\uffec\112\uffec\117\uffb4\123\uffec\124\uffec\125\uffec\126" +
    "\uffec\127\uffec\130\uffec\131\uffec\001\002\000\004\004\u0114" +
    "\001\002\000\004\106\u0115\001\002\000\014\123\352\125" +
    "\350\126\342\130\345\131\346\001\002\000\004\120\u0117" +
    "\001\002\000\106\002\uffa7\003\uffa7\004\uffa7\006\uffa7\010" +
    "\uffa7\011\uffa7\014\uffa7\015\uffa7\020\uffa7\021\uffa7\023\uffa7" +
    "\024\uffa7\025\uffa7\026\uffa7\030\uffa7\031\uffa7\036\uffa7\042" +
    "\uffa7\044\uffa7\066\uffa7\067\uffa7\074\uffa7\075\uffa7\112\uffa7" +
    "\116\uffa7\117\uffa7\120\uffa7\123\uffa7\124\uffa7\125\uffa7\126" +
    "\uffa7\127\uffa7\130\uffa7\131\uffa7\001\002\000\056\003\uffb8" +
    "\004\u011a\010\015\014\013\020\044\024\006\026\045\031" +
    "\012\042\040\066\014\067\011\074\037\075\020\112\036" +
    "\120\uffb8\123\042\124\043\125\031\126\010\127\026\130" +
    "\007\131\034\001\002\000\054\004\u011a\010\015\014\013" +
    "\020\044\024\006\026\045\031\012\042\040\066\014\067" +
    "\011\074\037\075\020\112\036\120\uffb8\123\042\124\043" +
    "\125\031\126\010\127\026\130\007\131\034\001\002\000" +
    "\112\003\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d" +
    "\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061" +
    "\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\067\uff7d\070\uff7d" +
    "\071\uff7d\072\uff7d\073\uff7d\074\037\075\020\076\uff7d\077" +
    "\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\106\u0128" +
    "\107\uff7d\110\uff7d\112\123\120\uff7d\001\002\000\104\003" +
    "\uffb9\045\104\046\071\047\101\050\107\051\060\053\076" +
    "\054\066\055\070\056\102\057\114\060\064\061\103\062" +
    "\067\063\061\064\112\065\073\067\062\070\072\071\100" +
    "\072\113\073\057\076\056\077\105\100\115\101\106\102" +
    "\110\103\111\104\077\106\063\107\065\110\075\120\uffb9" +
    "\001\002\000\006\003\uffbb\120\uffbb\001\002\000\004\120" +
    "\u011e\001\002\000\034\004\053\066\014\067\011\074\037" +
    "\075\020\112\036\123\042\124\043\125\031\126\010\127" +
    "\026\130\007\131\034\001\002\000\102\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\067\062\070\072\071\100\072\113\073\057\076" +
    "\056\077\105\100\115\101\106\102\110\103\111\104\077" +
    "\106\063\107\065\110\075\120\u0120\001\002\000\036\004" +
    "\u0121\066\014\067\011\074\037\075\020\112\036\113\uffb5" +
    "\123\042\124\043\125\031\126\010\127\026\130\007\131" +
    "\034\001\002\000\112\003\uff7d\045\uff7d\046\uff7d\047\uff7d" +
    "\050\uff7d\051\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057" +
    "\uff7d\060\uff7d\061\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d" +
    "\067\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\037\075" +
    "\020\076\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d" +
    "\104\uff7d\106\u0126\107\uff7d\110\uff7d\112\123\113\uff7d\001" +
    "\002\000\004\113\u0124\001\002\000\102\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\067\062\070\072\071\100\072\113\073\057\076" +
    "\056\077\105\100\115\101\106\102\110\103\111\104\077" +
    "\106\063\107\065\110\075\113\uffb6\001\002\000\102\004" +
    "\033\006\uffa9\010\015\011\uffa9\014\013\015\221\020\044" +
    "\021\201\023\214\024\006\025\203\026\045\030\207\031" +
    "\012\036\213\042\040\044\224\066\014\067\011\074\037" +
    "\075\020\112\036\116\226\117\uffa9\120\225\123\042\124" +
    "\043\125\031\126\010\127\026\130\007\131\034\001\002" +
    "\000\102\004\uffc1\006\uffc1\010\uffc1\011\uffc1\014\uffc1\015" +
    "\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\030\uffc1\031\uffc1\036\uffc1\042\uffc1\044\uffc1\066\uffc1\067" +
    "\uffc1\074\uffc1\075\uffc1\112\uffc1\116\uffc1\117\uffc1\120\uffc1" +
    "\123\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1\131" +
    "\uffc1\001\002\000\034\004\053\066\014\067\011\074\037" +
    "\075\020\112\036\123\042\124\043\125\031\126\010\127" +
    "\026\130\007\131\034\001\002\000\102\045\104\046\071" +
    "\047\101\050\107\051\060\053\076\054\066\055\070\056" +
    "\102\057\114\060\064\061\103\062\067\063\061\064\112" +
    "\065\073\067\062\070\072\071\100\072\113\073\057\076" +
    "\056\077\105\100\115\101\106\102\110\103\111\104\077" +
    "\106\063\107\065\110\075\113\uffb7\001\002\000\034\004" +
    "\053\066\014\067\011\074\037\075\020\112\036\123\042" +
    "\124\043\125\031\126\010\127\026\130\007\131\034\001" +
    "\002\000\104\003\uffba\045\104\046\071\047\101\050\107" +
    "\051\060\053\076\054\066\055\070\056\102\057\114\060" +
    "\064\061\103\062\067\063\061\064\112\065\073\067\062" +
    "\070\072\071\100\072\113\073\057\076\056\077\105\100" +
    "\115\101\106\102\110\103\111\104\077\106\063\107\065" +
    "\110\075\120\uffba\001\002\000\006\003\u012c\120\u012b\001" +
    "\002\000\036\003\u0133\004\053\066\014\067\011\074\037" +
    "\075\020\112\036\123\042\124\043\125\031\126\010\127" +
    "\026\130\007\131\034\001\002\000\034\004\053\066\014" +
    "\067\011\074\037\075\020\112\036\123\042\124\043\125" +
    "\031\126\010\127\026\130\007\131\034\001\002\000\102" +
    "\045\104\046\071\047\101\050\107\051\060\053\076\054" +
    "\066\055\070\056\102\057\114\060\064\061\103\062\067" +
    "\063\061\064\112\065\073\067\062\070\072\071\100\072" +
    "\113\073\057\076\056\077\105\100\115\101\106\102\110" +
    "\103\111\104\077\106\063\107\065\110\075\120\u012e\001" +
    "\002\000\036\004\u0121\066\014\067\011\074\037\075\020" +
    "\112\036\113\uffb5\123\042\124\043\125\031\126\010\127" +
    "\026\130\007\131\034\001\002\000\004\113\u0130\001\002" +
    "\000\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015" +
    "\221\020\044\021\201\023\214\024\006\025\203\026\045" +
    "\030\207\031\012\036\213\042\040\044\224\066\014\067" +
    "\011\074\037\075\020\112\036\116\226\117\uffa9\120\225" +
    "\123\042\124\043\125\031\126\010\127\026\130\007\131" +
    "\034\001\002\000\102\004\uffc0\006\uffc0\010\uffc0\011\uffc0" +
    "\014\uffc0\015\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\031\uffc0\036\uffc0\042\uffc0\044\uffc0" +
    "\066\uffc0\067\uffc0\074\uffc0\075\uffc0\112\uffc0\116\uffc0\117" +
    "\uffc0\120\uffc0\123\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0" +
    "\130\uffc0\131\uffc0\001\002\000\104\003\u0139\045\104\046" +
    "\071\047\101\050\107\051\060\053\076\054\066\055\070" +
    "\056\102\057\114\060\064\061\103\062\067\063\061\064" +
    "\112\065\073\067\062\070\072\071\100\072\113\073\057" +
    "\076\056\077\105\100\115\101\106\102\110\103\111\104" +
    "\077\106\063\107\065\110\075\120\u0138\001\002\000\004" +
    "\120\u0134\001\002\000\036\004\u0121\066\014\067\011\074" +
    "\037\075\020\112\036\113\uffb5\123\042\124\043\125\031" +
    "\126\010\127\026\130\007\131\034\001\002\000\004\113" +
    "\u0136\001\002\000\102\004\033\006\uffa9\010\015\011\uffa9" +
    "\014\013\015\221\020\044\021\201\023\214\024\006\025" +
    "\203\026\045\030\207\031\012\036\213\042\040\044\224" +
    "\066\014\067\011\074\037\075\020\112\036\116\226\117" +
    "\uffa9\120\225\123\042\124\043\125\031\126\010\127\026" +
    "\130\007\131\034\001\002\000\102\004\uffbf\006\uffbf\010" +
    "\uffbf\011\uffbf\014\uffbf\015\uffbf\020\uffbf\021\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\030\uffbf\031\uffbf\036\uffbf\042" +
    "\uffbf\044\uffbf\066\uffbf\067\uffbf\074\uffbf\075\uffbf\112\uffbf" +
    "\116\uffbf\117\uffbf\120\uffbf\123\uffbf\124\uffbf\125\uffbf\126" +
    "\uffbf\127\uffbf\130\uffbf\131\uffbf\001\002\000\040\003\u013f" +
    "\004\u0121\066\014\067\011\074\037\075\020\112\036\113" +
    "\uffb5\123\042\124\043\125\031\126\010\127\026\130\007" +
    "\131\034\001\002\000\036\004\u0121\066\014\067\011\074" +
    "\037\075\020\112\036\113\uffb5\123\042\124\043\125\031" +
    "\126\010\127\026\130\007\131\034\001\002\000\004\113" +
    "\u013b\001\002\000\102\004\033\006\uffa9\010\015\011\uffa9" +
    "\014\013\015\221\020\044\021\201\023\214\024\006\025" +
    "\203\026\045\030\207\031\012\036\213\042\040\044\224" +
    "\066\014\067\011\074\037\075\020\112\036\116\226\117" +
    "\uffa9\120\225\123\042\124\043\125\031\126\010\127\026" +
    "\130\007\131\034\001\002\000\102\004\uffbe\006\uffbe\010" +
    "\uffbe\011\uffbe\014\uffbe\015\uffbe\020\uffbe\021\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\036\uffbe\042" +
    "\uffbe\044\uffbe\066\uffbe\067\uffbe\074\uffbe\075\uffbe\112\uffbe" +
    "\116\uffbe\117\uffbe\120\uffbe\123\uffbe\124\uffbe\125\uffbe\126" +
    "\uffbe\127\uffbe\130\uffbe\131\uffbe\001\002\000\004\113\u0144" +
    "\001\002\000\104\003\u0142\045\104\046\071\047\101\050" +
    "\107\051\060\053\076\054\066\055\070\056\102\057\114" +
    "\060\064\061\103\062\067\063\061\064\112\065\073\067" +
    "\062\070\072\071\100\072\113\073\057\076\056\077\105" +
    "\100\115\101\106\102\110\103\111\104\077\106\063\107" +
    "\065\110\075\113\uffb6\001\002\000\004\113\u0140\001\002" +
    "\000\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015" +
    "\221\020\044\021\201\023\214\024\006\025\203\026\045" +
    "\030\207\031\012\036\213\042\040\044\224\066\014\067" +
    "\011\074\037\075\020\112\036\116\226\117\uffa9\120\225" +
    "\123\042\124\043\125\031\126\010\127\026\130\007\131" +
    "\034\001\002\000\102\004\uffbd\006\uffbd\010\uffbd\011\uffbd" +
    "\014\uffbd\015\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\030\uffbd\031\uffbd\036\uffbd\042\uffbd\044\uffbd" +
    "\066\uffbd\067\uffbd\074\uffbd\075\uffbd\112\uffbd\116\uffbd\117" +
    "\uffbd\120\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\127\uffbd" +
    "\130\uffbd\131\uffbd\001\002\000\102\004\033\006\uffa9\010" +
    "\015\011\uffa9\014\013\015\221\020\044\021\201\023\214" +
    "\024\006\025\203\026\045\030\207\031\012\036\213\042" +
    "\040\044\224\066\014\067\011\074\037\075\020\112\036" +
    "\116\226\117\uffa9\120\225\123\042\124\043\125\031\126" +
    "\010\127\026\130\007\131\034\001\002\000\102\004\uffbc" +
    "\006\uffbc\010\uffbc\011\uffbc\014\uffbc\015\uffbc\020\uffbc\021" +
    "\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\030\uffbc\031\uffbc" +
    "\036\uffbc\042\uffbc\044\uffbc\066\uffbc\067\uffbc\074\uffbc\075" +
    "\uffbc\112\uffbc\116\uffbc\117\uffbc\120\uffbc\123\uffbc\124\uffbc" +
    "\125\uffbc\126\uffbc\127\uffbc\130\uffbc\131\uffbc\001\002\000" +
    "\102\004\033\006\uffa9\010\015\011\uffa9\014\013\015\221" +
    "\020\044\021\201\023\214\024\006\025\203\026\045\030" +
    "\207\031\012\036\213\042\040\044\224\066\014\067\011" +
    "\074\037\075\020\112\036\116\226\117\uffa9\120\225\123" +
    "\042\124\043\125\031\126\010\127\026\130\007\131\034" +
    "\001\002\000\102\004\uffc3\006\uffc3\010\uffc3\011\uffc3\014" +
    "\uffc3\015\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\030\uffc3\031\uffc3\036\uffc3\042\uffc3\044\uffc3\066" +
    "\uffc3\067\uffc3\074\uffc3\075\uffc3\112\uffc3\116\uffc3\117\uffc3" +
    "\120\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130" +
    "\uffc3\131\uffc3\001\002\000\076\004\uffee\010\uffee\014\uffee" +
    "\015\uffee\020\uffee\021\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\030\uffee\031\uffee\036\uffee\042\uffee\044\uffee\066\uffee" +
    "\067\uffee\074\uffee\075\uffee\112\uffee\116\uffee\117\uffee\120" +
    "\uffee\123\uffee\124\uffee\125\uffee\126\uffee\127\uffee\130\uffee" +
    "\131\uffee\001\002\000\010\003\uff94\052\uff94\113\uff94\001" +
    "\002\000\004\113\u014a\001\002\000\076\004\ufff1\010\ufff1" +
    "\014\ufff1\015\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\030\ufff1\031\ufff1\036\ufff1\042\ufff1\044\ufff1" +
    "\066\ufff1\067\ufff1\074\ufff1\075\ufff1\112\ufff1\116\ufff1\117" +
    "\ufff1\120\ufff1\123\ufff1\124\ufff1\125\ufff1\126\ufff1\127\ufff1" +
    "\130\ufff1\131\ufff1\001\002\000\076\004\uffed\010\uffed\014" +
    "\uffed\015\uffed\020\uffed\021\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\030\uffed\031\uffed\036\uffed\042\uffed\044\uffed\066" +
    "\uffed\067\uffed\074\uffed\075\uffed\112\uffed\116\uffed\117\uffed" +
    "\120\uffed\123\uffed\124\uffed\125\uffed\126\uffed\127\uffed\130" +
    "\uffed\131\uffed\001\002\000\022\010\015\014\013\020\044" +
    "\024\006\025\167\026\045\031\012\042\040\001\002\000" +
    "\006\003\uff96\113\uff96\001\002\000\060\002\ufff8\003\ufff8" +
    "\004\ufff8\010\ufff8\014\ufff8\020\ufff8\024\ufff8\025\ufff8\026" +
    "\ufff8\031\ufff8\042\ufff8\066\ufff8\067\ufff8\074\ufff8\075\ufff8" +
    "\112\ufff8\123\ufff8\124\ufff8\125\ufff8\126\ufff8\127\ufff8\130" +
    "\ufff8\131\ufff8\001\002\000\076\004\033\010\015\014\013" +
    "\015\221\020\044\021\201\023\214\024\006\025\203\026" +
    "\045\030\207\031\012\036\213\042\040\044\224\066\014" +
    "\067\011\074\037\075\020\112\036\116\205\117\uffa9\120" +
    "\225\123\042\124\043\125\031\126\010\127\026\130\007" +
    "\131\034\001\002\000\060\002\ufff2\003\ufff2\004\ufff2\010" +
    "\ufff2\014\ufff2\020\ufff2\024\ufff2\025\ufff2\026\ufff2\031\ufff2" +
    "\042\ufff2\066\ufff2\067\ufff2\074\ufff2\075\ufff2\112\ufff2\123" +
    "\ufff2\124\ufff2\125\ufff2\126\ufff2\127\ufff2\130\ufff2\131\ufff2" +
    "\001\002\000\004\004\u0151\001\002\000\006\003\u0152\106" +
    "\u0153\001\002\000\004\120\u0165\001\002\000\016\003\u0157" +
    "\123\u0159\125\u0158\126\u0154\130\u0156\131\u0155\001\002\000" +
    "\006\003\u0163\120\uff6e\001\002\000\006\003\u0161\120\uff70" +
    "\001\002\000\006\003\u015f\120\uff6d\001\002\000\004\120" +
    "\u015e\001\002\000\006\003\u015c\120\uff6f\001\002\000\006" +
    "\003\u015a\120\uff71\001\002\000\004\120\u015b\001\002\000" +
    "\060\002\uffa4\003\uffa4\004\uffa4\010\uffa4\014\uffa4\020\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\031\uffa4\042\uffa4\066\uffa4\067" +
    "\uffa4\074\uffa4\075\uffa4\112\uffa4\123\uffa4\124\uffa4\125\uffa4" +
    "\126\uffa4\127\uffa4\130\uffa4\131\uffa4\001\002\000\004\120" +
    "\u015d\001\002\000\060\002\uffa2\003\uffa2\004\uffa2\010\uffa2" +
    "\014\uffa2\020\uffa2\024\uffa2\025\uffa2\026\uffa2\031\uffa2\042" +
    "\uffa2\066\uffa2\067\uffa2\074\uffa2\075\uffa2\112\uffa2\123\uffa2" +
    "\124\uffa2\125\uffa2\126\uffa2\127\uffa2\130\uffa2\131\uffa2\001" +
    "\002\000\060\002\uffa5\003\uffa5\004\uffa5\010\uffa5\014\uffa5" +
    "\020\uffa5\024\uffa5\025\uffa5\026\uffa5\031\uffa5\042\uffa5\066" +
    "\uffa5\067\uffa5\074\uffa5\075\uffa5\112\uffa5\123\uffa5\124\uffa5" +
    "\125\uffa5\126\uffa5\127\uffa5\130\uffa5\131\uffa5\001\002\000" +
    "\004\120\u0160\001\002\000\060\002\uffa0\003\uffa0\004\uffa0" +
    "\010\uffa0\014\uffa0\020\uffa0\024\uffa0\025\uffa0\026\uffa0\031" +
    "\uffa0\042\uffa0\066\uffa0\067\uffa0\074\uffa0\075\uffa0\112\uffa0" +
    "\123\uffa0\124\uffa0\125\uffa0\126\uffa0\127\uffa0\130\uffa0\131" +
    "\uffa0\001\002\000\004\120\u0162\001\002\000\060\002\uffa3" +
    "\003\uffa3\004\uffa3\010\uffa3\014\uffa3\020\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\031\uffa3\042\uffa3\066\uffa3\067\uffa3\074\uffa3" +
    "\075\uffa3\112\uffa3\123\uffa3\124\uffa3\125\uffa3\126\uffa3\127" +
    "\uffa3\130\uffa3\131\uffa3\001\002\000\004\120\u0164\001\002" +
    "\000\060\002\uffa1\003\uffa1\004\uffa1\010\uffa1\014\uffa1\020" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\031\uffa1\042\uffa1\066\uffa1" +
    "\067\uffa1\074\uffa1\075\uffa1\112\uffa1\123\uffa1\124\uffa1\125" +
    "\uffa1\126\uffa1\127\uffa1\130\uffa1\131\uffa1\001\002\000\060" +
    "\002\uffa6\003\uffa6\004\uffa6\010\uffa6\014\uffa6\020\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\031\uffa6\042\uffa6\066\uffa6\067\uffa6" +
    "\074\uffa6\075\uffa6\112\uffa6\123\uffa6\124\uffa6\125\uffa6\126" +
    "\uffa6\127\uffa6\130\uffa6\131\uffa6\001\002\000\004\002\uffff" +
    "\001\002\000\124\003\uff84\004\uff84\006\uff84\010\uff84\011" +
    "\uff84\014\uff84\015\uff84\020\uff84\021\uff84\023\uff84\024\uff84" +
    "\025\uff84\026\uff84\030\uff84\031\uff84\036\uff84\042\uff84\044" +
    "\uff84\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\052\uff84" +
    "\066\uff84\074\uff84\075\uff84\104\uff84\105\uff84\112\uff84\113" +
    "\uff84\116\uff84\117\uff84\120\uff84\123\uff84\124\uff84\125\uff84" +
    "\126\uff84\127\uff84\130\uff84\131\uff84\001\002\000\124\003" +
    "\uff85\004\uff85\006\uff85\010\uff85\011\uff85\014\uff85\015\uff85" +
    "\020\uff85\021\uff85\023\uff85\024\uff85\025\uff85\026\uff85\030" +
    "\uff85\031\uff85\036\uff85\042\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\052\uff85\066\uff85\074\uff85\075" +
    "\uff85\104\uff85\105\uff85\112\uff85\113\uff85\116\uff85\117\uff85" +
    "\120\uff85\123\uff85\124\uff85\125\uff85\126\uff85\127\uff85\130" +
    "\uff85\131\uff85\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0167\000\036\004\016\014\021\015\004\017\022\020" +
    "\034\022\024\023\023\024\027\031\003\032\040\034\031" +
    "\051\046\061\015\064\045\001\001\000\034\004\016\014" +
    "\021\015\u0168\017\022\020\034\022\024\023\023\024\027" +
    "\031\003\032\040\034\031\061\015\064\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\034\022\u0167\023\023\024\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\034" +
    "\022\u0166\023\023\024\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\016\014\021\015\u0165\017\022" +
    "\020\034\022\024\023\023\024\027\031\003\032\040\034" +
    "\031\061\015\064\045\001\001\000\002\001\001\000\004" +
    "\014\u014f\001\001\000\004\033\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\016\014\021\015\135\017\022\020\034" +
    "\022\024\023\023\024\027\031\003\032\040\034\031\061" +
    "\015\064\045\001\001\000\004\024\123\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\053\022\054\023" +
    "\023\024\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\016\014\021" +
    "\015\050\017\022\020\034\022\024\023\023\024\027\031" +
    "\003\032\040\034\031\061\015\064\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\123\001\001\000\002\001\001\000\004" +
    "\025\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\034\022" +
    "\120\023\023\024\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\034\022\115\023\023\024\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\073\001\001\000\012" +
    "\020\034\022\117\023\023\024\027\001\001\000\004\025" +
    "\073\001\001\000\004\025\073\001\001\000\002\001\001" +
    "\000\016\012\125\013\124\020\034\022\126\023\023\024" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\012\132\013\124\020\034\022\126" +
    "\023\023\024\027\001\001\000\002\001\001\000\012\020" +
    "\034\022\134\023\023\024\027\001\001\000\004\025\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\u014d\005\162\006\157\007" +
    "\160\014\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\002\165\005\162\006\157\007\160\014\163\001" +
    "\001\000\004\033\156\001\001\000\012\020\034\022\152" +
    "\023\023\024\027\001\001\000\004\025\073\001\001\000" +
    "\004\033\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\003\221\014\203\016\222\017\205\020" +
    "\034\022\207\023\023\024\027\032\217\034\211\035\216" +
    "\036\201\037\215\041\214\043\210\045\175\052\176\053" +
    "\174\054\177\001\001\000\004\014\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\173\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0112\001\001\000\004" +
    "\033\145\001\001\000\046\014\203\016\u0110\017\205\020" +
    "\034\022\207\023\023\024\027\032\217\034\211\035\216" +
    "\036\201\037\215\041\214\043\210\045\175\052\176\053" +
    "\174\054\177\001\001\000\002\001\001\000\012\020\034" +
    "\022\u010a\023\023\024\027\001\001\000\004\025\073\001" +
    "\001\000\002\001\001\000\046\014\203\016\u0109\017\205" +
    "\020\034\022\207\023\023\024\027\032\217\034\211\035" +
    "\216\036\201\037\215\041\214\043\210\045\175\052\176" +
    "\053\174\054\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\014\203" +
    "\016\275\017\205\020\034\022\207\023\023\024\027\032" +
    "\217\034\211\035\216\036\201\037\215\041\214\043\210" +
    "\045\175\052\176\053\174\054\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\014\203\016\226\017\205\020" +
    "\034\022\207\023\023\024\027\032\217\034\211\035\216" +
    "\036\201\037\215\041\214\043\210\045\175\052\176\053" +
    "\174\054\177\001\001\000\046\014\203\016\227\017\205" +
    "\020\034\022\207\023\023\024\027\032\217\034\211\035" +
    "\216\036\201\037\215\041\214\043\210\045\175\052\176" +
    "\053\174\054\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\034\022\252\023\023" +
    "\024\027\001\001\000\012\020\034\022\233\023\023\024" +
    "\027\001\001\000\004\025\073\001\001\000\050\014\203" +
    "\016\236\017\205\020\034\022\207\023\023\024\027\032" +
    "\217\034\211\035\216\036\201\037\215\041\214\043\210" +
    "\044\235\045\175\052\176\053\174\054\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\050\014\203\016\236\017\205\020\034\022" +
    "\207\023\023\024\027\032\217\034\211\035\216\036\201" +
    "\037\215\041\214\043\210\044\242\045\175\052\176\053" +
    "\174\054\177\001\001\000\002\001\001\000\050\014\203" +
    "\016\236\017\205\020\034\022\207\023\023\024\027\032" +
    "\217\034\211\035\216\036\201\037\215\041\214\043\210" +
    "\044\244\045\175\052\176\053\174\054\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\014\203\016\236\017\205\020\034\022\207\023\023\024" +
    "\027\032\217\034\211\035\216\036\201\037\215\041\214" +
    "\043\210\044\250\045\175\052\176\053\174\054\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\014" +
    "\203\016\236\017\205\020\034\022\207\023\023\024\027" +
    "\032\217\034\211\035\216\036\201\037\215\041\214\043" +
    "\210\044\256\045\175\052\176\053\174\054\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\014\203\016\236\017\205\020\034" +
    "\022\207\023\023\024\027\032\217\034\211\035\216\036" +
    "\201\037\215\041\214\043\210\044\263\045\175\052\176" +
    "\053\174\054\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\014\203\016\236\017\205\020\034\022\207" +
    "\023\023\024\027\032\217\034\211\035\216\036\201\037" +
    "\215\041\214\043\210\044\266\045\175\052\176\053\174" +
    "\054\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\014\203\016\272\017\205\020\034" +
    "\022\207\023\023\024\027\032\217\034\211\035\216\036" +
    "\201\037\215\041\214\043\210\045\175\052\176\053\174" +
    "\054\177\001\001\000\002\001\001\000\046\014\203\016" +
    "\274\017\205\020\034\022\207\023\023\024\027\032\217" +
    "\034\211\035\216\036\201\037\215\041\214\043\210\045" +
    "\175\052\176\053\174\054\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\034\022\322\023\023\024" +
    "\027\001\001\000\046\014\203\016\301\017\205\020\034" +
    "\022\300\023\023\024\027\032\217\034\211\035\216\036" +
    "\201\037\215\041\214\043\210\045\175\052\176\053\174" +
    "\054\177\001\001\000\004\025\073\001\001\000\050\014" +
    "\203\016\305\017\303\020\034\022\207\023\023\024\027" +
    "\032\217\034\211\035\216\036\201\037\215\040\302\041" +
    "\214\043\210\045\175\052\176\053\174\054\177\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\014\203\016" +
    "\307\017\306\020\034\022\207\023\023\024\027\032\217" +
    "\034\211\035\216\036\201\037\215\041\214\043\210\045" +
    "\175\052\176\053\174\054\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\014\203\016" +
    "\311\017\205\020\034\022\207\023\023\024\027\032\217" +
    "\034\211\035\216\036\201\037\215\041\214\043\210\045" +
    "\175\052\176\053\174\054\177\001\001\000\002\001\001" +
    "\000\046\014\203\016\321\017\205\020\034\022\207\023" +
    "\023\024\027\032\217\034\211\035\216\036\201\037\215" +
    "\041\214\043\210\045\175\052\176\053\174\054\177\001" +
    "\001\000\002\001\001\000\046\014\203\016\315\017\205" +
    "\020\034\022\207\023\023\024\027\032\217\034\211\035" +
    "\216\036\201\037\215\041\214\043\210\045\175\052\176" +
    "\053\174\054\177\001\001\000\050\014\203\016\305\017" +
    "\303\020\034\022\207\023\023\024\027\032\217\034\211" +
    "\035\216\036\201\037\215\040\316\041\214\043\210\045" +
    "\175\052\176\053\174\054\177\001\001\000\002\001\001" +
    "\000\046\014\203\016\320\017\205\020\034\022\207\023" +
    "\023\024\027\032\217\034\211\035\216\036\201\037\215" +
    "\041\214\043\210\045\175\052\176\053\174\054\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\073" +
    "\001\001\000\002\001\001\000\046\014\203\016\325\017" +
    "\205\020\034\022\207\023\023\024\027\032\217\034\211" +
    "\035\216\036\201\037\215\041\214\043\210\045\175\052" +
    "\176\053\174\054\177\001\001\000\050\014\203\016\305" +
    "\017\303\020\034\022\207\023\023\024\027\032\217\034" +
    "\211\035\216\036\201\037\215\040\326\041\214\043\210" +
    "\045\175\052\176\053\174\054\177\001\001\000\002\001" +
    "\001\000\046\014\203\016\336\017\205\020\034\022\207" +
    "\023\023\024\027\032\217\034\211\035\216\036\201\037" +
    "\215\041\214\043\210\045\175\052\176\053\174\054\177" +
    "\001\001\000\046\014\203\016\332\017\205\020\034\022" +
    "\207\023\023\024\027\032\217\034\211\035\216\036\201" +
    "\037\215\041\214\043\210\045\175\052\176\053\174\054" +
    "\177\001\001\000\046\014\203\016\334\017\205\020\034" +
    "\022\207\023\023\024\027\032\217\034\211\035\216\036" +
    "\201\037\215\041\214\043\210\045\175\052\176\053\174" +
    "\054\177\001\001\000\050\014\203\016\305\017\303\020" +
    "\034\022\207\023\023\024\027\032\217\034\211\035\216" +
    "\036\201\037\215\040\333\041\214\043\210\045\175\052" +
    "\176\053\174\054\177\001\001\000\002\001\001\000\050" +
    "\014\203\016\305\017\303\020\034\022\207\023\023\024" +
    "\027\032\217\034\211\035\216\036\201\037\215\040\335" +
    "\041\214\043\210\045\175\052\176\053\174\054\177\001" +
    "\001\000\002\001\001\000\050\014\203\016\305\017\303" +
    "\020\034\022\207\023\023\024\027\032\217\034\211\035" +
    "\216\036\201\037\215\040\337\041\214\043\210\045\175" +
    "\052\176\053\174\054\177\001\001\000\002\001\001\000" +
    "\012\021\350\024\352\026\346\030\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\354\001\001\000\002\001\001\000\012\021" +
    "\353\024\352\026\346\030\343\001\001\000\004\025\354" +
    "\001\001\000\012\021\361\024\352\026\346\030\343\001" +
    "\001\000\012\021\356\024\352\026\346\030\343\001\001" +
    "\000\004\025\354\001\001\000\012\021\360\024\352\026" +
    "\346\030\343\001\001\000\004\025\354\001\001\000\004" +
    "\025\354\001\001\000\050\014\203\016\366\017\205\020" +
    "\034\022\207\023\023\024\027\032\217\034\211\035\216" +
    "\036\201\037\215\041\214\042\370\043\210\045\175\052" +
    "\176\053\174\054\177\001\001\000\012\021\u0102\024\352" +
    "\026\346\030\343\001\001\000\050\014\203\016\376\017" +
    "\205\020\034\022\207\023\023\024\027\032\217\034\211" +
    "\035\216\036\201\037\215\041\214\042\377\043\210\045" +
    "\175\052\176\053\174\054\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\021\371\024\352\026\346\030" +
    "\343\001\001\000\002\001\001\000\004\025\354\001\001" +
    "\000\050\014\203\016\366\017\205\020\034\022\207\023" +
    "\023\024\027\032\217\034\211\035\216\036\201\037\215" +
    "\041\214\042\373\043\210\045\175\052\176\053\174\054" +
    "\177\001\001\000\002\001\001\000\050\014\203\016\366" +
    "\017\205\020\034\022\207\023\023\024\027\032\217\034" +
    "\211\035\216\036\201\037\215\041\214\042\375\043\210" +
    "\045\175\052\176\053\174\054\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\014\203" +
    "\016\366\017\205\020\034\022\207\023\023\024\027\032" +
    "\217\034\211\035\216\036\201\037\215\041\214\042\u0101" +
    "\043\210\045\175\052\176\053\174\054\177\001\001\000" +
    "\002\001\001\000\004\025\354\001\001\000\050\014\203" +
    "\016\366\017\205\020\034\022\207\023\023\024\027\032" +
    "\217\034\211\035\216\036\201\037\215\041\214\042\u0104" +
    "\043\210\045\175\052\176\053\174\054\177\001\001\000" +
    "\002\001\001\000\016\012\u0106\013\124\020\034\022\126" +
    "\023\023\024\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\073" +
    "\001\001\000\046\014\203\016\u010c\017\205\020\034\022" +
    "\207\023\023\024\027\032\217\034\211\035\216\036\201" +
    "\037\215\041\214\043\210\045\175\052\176\053\174\054" +
    "\177\001\001\000\002\001\001\000\046\014\203\016\u010e" +
    "\017\205\020\034\022\207\023\023\024\027\032\217\034" +
    "\211\035\216\036\201\037\215\041\214\043\210\045\175" +
    "\052\176\053\174\054\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u0115\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\014\203\020\034" +
    "\022\u011a\023\023\024\027\032\u011b\046\u0129\001\001\000" +
    "\020\014\203\020\034\022\u011a\023\023\024\027\032\u011b" +
    "\046\u011c\001\001\000\004\024\123\001\001\000\004\025" +
    "\073\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\034\022\u011e\023\023\024\027\001\001\000\004\025" +
    "\073\001\001\000\014\020\034\022\u0122\023\023\024\027" +
    "\047\u0121\001\001\000\004\024\123\001\001\000\002\001" +
    "\001\000\004\025\073\001\001\000\046\014\203\016\u0124" +
    "\017\205\020\034\022\207\023\023\024\027\032\217\034" +
    "\211\035\216\036\201\037\215\041\214\043\210\045\175" +
    "\052\176\053\174\054\177\001\001\000\002\001\001\000" +
    "\012\020\034\022\u0126\023\023\024\027\001\001\000\004" +
    "\025\073\001\001\000\012\020\034\022\u0128\023\023\024" +
    "\027\001\001\000\004\025\073\001\001\000\002\001\001" +
    "\000\012\020\034\022\u0131\023\023\024\027\001\001\000" +
    "\012\020\034\022\u012c\023\023\024\027\001\001\000\004" +
    "\025\073\001\001\000\014\020\034\022\u0122\023\023\024" +
    "\027\047\u012e\001\001\000\002\001\001\000\046\014\203" +
    "\016\u0130\017\205\020\034\022\207\023\023\024\027\032" +
    "\217\034\211\035\216\036\201\037\215\041\214\043\210" +
    "\045\175\052\176\053\174\054\177\001\001\000\002\001" +
    "\001\000\004\025\073\001\001\000\002\001\001\000\014" +
    "\020\034\022\u0122\023\023\024\027\047\u0134\001\001\000" +
    "\002\001\001\000\046\014\203\016\u0136\017\205\020\034" +
    "\022\207\023\023\024\027\032\217\034\211\035\216\036" +
    "\201\037\215\041\214\043\210\045\175\052\176\053\174" +
    "\054\177\001\001\000\002\001\001\000\014\020\034\022" +
    "\u013d\023\023\024\027\047\u013c\001\001\000\014\020\034" +
    "\022\u0122\023\023\024\027\047\u0139\001\001\000\002\001" +
    "\001\000\046\014\203\016\u013b\017\205\020\034\022\207" +
    "\023\023\024\027\032\217\034\211\035\216\036\201\037" +
    "\215\041\214\043\210\045\175\052\176\053\174\054\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\073\001\001\000\002\001\001\000\046\014\203\016\u0140" +
    "\017\205\020\034\022\207\023\023\024\027\032\217\034" +
    "\211\035\216\036\201\037\215\041\214\043\210\045\175" +
    "\052\176\053\174\054\177\001\001\000\002\001\001\000" +
    "\046\014\203\016\u0142\017\205\020\034\022\207\023\023" +
    "\024\027\032\217\034\211\035\216\036\201\037\215\041" +
    "\214\043\210\045\175\052\176\053\174\054\177\001\001" +
    "\000\002\001\001\000\046\014\203\016\u0144\017\205\020" +
    "\034\022\207\023\023\024\027\032\217\034\211\035\216" +
    "\036\201\037\215\041\214\043\210\045\175\052\176\053" +
    "\174\054\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\u014b\006\157\014\163\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\003\u014e\014" +
    "\203\016\222\017\205\020\034\022\207\023\023\024\027" +
    "\032\217\034\211\035\216\036\201\037\215\041\214\043" +
    "\210\045\175\052\176\053\174\054\177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\073\001\001\000\004" +
    "\025\073\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }



    CLexer s;
    Analyzer a;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message + " at line:" + s.getCurrentLine(), null));
        }
    }

    public void syntax_error(Symbol cur_token) 
    {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token) 
    {
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ProgramDefinition start_val = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              ProgramDefinition RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      RESULT = pd;
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              ProgramDefinition RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		FunctionDefinition fd = (FunctionDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      pd.addFunction(fd);
      RESULT = pd;  
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              ProgramDefinition RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		GlobalVarDefinition g = (GlobalVarDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      pd.addGlobalVar(g);
      RESULT = pd;  
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= constant program_definition 
            {
              ProgramDefinition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      RESULT = pd;  
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_definition ::= error_program_definition program_definition 
            {
              ProgramDefinition RESULT =null;
		int e_p_dleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int e_p_dright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e_p_d = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ProgramDefinition pd = (ProgramDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      System.out.println("$Error program definition, line 213. ");
      RESULT = pd;
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_definition ::= 
            {
              ProgramDefinition RESULT =null;
		
      RESULT = new ProgramDefinition();
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // error_program_definition ::= keyword_types OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int kw_typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int kw_typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ITypeToken kw_type = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Must give a name for a global variable", "Global variable", kw_type);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // error_program_definition ::= instruction OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Instruction out of place", "Global variable", instr);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // error_program_definition ::= keyword_types error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // error_program_definition ::= error_constant 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // error_program_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISLEFT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",50, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              FunctionDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<ParamDefinition> params = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> body = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        FunctionDefinition function = new FunctionDefinition(kt, i, params, body);

        RESULT = function;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_declaration ::= keyword_types error function_declaration_0 function_declaration_1 
            {
              FunctionDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<ParamDefinition> params = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> body = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      parser.generateSyntaxError("Syntax error function declaration must give a name or missing parenthesis", "Function", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              LinkedList<ParamDefinition> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<ParamDefinition> pd = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        RESULT = pd; 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              LinkedList<ParamDefinition> RESULT =null;
		 
      LinkedList<ParamDefinition> emptyParams = new LinkedList<>();
      RESULT = emptyParams;
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_declaration_0 ::= error_function_declaration_0 
            {
              LinkedList<ParamDefinition> RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // error_function_declaration_0 ::= error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error function declaration UNKNOWN TYPE 1", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration_0",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // error_function_declaration_0 ::= parameters_definition error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error function declaration some code in parameters", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration_0",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // function_declaration_1 ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        RESULT = gb;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // function_declaration_1 ::= OP_WRAPPERKEYPARENTHESISLEFT error 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
      parser.generateSyntaxError("Right parenthesis missing", "Fuction declaration", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // function_declaration_1 ::= gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		
      parser.generateSyntaxError("Left parenthesis missing", "Fuction declaration", null);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // error_function_declaration ::= error IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		IdentifierToken fn = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Type function missing", "int, float,...", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // error_function_declaration ::= keyword_types error OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Function identifier missing", "getSalary", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // error_function_declaration ::= keyword_types IDENT error function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // error_function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Error parameters declaration", "int a, float b", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // control_structure ::= control_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // control_structure ::= control_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // control_structure ::= control_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // control_structure ::= control_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // control_if ::= control_if_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // control_if ::= error_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // control_else ::= KW_ELSE gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // control_else ::= KW_ELSE instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // control_else ::= instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // control_else ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // error_if ::= KW_IF error expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("IF: Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("IF: Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Right parenthesis missing", ")", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // error_if ::= KW_IF error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Some code between if and conditional expression", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT error gramatic_body control_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Syntax error, illegal code inside of the if", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // control_switch_case ::= OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // control_switch_case ::= KW_CASE expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // control_switch_case ::= KW_DEFAULT expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // control_switch_case ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control_switch_case ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // error_switch ::= KW_SWITCH error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Numeric expresion expected", "expression", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // control_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // control_while ::= error_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // control_while_body ::= gramatic_body KW_BREAK OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control_while_body ::= gramatic_body KW_CONTINUE OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control_while_body ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // error_while ::= KW_WHILE error expression OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		
        parser.generateSyntaxError("Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression error OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // error_while ::= KW_WHILE error OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Some code between while and conditional expression", "While", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // control_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // control_for ::= error_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // error_for ::= KW_FOR error control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-7)).value;
		 
        parser.generateSyntaxError("FOR: Left parenthesis missing", "(", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction error expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR error OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("FOR: Conditional expression missing", "a<b", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression error control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR error OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		 
        parser.generateSyntaxError("FOR: Incremental o decremental instruction expected", "a++", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR expression error gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        parser.generateSyntaxError("FOR: Right parenthesis missing", ")", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // control_for_instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // control_for_instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // control_for_instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // control_for_instruction ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // control_for_instruction1 ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // control_for_instruction1 ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // control_for_instruction1 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramatic_body ::= constant gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramatic_body ::= OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // gramatic_body ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		VarDefinition var = (VarDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          gb.addLast(var);
          RESULT = gb;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // gramatic_body ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // gramatic_body ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // gramatic_body ::= control_structure gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // gramatic_body ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // gramatic_body ::= KW_RETURN OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // gramatic_body ::= KW_ELSE error gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int gbleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int gbright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<IGramaticInstruction> gb = (LinkedList<IGramaticInstruction>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // gramatic_body ::= expression error OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		  System.out.println("\n$Error gramatic body, line 506. \n");
            parser.generateSyntaxError("Error in gramatic body at expression, unknown error", "Gramatic Body", e);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // gramatic_body ::= 
            {
              LinkedList<IGramaticInstruction> RESULT =null;
		
        LinkedList<IGramaticInstruction> gramaticBody = new LinkedList<>();
        RESULT = gramaticBody;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              GlobalVarDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		VarDefinition v = (VarDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        GlobalVarDefinition gvd = new GlobalVarDefinition(v);
        RESULT = gvd;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // error_constant ::= KW_CONST keyword_types IDENT error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be defined as literal", "=", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be asigned with literal", "literal", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_HEXVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_DECIMALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_CHARVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_OCTALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_EXPONENTIALDEF error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // variable ::= keyword_types variable_definition 
            {
              VarDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<AssignDefinition> vd = (LinkedList<AssignDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        VarDefinition gv = new VarDefinition(kt, vd);
        RESULT = gv;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // variable_definition ::= IDENT 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
        AssignDefinition ad = new AssignDefinition(i, null);
        LinkedList<AssignDefinition> adl = new LinkedList<>();
        adl.addLast(ad);
        RESULT = adl;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_definition ::= IDENT OP_ASIG expression 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          AssignDefinition ad = new AssignDefinition(i, e);
          LinkedList<AssignDefinition> adl = new LinkedList<>();
          adl.addLast(ad);
          RESULT = adl;
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<AssignDefinition> vd = (LinkedList<AssignDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          vd.addLast(new AssignDefinition(i, null));  
          RESULT = vd; 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              LinkedList<AssignDefinition> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		IdentifierToken i = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<AssignDefinition> vd = (LinkedList<AssignDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          vd.addLast(new AssignDefinition(i, e)); 
          RESULT = vd; 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // error_variable_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_variable_definition",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              LinkedList<ParamDefinition> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		ParamDefinition pd = (ParamDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LinkedList<ParamDefinition> params = (LinkedList<ParamDefinition>)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          params.addLast(pd);
          RESULT = params;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // parameters_definition ::= parameter_definition 
            {
              LinkedList<ParamDefinition> RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		ParamDefinition pd = (ParamDefinition)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          LinkedList<ParamDefinition> params = new LinkedList<>();
          params.addLast(pd);
          RESULT = params;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // parameter_definition ::= keyword_types IDENT 
            {
              ParamDefinition RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IdentifierToken id = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 
          ParamDefinition pd = new ParamDefinition(kt, id);

          RESULT = pd;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic 
            {
              ParamDefinition RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		KeywordToken c = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		ITypeToken kt = (ITypeToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken id = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression ea = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
          ConstTypeToken ctt = new ConstTypeToken(c, kt, ea);
          ParamDefinition pd = new ParamDefinition(ctt, id);

          RESULT = pd;
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // error_parameter ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // error_parameter ::= KW_CONST error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Const params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // error_parameter ::= IDENT error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		IdentifierToken id = (IdentifierToken)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_any_type OP_WRAPPERPARENTHESISRIGHT 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 RESULT = e; 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression ::= expression_any_type 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_any_type ::= expression_atomic 
            {
              IExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		IExpression e = (IExpression)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = e; 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_any_type ::= expression_unary_operator IDENT 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_any_type ::= IDENT expression_unary_operator 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_any_type ::= expression expression_binary_operators expression 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_any_type ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_any_type ::= OP_NEGATION expression 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_any_type ::= OP_NOT expression 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_numeric ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression_numeric ::= expression_atomic_literal_int 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_numeric ::= expression_atomic_call_functions_anytype 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_numeric ::= expression_unary_operator expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_numeric ::= expression_numeric expression_binary_operators expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_numeric ::= expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_atomic ::= IDENT 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_atomic ::= LIT_HEXVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              IExpression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		LiteralToken l = (LiteralToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new LiteralDecimalExpression(l); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_atomic ::= LIT_FLOATVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_atomic ::= LIT_CHARVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_atomic ::= LIT_OCTALVALUE 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression_atomic ::= LIT_STRINGDEF 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              IExpression RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expression_binary_operators ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // expression_binary_operators ::= OP_ORASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // keyword_types ::= KW_INT 
            {
              ITypeToken RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		KeywordToken i = (KeywordToken)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		 RESULT = new IntTypeToken(i); 
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // keyword_types ::= KW_CHAR 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // keyword_types ::= KW_LONG 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // keyword_types ::= KW_SHORT 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // keyword_types ::= KW_VOID 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // keyword_types ::= KW_FLOAT 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // keyword_types ::= KW_DOUBLE 
            {
              ITypeToken RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
