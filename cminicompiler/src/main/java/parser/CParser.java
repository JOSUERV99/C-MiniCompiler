
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.CLexer;
import handler.Analyzer;
import model.Token;
import errors.SyntaxError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\225\000\002\002\004\000\002\047\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\002\000\002\004\007" +
    "\000\002\002\004\000\002\002\003\000\002\003\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\010\000\002\036\004\000\002\036\004\000\002\036\003" +
    "\000\002\036\003\000\002\052\002\000\002\050\006\000" +
    "\002\053\002\000\002\050\007\000\002\054\002\000\002" +
    "\050\010\000\002\037\007\000\002\040\006\000\002\040" +
    "\006\000\002\040\006\000\002\040\005\000\002\040\003" +
    "\000\002\041\007\000\002\041\003\000\002\042\005\000" +
    "\002\042\003\000\002\055\002\000\002\051\006\000\002" +
    "\056\002\000\002\051\007\000\002\057\002\000\002\051" +
    "\010\000\002\043\013\000\002\044\003\000\002\044\005" +
    "\000\002\044\003\000\002\044\002\000\002\045\005\000" +
    "\002\045\003\000\002\045\002\000\002\013\005\000\002" +
    "\013\004\000\002\013\004\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\004\000\002\013\006" +
    "\000\002\013\002\000\002\027\004\000\002\030\010\000" +
    "\002\031\004\000\002\032\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\007\000\002\006\005\000\002\006" +
    "\003\000\002\007\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\004\000\002\011\005\000\002\011\007\000" +
    "\002\014\005\000\002\014\003\000\002\014\003\000\002" +
    "\015\005\000\002\015\003\000\002\016\003\000\002\016" +
    "\004\000\002\016\004\000\002\016\005\000\002\016\007" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\004\000\002\017\005\000\002\017\007\000\002" +
    "\021\003\000\002\021\006\000\002\021\005\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\025\003\000\002\025\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\026\005\000\002\026\006\000\002\022\003" +
    "\000\002\022\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\022\002\ufffd\010\006\015\020\021\016\025" +
    "\015\026\010\031\017\042\013\001\002\000\004\002\000" +
    "\001\002\000\022\002\ufffd\010\006\015\020\021\016\025" +
    "\015\026\010\031\017\042\013\001\002\000\004\004\uff72" +
    "\001\002\000\022\002\ufffd\010\006\015\020\021\016\025" +
    "\015\026\010\031\017\042\013\001\002\000\004\004\uff71" +
    "\001\002\000\004\120\365\001\002\000\004\002\364\001" +
    "\002\000\004\004\uff6f\001\002\000\004\004\022\001\002" +
    "\000\004\004\uff73\001\002\000\004\004\uff6e\001\002\000" +
    "\004\004\uff70\001\002\000\004\004\uff6d\001\002\000\074" +
    "\002\uffc4\004\uffc4\010\uffc4\011\uffc4\015\uffc4\016\uffc4\021" +
    "\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4\030\uffc4\031\uffc4" +
    "\036\uffc4\042\uffc4\044\uffc4\074\uffc4\075\uffc4\112\uffc4\116" +
    "\uffc4\117\uffc4\120\uffc4\123\uffc4\124\uffc4\125\uffc4\126\uffc4" +
    "\127\uffc4\130\uffc4\131\uffc4\001\002\000\012\052\024\106" +
    "\025\112\023\120\uffc3\001\002\000\024\010\006\011\140" +
    "\015\020\021\016\025\015\026\010\031\017\042\013\113" +
    "\135\001\002\000\004\004\120\001\002\000\030\004\027" +
    "\074\032\075\026\112\043\123\041\124\033\125\040\126" +
    "\034\127\030\130\035\131\031\001\002\000\204\002\uff93" +
    "\003\uff93\004\uff93\010\uff93\011\uff93\015\uff93\016\uff93\021" +
    "\uff93\022\uff93\024\uff93\025\uff93\026\uff93\030\uff93\031\uff93" +
    "\036\uff93\042\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\052\uff93\053\uff93\054\uff93\055\uff93\056\uff93" +
    "\057\uff93\060\uff93\061\uff93\062\uff93\063\uff93\064\uff93\065" +
    "\uff93\066\uff93\067\uff93\070\uff93\071\uff93\072\uff93\073\uff93" +
    "\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\101\uff93\102" +
    "\uff93\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110\uff93" +
    "\112\uff93\113\uff93\116\uff93\117\uff93\120\uff93\123\uff93\124" +
    "\uff93\125\uff93\126\uff93\127\uff93\130\uff93\131\uff93\001\002" +
    "\000\204\002\uffa7\003\uffa7\004\uffa7\010\uffa7\011\uffa7\015" +
    "\uffa7\016\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7" +
    "\030\uffa7\031\uffa7\036\uffa7\042\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7" +
    "\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063" +
    "\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7" +
    "\072\uffa7\073\uffa7\074\032\075\026\076\uffa7\077\uffa7\100" +
    "\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105\uffa7\106\uffa7" +
    "\107\uffa7\110\uffa7\112\121\113\uffa7\116\uffa7\117\uffa7\120" +
    "\uffa7\123\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7\130\uffa7" +
    "\131\uffa7\001\002\000\204\002\uffa0\003\uffa0\004\uffa0\010" +
    "\uffa0\011\uffa0\015\uffa0\016\uffa0\021\uffa0\022\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\030\uffa0\031\uffa0\036\uffa0\042\uffa0\044" +
    "\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061" +
    "\uffa0\062\uffa0\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0" +
    "\070\uffa0\071\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076" +
    "\uffa0\077\uffa0\100\uffa0\101\uffa0\102\uffa0\103\uffa0\104\uffa0" +
    "\105\uffa0\106\uffa0\107\uffa0\110\uffa0\112\uffa0\113\uffa0\116" +
    "\uffa0\117\uffa0\120\uffa0\123\uffa0\124\uffa0\125\uffa0\126\uffa0" +
    "\127\uffa0\130\uffa0\131\uffa0\001\002\000\204\002\uff9e\003" +
    "\uff9e\004\uff9e\010\uff9e\011\uff9e\015\uff9e\016\uff9e\021\uff9e" +
    "\022\uff9e\024\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e\036" +
    "\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057" +
    "\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065\uff9e" +
    "\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e\074" +
    "\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e" +
    "\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e\112" +
    "\uff9e\113\uff9e\116\uff9e\117\uff9e\120\uff9e\123\uff9e\124\uff9e" +
    "\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\001\002\000" +
    "\204\002\uff94\003\uff94\004\uff94\010\uff94\011\uff94\015\uff94" +
    "\016\uff94\021\uff94\022\uff94\024\uff94\025\uff94\026\uff94\030" +
    "\uff94\031\uff94\036\uff94\042\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\055" +
    "\uff94\056\uff94\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94" +
    "\064\uff94\065\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072" +
    "\uff94\073\uff94\074\uff94\075\uff94\076\uff94\077\uff94\100\uff94" +
    "\101\uff94\102\uff94\103\uff94\104\uff94\105\uff94\106\uff94\107" +
    "\uff94\110\uff94\112\uff94\113\uff94\116\uff94\117\uff94\120\uff94" +
    "\123\uff94\124\uff94\125\uff94\126\uff94\127\uff94\130\uff94\131" +
    "\uff94\001\002\000\204\002\uffa3\003\uffa3\004\uffa3\010\uffa3" +
    "\011\uffa3\015\uffa3\016\uffa3\021\uffa3\022\uffa3\024\uffa3\025" +
    "\uffa3\026\uffa3\030\uffa3\031\uffa3\036\uffa3\042\uffa3\044\uffa3" +
    "\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053" +
    "\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3" +
    "\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070" +
    "\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\076\uffa3" +
    "\077\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3\105" +
    "\uffa3\106\uffa3\107\uffa3\110\uffa3\112\uffa3\113\uffa3\116\uffa3" +
    "\117\uffa3\120\uffa3\123\uffa3\124\uffa3\125\uffa3\126\uffa3\127" +
    "\uffa3\130\uffa3\131\uffa3\001\002\000\204\002\uffa1\003\uffa1" +
    "\004\uffa1\010\uffa1\011\uffa1\015\uffa1\016\uffa1\021\uffa1\022" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\030\uffa1\031\uffa1\036\uffa1" +
    "\042\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1" +
    "\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1\066" +
    "\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074\uffa1" +
    "\075\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1\103" +
    "\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\112\uffa1" +
    "\113\uffa1\116\uffa1\117\uffa1\120\uffa1\123\uffa1\124\uffa1\125" +
    "\uffa1\126\uffa1\127\uffa1\130\uffa1\131\uffa1\001\002\000\204" +
    "\002\uff9f\003\uff9f\004\uff9f\010\uff9f\011\uff9f\015\uff9f\016" +
    "\uff9f\021\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\030\uff9f" +
    "\031\uff9f\036\uff9f\042\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\100\uff9f\101" +
    "\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f" +
    "\110\uff9f\112\uff9f\113\uff9f\116\uff9f\117\uff9f\120\uff9f\123" +
    "\uff9f\124\uff9f\125\uff9f\126\uff9f\127\uff9f\130\uff9f\131\uff9f" +
    "\001\002\000\204\002\uffb3\003\uffb3\004\uffb3\010\uffb3\011" +
    "\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\030\uffb3\031\uffb3\036\uffb3\042\uffb3\044\uffb3\045" +
    "\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3" +
    "\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\105\uffb3" +
    "\106\uffb3\107\uffb3\110\uffb3\112\uffb3\113\uffb3\116\uffb3\117" +
    "\uffb3\120\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3" +
    "\130\uffb3\131\uffb3\001\002\000\204\002\uffb2\003\uffb2\004" +
    "\uffb2\010\uffb2\011\uffb2\015\uffb2\016\uffb2\021\uffb2\022\uffb2" +
    "\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\036\uffb2\042" +
    "\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\052\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2\075" +
    "\uffb2\076\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103\uffb2" +
    "\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\112\uffb2\113" +
    "\uffb2\116\uffb2\117\uffb2\120\uffb2\123\uffb2\124\uffb2\125\uffb2" +
    "\126\uffb2\127\uffb2\130\uffb2\131\uffb2\001\002\000\204\002" +
    "\uffa2\003\uffa2\004\uffa2\010\uffa2\011\uffa2\015\uffa2\016\uffa2" +
    "\021\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2\031" +
    "\uffa2\036\uffa2\042\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2" +
    "\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056" +
    "\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2" +
    "\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073" +
    "\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\100\uffa2\101\uffa2" +
    "\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\110" +
    "\uffa2\112\uffa2\113\uffa2\116\uffa2\117\uffa2\120\uffa2\123\uffa2" +
    "\124\uffa2\125\uffa2\126\uffa2\127\uffa2\130\uffa2\131\uffa2\001" +
    "\002\000\204\002\uffa4\003\uffa4\004\uffa4\010\uffa4\011\uffa4" +
    "\015\uffa4\016\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\026" +
    "\uffa4\030\uffa4\031\uffa4\036\uffa4\042\uffa4\044\uffa4\045\uffa4" +
    "\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\065\uffa4\066\uffa4\067\uffa4\070\uffa4\071" +
    "\uffa4\072\uffa4\073\uffa4\074\uffa4\075\uffa4\076\uffa4\077\uffa4" +
    "\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105\uffa4\106" +
    "\uffa4\107\uffa4\110\uffa4\112\uffa4\113\uffa4\116\uffa4\117\uffa4" +
    "\120\uffa4\123\uffa4\124\uffa4\125\uffa4\126\uffa4\127\uffa4\130" +
    "\uffa4\131\uffa4\001\002\000\176\002\uffc2\004\uffc2\010\uffc2" +
    "\011\uffc2\015\uffc2\016\uffc2\021\uffc2\022\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\030\uffc2\031\uffc2\036\uffc2\042\uffc2\044\uffc2" +
    "\045\077\046\064\047\074\050\102\051\052\052\116\053" +
    "\071\054\060\055\062\056\075\057\107\060\056\061\076" +
    "\062\061\063\053\064\105\065\065\066\063\067\054\070" +
    "\066\071\073\072\106\073\051\074\uffc2\075\uffc2\076\050" +
    "\077\100\100\110\101\101\102\104\103\103\104\072\106" +
    "\055\107\057\110\070\112\uffc2\116\uffc2\117\uffc2\120\uffc2" +
    "\123\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131" +
    "\uffc2\001\002\000\030\004\027\074\032\075\026\112\043" +
    "\123\041\124\033\125\040\126\034\127\030\130\035\131" +
    "\031\001\002\000\004\004\045\001\002\000\204\002\uffb1" +
    "\003\uffb1\004\uffb1\010\uffb1\011\uffb1\015\uffb1\016\uffb1\021" +
    "\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\030\uffb1\031\uffb1" +
    "\036\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064\uffb1\065" +
    "\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100\uffb1\101\uffb1\102" +
    "\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107\uffb1\110\uffb1" +
    "\112\uffb1\113\uffb1\116\uffb1\117\uffb1\120\uffb1\123\uffb1\124" +
    "\uffb1\125\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001\002" +
    "\000\104\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3" +
    "\062\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\076\uffb3\077\uffb3\100\uffb3" +
    "\101\uffb3\102\uffb3\103\uffb3\104\uffb3\106\uffb3\107\uffb3\110" +
    "\uffb3\113\115\001\002\000\102\045\077\046\064\047\074" +
    "\050\102\051\052\053\071\054\060\055\062\056\075\057" +
    "\107\060\056\061\076\062\061\063\053\064\105\065\065" +
    "\066\063\067\054\070\066\071\073\072\106\073\051\076" +
    "\050\077\100\100\110\101\101\102\104\103\103\104\072" +
    "\106\055\107\057\110\070\001\002\000\030\004\uff79\074" +
    "\uff79\075\uff79\112\uff79\123\uff79\124\uff79\125\uff79\126\uff79" +
    "\127\uff79\130\uff79\131\uff79\001\002\000\030\004\uff7a\074" +
    "\uff7a\075\uff7a\112\uff7a\123\uff7a\124\uff7a\125\uff7a\126\uff7a" +
    "\127\uff7a\130\uff7a\131\uff7a\001\002\000\030\004\uff8e\074" +
    "\uff8e\075\uff8e\112\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e" +
    "\127\uff8e\130\uff8e\131\uff8e\001\002\000\030\004\uff84\074" +
    "\uff84\075\uff84\112\uff84\123\uff84\124\uff84\125\uff84\126\uff84" +
    "\127\uff84\130\uff84\131\uff84\001\002\000\030\004\uff85\074" +
    "\uff85\075\uff85\112\uff85\123\uff85\124\uff85\125\uff85\126\uff85" +
    "\127\uff85\130\uff85\131\uff85\001\002\000\030\004\uff7e\074" +
    "\uff7e\075\uff7e\112\uff7e\123\uff7e\124\uff7e\125\uff7e\126\uff7e" +
    "\127\uff7e\130\uff7e\131\uff7e\001\002\000\030\004\uff86\074" +
    "\uff86\075\uff86\112\uff86\123\uff86\124\uff86\125\uff86\126\uff86" +
    "\127\uff86\130\uff86\131\uff86\001\002\000\030\004\uff81\074" +
    "\uff81\075\uff81\112\uff81\123\uff81\124\uff81\125\uff81\126\uff81" +
    "\127\uff81\130\uff81\131\uff81\001\002\000\030\004\uff8c\074" +
    "\uff8c\075\uff8c\112\uff8c\123\uff8c\124\uff8c\125\uff8c\126\uff8c" +
    "\127\uff8c\130\uff8c\131\uff8c\001\002\000\030\004\uff89\074" +
    "\uff89\075\uff89\112\uff89\123\uff89\124\uff89\125\uff89\126\uff89" +
    "\127\uff89\130\uff89\131\uff89\001\002\000\030\004\uff8d\074" +
    "\uff8d\075\uff8d\112\uff8d\123\uff8d\124\uff8d\125\uff8d\126\uff8d" +
    "\127\uff8d\130\uff8d\131\uff8d\001\002\000\030\004\uff80\074" +
    "\uff80\075\uff80\112\uff80\123\uff80\124\uff80\125\uff80\126\uff80" +
    "\127\uff80\130\uff80\131\uff80\001\002\000\030\004\uff90\074" +
    "\uff90\075\uff90\112\uff90\123\uff90\124\uff90\125\uff90\126\uff90" +
    "\127\uff90\130\uff90\131\uff90\001\002\000\030\004\uff83\074" +
    "\uff83\075\uff83\112\uff83\123\uff83\124\uff83\125\uff83\126\uff83" +
    "\127\uff83\130\uff83\131\uff83\001\002\000\030\004\uff7d\074" +
    "\uff7d\075\uff7d\112\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d" +
    "\127\uff7d\130\uff7d\131\uff7d\001\002\000\030\004\027\074" +
    "\032\075\026\112\043\123\041\124\033\125\040\126\034" +
    "\127\030\130\035\131\031\001\002\000\030\004\uff82\074" +
    "\uff82\075\uff82\112\uff82\123\uff82\124\uff82\125\uff82\126\uff82" +
    "\127\uff82\130\uff82\131\uff82\001\002\000\030\004\uff8a\074" +
    "\uff8a\075\uff8a\112\uff8a\123\uff8a\124\uff8a\125\uff8a\126\uff8a" +
    "\127\uff8a\130\uff8a\131\uff8a\001\002\000\030\004\027\074" +
    "\032\075\026\112\043\123\041\124\033\125\040\126\034" +
    "\127\030\130\035\131\031\001\002\000\030\004\uff7c\074" +
    "\uff7c\075\uff7c\112\uff7c\123\uff7c\124\uff7c\125\uff7c\126\uff7c" +
    "\127\uff7c\130\uff7c\131\uff7c\001\002\000\030\004\uff92\074" +
    "\uff92\075\uff92\112\uff92\123\uff92\124\uff92\125\uff92\126\uff92" +
    "\127\uff92\130\uff92\131\uff92\001\002\000\030\004\uff8b\074" +
    "\uff8b\075\uff8b\112\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b" +
    "\127\uff8b\130\uff8b\131\uff8b\001\002\000\030\004\uff87\074" +
    "\uff87\075\uff87\112\uff87\123\uff87\124\uff87\125\uff87\126\uff87" +
    "\127\uff87\130\uff87\131\uff87\001\002\000\030\004\uff91\074" +
    "\uff91\075\uff91\112\uff91\123\uff91\124\uff91\125\uff91\126\uff91" +
    "\127\uff91\130\uff91\131\uff91\001\002\000\030\004\uff74\074" +
    "\uff74\075\uff74\112\uff74\123\uff74\124\uff74\125\uff74\126\uff74" +
    "\127\uff74\130\uff74\131\uff74\001\002\000\030\004\uff75\074" +
    "\uff75\075\uff75\112\uff75\123\uff75\124\uff75\125\uff75\126\uff75" +
    "\127\uff75\130\uff75\131\uff75\001\002\000\030\004\uff8f\074" +
    "\uff8f\075\uff8f\112\uff8f\123\uff8f\124\uff8f\125\uff8f\126\uff8f" +
    "\127\uff8f\130\uff8f\131\uff8f\001\002\000\030\004\uff77\074" +
    "\uff77\075\uff77\112\uff77\123\uff77\124\uff77\125\uff77\126\uff77" +
    "\127\uff77\130\uff77\131\uff77\001\002\000\030\004\uff78\074" +
    "\uff78\075\uff78\112\uff78\123\uff78\124\uff78\125\uff78\126\uff78" +
    "\127\uff78\130\uff78\131\uff78\001\002\000\030\004\uff7f\074" +
    "\uff7f\075\uff7f\112\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f" +
    "\127\uff7f\130\uff7f\131\uff7f\001\002\000\030\004\uff7b\074" +
    "\uff7b\075\uff7b\112\uff7b\123\uff7b\124\uff7b\125\uff7b\126\uff7b" +
    "\127\uff7b\130\uff7b\131\uff7b\001\002\000\030\004\uff88\074" +
    "\uff88\075\uff88\112\uff88\123\uff88\124\uff88\125\uff88\126\uff88" +
    "\127\uff88\130\uff88\131\uff88\001\002\000\030\004\uff76\074" +
    "\uff76\075\uff76\112\uff76\123\uff76\124\uff76\125\uff76\126\uff76" +
    "\127\uff76\130\uff76\131\uff76\001\002\000\104\045\077\046" +
    "\064\047\074\050\102\051\052\053\071\054\060\055\062" +
    "\056\075\057\107\060\056\061\076\062\061\063\053\064" +
    "\105\065\065\066\063\067\054\070\066\071\073\072\106" +
    "\073\051\076\050\077\100\100\110\101\101\102\104\103" +
    "\103\104\072\105\112\106\055\107\057\110\070\001\002" +
    "\000\030\004\027\074\032\075\026\112\043\123\041\124" +
    "\033\125\040\126\034\127\030\130\035\131\031\001\002" +
    "\000\204\002\uffae\003\uffae\004\uffae\010\uffae\011\uffae\015" +
    "\uffae\016\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026\uffae" +
    "\030\uffae\031\uffae\036\uffae\042\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\071\054\060" +
    "\055\062\056\075\057\107\060\056\061\076\062\061\063" +
    "\053\064\105\065\065\066\063\067\054\070\066\071\073" +
    "\072\106\073\051\074\uffae\075\uffae\076\050\077\100\100" +
    "\110\101\101\102\104\103\103\104\uffae\105\uffae\106\055" +
    "\107\057\110\070\112\uffae\113\uffae\116\uffae\117\uffae\120" +
    "\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae\130\uffae" +
    "\131\uffae\001\002\000\204\002\uffaf\003\uffaf\004\uffaf\010" +
    "\uffaf\011\uffaf\015\uffaf\016\uffaf\021\uffaf\022\uffaf\024\uffaf" +
    "\025\uffaf\026\uffaf\030\uffaf\031\uffaf\036\uffaf\042\uffaf\044" +
    "\uffaf\045\077\046\064\047\074\050\102\051\052\052\uffaf" +
    "\053\071\054\060\055\062\056\075\057\107\060\056\061" +
    "\076\062\061\063\053\064\105\065\065\066\063\067\054" +
    "\070\066\071\073\072\106\073\051\074\uffaf\075\uffaf\076" +
    "\050\077\100\100\110\101\101\102\104\103\103\104\072" +
    "\105\uffaf\106\055\107\057\110\070\112\uffaf\113\uffaf\116" +
    "\uffaf\117\uffaf\120\uffaf\123\uffaf\124\uffaf\125\uffaf\126\uffaf" +
    "\127\uffaf\130\uffaf\131\uffaf\001\002\000\204\002\uffb4\003" +
    "\uffb4\004\uffb4\010\uffb4\011\uffb4\015\uffb4\016\uffb4\021\uffb4" +
    "\022\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4\031\uffb4\036" +
    "\uffb4\042\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057" +
    "\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4" +
    "\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\101\uffb4\102\uffb4" +
    "\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110\uffb4\112" +
    "\uffb4\113\uffb4\116\uffb4\117\uffb4\120\uffb4\123\uffb4\124\uffb4" +
    "\125\uffb4\126\uffb4\127\uffb4\130\uffb4\131\uffb4\001\002\000" +
    "\004\004\120\001\002\000\074\002\uffc0\004\uffc0\010\uffc0" +
    "\011\uffc0\015\uffc0\016\uffc0\021\uffc0\022\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\031\uffc0\036\uffc0\042\uffc0\044\uffc0" +
    "\074\uffc0\075\uffc0\112\uffc0\116\uffc0\117\uffc0\120\uffc0\123" +
    "\uffc0\124\uffc0\125\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0" +
    "\001\002\000\100\002\uffc3\004\uffc3\010\uffc3\011\uffc3\015" +
    "\uffc3\016\uffc3\021\uffc3\022\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\030\uffc3\031\uffc3\036\uffc3\042\uffc3\044\uffc3\052\024\074" +
    "\uffc3\075\uffc3\106\025\112\uffc3\116\uffc3\117\uffc3\120\uffc3" +
    "\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3\131" +
    "\uffc3\001\002\000\032\004\027\074\032\075\026\112\043" +
    "\113\126\123\041\124\033\125\040\126\034\127\030\130" +
    "\035\131\031\001\002\000\204\002\uffb0\003\uffb0\004\uffb0" +
    "\010\uffb0\011\uffb0\015\uffb0\016\uffb0\021\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0\036\uffb0\042\uffb0" +
    "\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052" +
    "\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\064\uffb0\065\uffb0\066\uffb0\067" +
    "\uffb0\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0" +
    "\076\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103\uffb0\104" +
    "\uffb0\105\uffb0\106\uffb0\107\uffb0\110\uffb0\112\uffb0\113\uffb0" +
    "\116\uffb0\117\uffb0\120\uffb0\123\uffb0\124\uffb0\125\uffb0\126" +
    "\uffb0\127\uffb0\130\uffb0\131\uffb0\001\002\000\006\052\130" +
    "\113\uffbe\001\002\000\004\113\127\001\002\000\106\045" +
    "\077\046\064\047\074\050\102\051\052\052\uffbd\053\071" +
    "\054\060\055\062\056\075\057\107\060\056\061\076\062" +
    "\061\063\053\064\105\065\065\066\063\067\054\070\066" +
    "\071\073\072\106\073\051\076\050\077\100\100\110\101" +
    "\101\102\104\103\103\104\072\106\055\107\057\110\070" +
    "\113\uffbd\001\002\000\204\002\uffa5\003\uffa5\004\uffa5\010" +
    "\uffa5\011\uffa5\015\uffa5\016\uffa5\021\uffa5\022\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\030\uffa5\031\uffa5\036\uffa5\042\uffa5\044" +
    "\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\062\uffa5\063\uffa5\064\uffa5\065\uffa5\066\uffa5\067\uffa5" +
    "\070\uffa5\071\uffa5\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5" +
    "\105\uffa5\106\uffa5\107\uffa5\110\uffa5\112\uffa5\113\uffa5\116" +
    "\uffa5\117\uffa5\120\uffa5\123\uffa5\124\uffa5\125\uffa5\126\uffa5" +
    "\127\uffa5\130\uffa5\131\uffa5\001\002\000\204\002\uffa6\003" +
    "\uffa6\004\uffa6\010\uffa6\011\uffa6\015\uffa6\016\uffa6\021\uffa6" +
    "\022\uffa6\024\uffa6\025\uffa6\026\uffa6\030\uffa6\031\uffa6\036" +
    "\uffa6\042\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6" +
    "\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\063\uffa6\064\uffa6\065\uffa6" +
    "\066\uffa6\067\uffa6\070\uffa6\071\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6" +
    "\103\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\112" +
    "\uffa6\113\uffa6\116\uffa6\117\uffa6\120\uffa6\123\uffa6\124\uffa6" +
    "\125\uffa6\126\uffa6\127\uffa6\130\uffa6\131\uffa6\001\002\000" +
    "\030\004\027\074\032\075\026\112\043\123\041\124\033" +
    "\125\040\126\034\127\030\130\035\131\031\001\002\000" +
    "\004\113\uffbf\001\002\000\074\002\uffc1\004\uffc1\010\uffc1" +
    "\011\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\024\uffc1\025" +
    "\uffc1\026\uffc1\030\uffc1\031\uffc1\036\uffc1\042\uffc1\044\uffc1" +
    "\074\uffc1\075\uffc1\112\uffc1\116\uffc1\117\uffc1\120\uffc1\123" +
    "\uffc1\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1" +
    "\001\002\000\006\052\362\113\uffbb\001\002\000\004\113" +
    "\361\001\002\000\070\002\ufffa\004\ufffa\010\ufffa\011\ufffa" +
    "\015\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026\ufffa\030" +
    "\ufffa\031\ufffa\036\ufffa\042\ufffa\044\ufffa\074\ufffa\075\ufffa" +
    "\112\ufffa\116\ufffa\120\ufffa\123\ufffa\124\ufffa\125\ufffa\126" +
    "\ufffa\127\ufffa\130\ufffa\131\ufffa\001\002\000\004\004\360" +
    "\001\002\000\070\002\uffc7\004\162\010\006\011\152\015" +
    "\020\021\016\022\150\024\164\025\015\026\010\030\156" +
    "\031\017\036\163\042\013\044\173\074\032\075\026\112" +
    "\043\116\154\120\174\123\041\124\033\125\040\126\034" +
    "\127\030\130\035\131\031\001\002\000\020\010\006\015" +
    "\020\021\016\025\015\026\010\031\017\042\013\001\002" +
    "\000\004\004\142\001\002\000\010\052\uffb9\106\143\113" +
    "\uffb9\001\002\000\002\001\002\000\006\052\uffb8\113\uffb8" +
    "\001\002\000\074\002\uffe0\004\uffe0\010\uffe0\011\uffe0\015" +
    "\uffe0\016\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0" +
    "\030\uffe0\031\uffe0\036\uffe0\042\uffe0\044\uffe0\074\uffe0\075" +
    "\uffe0\112\uffe0\116\uffe0\117\uffe0\120\uffe0\123\uffe0\124\uffe0" +
    "\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002\000" +
    "\074\002\ufff5\004\ufff5\010\ufff5\011\ufff5\015\ufff5\016\ufff5" +
    "\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031" +
    "\ufff5\036\ufff5\042\ufff5\044\ufff5\074\ufff5\075\ufff5\112\ufff5" +
    "\116\ufff5\117\ufff5\120\ufff5\123\ufff5\124\ufff5\125\ufff5\126" +
    "\ufff5\127\ufff5\130\ufff5\131\ufff5\001\002\000\074\002\ufff3" +
    "\004\ufff3\010\ufff3\011\ufff3\015\ufff3\016\ufff3\021\ufff3\022" +
    "\ufff3\024\ufff3\025\ufff3\026\ufff3\030\ufff3\031\ufff3\036\ufff3" +
    "\042\ufff3\044\ufff3\074\ufff3\075\ufff3\112\ufff3\116\ufff3\117" +
    "\ufff3\120\ufff3\123\ufff3\124\ufff3\125\ufff3\126\ufff3\127\ufff3" +
    "\130\ufff3\131\ufff3\001\002\000\004\112\337\001\002\000" +
    "\074\002\ufff8\004\ufff8\010\ufff8\011\ufff8\015\ufff8\016\ufff8" +
    "\021\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\030\ufff8\031" +
    "\ufff8\036\ufff8\042\ufff8\044\ufff8\074\ufff8\075\ufff8\112\ufff8" +
    "\116\ufff8\117\ufff8\120\ufff8\123\ufff8\124\ufff8\125\ufff8\126" +
    "\ufff8\127\ufff8\130\ufff8\131\ufff8\001\002\000\020\010\006" +
    "\015\020\021\016\025\015\026\010\031\017\042\013\001" +
    "\002\000\004\004\120\001\002\000\070\004\162\010\006" +
    "\011\152\015\020\021\016\022\150\024\164\025\015\026" +
    "\010\030\156\031\017\036\163\042\013\044\173\074\032" +
    "\075\026\112\043\116\154\117\uffc7\120\174\123\041\124" +
    "\033\125\040\126\034\127\030\130\035\131\031\001\002" +
    "\000\004\120\243\001\002\000\030\004\027\074\032\075" +
    "\026\112\043\123\041\124\033\125\040\126\034\127\030" +
    "\130\035\131\031\001\002\000\174\002\uffb5\004\uffb5\010" +
    "\uffb5\011\uffb5\015\uffb5\016\uffb5\021\uffb5\022\uffb5\024\uffb5" +
    "\025\uffb5\026\uffb5\030\uffb5\031\uffb5\036\uffb5\042\uffb5\044" +
    "\uffb5\045\077\046\064\047\074\050\102\051\052\053\071" +
    "\054\060\055\062\056\075\057\107\060\056\061\076\062" +
    "\061\063\053\064\105\065\065\066\063\067\054\070\066" +
    "\071\073\072\106\073\051\074\uffb5\075\uffb5\076\050\077" +
    "\100\100\110\101\101\102\104\103\103\104\072\106\055" +
    "\107\057\110\070\112\uffb5\116\uffb5\117\uffb5\120\324\123" +
    "\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5" +
    "\001\002\000\074\002\ufff6\004\ufff6\010\ufff6\011\ufff6\015" +
    "\ufff6\016\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6\026\ufff6" +
    "\030\ufff6\031\ufff6\036\ufff6\042\ufff6\044\ufff6\074\ufff6\075" +
    "\ufff6\112\ufff6\116\ufff6\117\ufff6\120\ufff6\123\ufff6\124\ufff6" +
    "\125\ufff6\126\ufff6\127\ufff6\130\ufff6\131\ufff6\001\002\000" +
    "\074\002\uffc7\004\162\010\006\011\152\015\020\016\uffc7" +
    "\021\016\022\150\024\164\025\015\026\010\030\156\031" +
    "\017\036\163\042\013\044\173\074\032\075\026\112\043" +
    "\116\154\117\uffc7\120\174\123\041\124\033\125\040\126" +
    "\034\127\030\130\035\131\031\001\002\000\174\002\uffa7" +
    "\004\uffa7\010\uffa7\011\uffa7\015\uffa7\016\uffa7\021\uffa7\022" +
    "\uffa7\024\uffa7\025\uffa7\026\uffa7\030\uffa7\031\uffa7\036\uffa7" +
    "\042\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7" +
    "\061\uffa7\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067" +
    "\uffa7\070\uffa7\071\uffa7\072\uffa7\073\uffa7\074\032\075\026" +
    "\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\106\321\107\uffa7\110\uffa7\112\121\116\uffa7\117\uffa7" +
    "\120\uffa7\123\uffa7\124\uffa7\125\uffa7\126\uffa7\127\uffa7\130" +
    "\uffa7\131\uffa7\001\002\000\004\112\247\001\002\000\006" +
    "\003\223\112\222\001\002\000\074\002\ufff7\004\ufff7\010" +
    "\ufff7\011\ufff7\015\ufff7\016\ufff7\021\ufff7\022\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\030\ufff7\031\ufff7\036\ufff7\042\ufff7\044" +
    "\ufff7\074\ufff7\075\ufff7\112\ufff7\116\ufff7\117\ufff7\120\ufff7" +
    "\123\ufff7\124\ufff7\125\ufff7\126\ufff7\127\ufff7\130\ufff7\131" +
    "\ufff7\001\002\000\074\002\ufff4\004\ufff4\010\ufff4\011\ufff4" +
    "\015\ufff4\016\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\030\ufff4\031\ufff4\036\ufff4\042\ufff4\044\ufff4\074\ufff4" +
    "\075\ufff4\112\ufff4\116\ufff4\117\ufff4\120\ufff4\123\ufff4\124" +
    "\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131\ufff4\001\002" +
    "\000\074\002\uffc7\004\162\010\006\011\152\015\020\016" +
    "\uffc7\021\016\022\150\024\164\025\015\026\010\030\156" +
    "\031\017\036\163\042\013\044\173\074\032\075\026\112" +
    "\043\116\154\117\uffc7\120\174\123\041\124\033\125\040" +
    "\126\034\127\030\130\035\131\031\001\002\000\074\002" +
    "\uffb6\004\uffb6\010\uffb6\011\uffb6\015\uffb6\016\uffb6\021\uffb6" +
    "\022\uffb6\024\uffb6\025\uffb6\026\uffb6\030\uffb6\031\uffb6\036" +
    "\uffb6\042\uffb6\044\uffb6\074\uffb6\075\uffb6\112\uffb6\116\uffb6" +
    "\117\uffb6\120\217\123\uffb6\124\uffb6\125\uffb6\126\uffb6\127" +
    "\uffb6\130\uffb6\131\uffb6\001\002\000\022\002\ufffc\010\ufffc" +
    "\015\ufffc\021\ufffc\025\ufffc\026\ufffc\031\ufffc\042\ufffc\001" +
    "\002\000\022\002\ufff9\010\ufff9\015\ufff9\021\ufff9\025\ufff9" +
    "\026\ufff9\031\ufff9\042\ufff9\001\002\000\006\003\177\112" +
    "\176\001\002\000\074\002\uffc7\004\162\010\006\011\152" +
    "\015\020\016\uffc7\021\016\022\150\024\164\025\015\026" +
    "\010\030\156\031\017\036\163\042\013\044\173\074\032" +
    "\075\026\112\043\116\154\117\uffc7\120\174\123\041\124" +
    "\033\125\040\126\034\127\030\130\035\131\031\001\002" +
    "\000\074\002\uffcd\004\uffcd\010\uffcd\011\uffcd\015\uffcd\016" +
    "\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd" +
    "\031\uffcd\036\uffcd\042\uffcd\044\uffcd\074\uffcd\075\uffcd\112" +
    "\uffcd\116\uffcd\117\uffcd\120\uffcd\123\uffcd\124\uffcd\125\uffcd" +
    "\126\uffcd\127\uffcd\130\uffcd\131\uffcd\001\002\000\032\003" +
    "\203\004\027\074\032\075\026\112\043\123\041\124\033" +
    "\125\040\126\034\127\030\130\035\131\031\001\002\000" +
    "\004\117\uffdd\001\002\000\004\117\201\001\002\000\074" +
    "\002\uffdc\004\uffdc\010\uffdc\011\uffdc\015\uffdc\016\uffdc\021" +
    "\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc" +
    "\036\uffdc\042\uffdc\044\uffdc\074\uffdc\075\uffdc\112\uffdc\116" +
    "\uffdc\117\uffdc\120\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc" +
    "\127\uffdc\130\uffdc\131\uffdc\001\002\000\106\003\206\045" +
    "\077\046\064\047\074\050\102\051\052\053\071\054\060" +
    "\055\062\056\075\057\107\060\056\061\076\062\061\063" +
    "\053\064\105\065\065\066\063\067\054\070\066\071\073" +
    "\072\106\073\051\076\050\077\100\100\110\101\101\102" +
    "\104\103\103\104\072\106\055\107\057\110\070\113\207" +
    "\001\002\000\004\117\uffdb\001\002\000\004\117\205\001" +
    "\002\000\074\002\uffda\004\uffda\010\uffda\011\uffda\015\uffda" +
    "\016\uffda\021\uffda\022\uffda\024\uffda\025\uffda\026\uffda\030" +
    "\uffda\031\uffda\036\uffda\042\uffda\044\uffda\074\uffda\075\uffda" +
    "\112\uffda\116\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125" +
    "\uffda\126\uffda\127\uffda\130\uffda\131\uffda\001\002\000\004" +
    "\117\uffd9\001\002\000\076\002\uffc7\004\162\006\211\010" +
    "\006\011\152\015\020\016\uffc7\021\016\022\150\024\164" +
    "\025\015\026\010\030\156\031\017\036\163\042\013\044" +
    "\173\074\032\075\026\112\043\116\154\117\uffc7\120\174" +
    "\123\041\124\033\125\040\126\034\127\030\130\035\131" +
    "\031\001\002\000\074\002\uffe1\004\uffe1\010\uffe1\011\uffe1" +
    "\015\uffe1\016\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026" +
    "\uffe1\030\uffe1\031\uffe1\036\uffe1\042\uffe1\044\uffe1\074\uffe1" +
    "\075\uffe1\112\uffe1\116\uffe1\117\uffe1\120\uffe1\123\uffe1\124" +
    "\uffe1\125\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002" +
    "\000\004\120\213\001\002\000\074\002\uffde\004\uffde\010" +
    "\uffde\011\uffde\015\uffde\016\uffde\021\uffde\022\uffde\024\uffde" +
    "\025\uffde\026\uffde\030\uffde\031\uffde\036\uffde\042\uffde\044" +
    "\uffde\074\uffde\075\uffde\112\uffde\116\uffde\117\uffde\120\uffde" +
    "\123\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131" +
    "\uffde\001\002\000\076\002\uffc7\004\162\006\211\010\006" +
    "\011\152\015\020\016\uffc7\021\016\022\150\024\164\025" +
    "\015\026\010\030\156\031\017\036\163\042\013\044\173" +
    "\074\032\075\026\112\043\116\154\117\uffc7\120\174\123" +
    "\041\124\033\125\040\126\034\127\030\130\035\131\031" +
    "\001\002\000\074\002\uffdf\004\uffdf\010\uffdf\011\uffdf\015" +
    "\uffdf\016\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\031\uffdf\036\uffdf\042\uffdf\044\uffdf\074\uffdf\075" +
    "\uffdf\112\uffdf\116\uffdf\117\uffdf\120\uffdf\123\uffdf\124\uffdf" +
    "\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000" +
    "\004\117\216\001\002\000\074\002\uffd8\004\uffd8\010\uffd8" +
    "\011\uffd8\015\uffd8\016\uffd8\021\uffd8\022\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\030\uffd8\031\uffd8\036\uffd8\042\uffd8\044\uffd8" +
    "\074\uffd8\075\uffd8\112\uffd8\116\uffd8\117\uffd8\120\uffd8\123" +
    "\uffd8\124\uffd8\125\uffd8\126\uffd8\127\uffd8\130\uffd8\131\uffd8" +
    "\001\002\000\074\002\uffc7\004\162\010\006\011\152\015" +
    "\020\016\uffc7\021\016\022\150\024\164\025\015\026\010" +
    "\030\156\031\017\036\163\042\013\044\173\074\032\075" +
    "\026\112\043\116\154\117\uffc7\120\174\123\041\124\033" +
    "\125\040\126\034\127\030\130\035\131\031\001\002\000" +
    "\074\002\uffcc\004\uffcc\010\uffcc\011\uffcc\015\uffcc\016\uffcc" +
    "\021\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031" +
    "\uffcc\036\uffcc\042\uffcc\044\uffcc\074\uffcc\075\uffcc\112\uffcc" +
    "\116\uffcc\117\uffcc\120\uffcc\123\uffcc\124\uffcc\125\uffcc\126" +
    "\uffcc\127\uffcc\130\uffcc\131\uffcc\001\002\000\074\002\uffc9" +
    "\004\uffc9\010\uffc9\011\uffc9\015\uffc9\016\uffc9\021\uffc9\022" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9\031\uffc9\036\uffc9" +
    "\042\uffc9\044\uffc9\074\uffc9\075\uffc9\112\uffc9\116\uffc9\117" +
    "\uffc9\120\uffc9\123\uffc9\124\uffc9\125\uffc9\126\uffc9\127\uffc9" +
    "\130\uffc9\131\uffc9\001\002\000\032\003\227\004\027\074" +
    "\032\075\026\112\043\123\041\124\033\125\040\126\034" +
    "\127\030\130\035\131\031\001\002\000\004\117\uffed\001" +
    "\002\000\004\117\225\001\002\000\074\002\uffec\004\uffec" +
    "\010\uffec\011\uffec\015\uffec\016\uffec\021\uffec\022\uffec\024" +
    "\uffec\025\uffec\026\uffec\030\uffec\031\uffec\036\uffec\042\uffec" +
    "\044\uffec\074\uffec\075\uffec\112\uffec\116\uffec\117\uffec\120" +
    "\uffec\123\uffec\124\uffec\125\uffec\126\uffec\127\uffec\130\uffec" +
    "\131\uffec\001\002\000\106\003\232\045\077\046\064\047" +
    "\074\050\102\051\052\053\071\054\060\055\062\056\075" +
    "\057\107\060\056\061\076\062\061\063\053\064\105\065" +
    "\065\066\063\067\054\070\066\071\073\072\106\073\051" +
    "\076\050\077\100\100\110\101\101\102\104\103\103\104" +
    "\072\106\055\107\057\110\070\113\233\001\002\000\004" +
    "\117\uffeb\001\002\000\004\117\231\001\002\000\074\002" +
    "\uffea\004\uffea\010\uffea\011\uffea\015\uffea\016\uffea\021\uffea" +
    "\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea\036" +
    "\uffea\042\uffea\044\uffea\074\uffea\075\uffea\112\uffea\116\uffea" +
    "\117\uffea\120\uffea\123\uffea\124\uffea\125\uffea\126\uffea\127" +
    "\uffea\130\uffea\131\uffea\001\002\000\004\117\uffe9\001\002" +
    "\000\074\002\uffc7\004\162\010\006\011\152\015\020\016" +
    "\uffc7\021\016\022\150\024\164\025\015\026\010\030\156" +
    "\031\017\036\163\042\013\044\173\074\032\075\026\112" +
    "\043\116\154\117\uffc7\120\174\123\041\124\033\125\040" +
    "\126\034\127\030\130\035\131\031\001\002\000\074\002" +
    "\uffc7\004\162\010\006\011\152\015\020\016\237\021\016" +
    "\022\150\024\164\025\015\026\010\030\156\031\017\036" +
    "\163\042\013\044\173\074\032\075\026\112\043\116\154" +
    "\117\uffc7\120\174\123\041\124\033\125\040\126\034\127" +
    "\030\130\035\131\031\001\002\000\074\002\ufff2\004\ufff2" +
    "\010\ufff2\011\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\024" +
    "\ufff2\025\ufff2\026\ufff2\030\ufff2\031\ufff2\036\ufff2\042\ufff2" +
    "\044\ufff2\074\ufff2\075\ufff2\112\ufff2\116\ufff2\117\ufff2\120" +
    "\ufff2\123\ufff2\124\ufff2\125\ufff2\126\ufff2\127\ufff2\130\ufff2" +
    "\131\ufff2\001\002\000\074\002\uffef\004\uffef\010\uffef\011" +
    "\uffef\015\uffef\016\uffef\021\uffef\022\uffef\024\uffef\025\uffef" +
    "\026\uffef\030\uffef\031\uffef\036\uffef\042\uffef\044\uffef\074" +
    "\uffef\075\uffef\112\uffef\116\uffef\117\uffef\120\243\123\uffef" +
    "\124\uffef\125\uffef\126\uffef\127\uffef\130\uffef\131\uffef\001" +
    "\002\000\074\002\uffc7\004\162\010\006\011\152\015\020" +
    "\016\uffc7\021\016\022\150\024\164\025\015\026\010\030" +
    "\156\031\017\036\163\042\013\044\173\074\032\075\026" +
    "\112\043\116\154\117\uffc7\120\174\123\041\124\033\125" +
    "\040\126\034\127\030\130\035\131\031\001\002\000\074" +
    "\002\uffee\004\uffee\010\uffee\011\uffee\015\uffee\016\uffee\021" +
    "\uffee\022\uffee\024\uffee\025\uffee\026\uffee\030\uffee\031\uffee" +
    "\036\uffee\042\uffee\044\uffee\074\uffee\075\uffee\112\uffee\116" +
    "\uffee\117\uffee\120\uffee\123\uffee\124\uffee\125\uffee\126\uffee" +
    "\127\uffee\130\uffee\131\uffee\001\002\000\074\002\ufff0\004" +
    "\ufff0\010\ufff0\011\ufff0\015\ufff0\016\ufff0\021\ufff0\022\ufff0" +
    "\024\ufff0\025\ufff0\026\ufff0\030\ufff0\031\ufff0\036\ufff0\042" +
    "\ufff0\044\ufff0\074\ufff0\075\ufff0\112\ufff0\116\ufff0\117\ufff0" +
    "\120\ufff0\123\ufff0\124\ufff0\125\ufff0\126\ufff0\127\ufff0\130" +
    "\ufff0\131\ufff0\001\002\000\074\002\ufff1\004\ufff1\010\ufff1" +
    "\011\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\030\ufff1\031\ufff1\036\ufff1\042\ufff1\044\ufff1" +
    "\074\ufff1\075\ufff1\112\ufff1\116\ufff1\117\ufff1\120\ufff1\123" +
    "\ufff1\124\ufff1\125\ufff1\126\ufff1\127\ufff1\130\ufff1\131\ufff1" +
    "\001\002\000\074\002\uffc7\004\162\010\006\011\152\015" +
    "\020\016\uffc7\021\016\022\150\024\164\025\015\026\010" +
    "\030\156\031\017\036\163\042\013\044\173\074\032\075" +
    "\026\112\043\116\154\117\uffc7\120\174\123\041\124\033" +
    "\125\040\126\034\127\030\130\035\131\031\001\002\000" +
    "\074\002\uffca\004\uffca\010\uffca\011\uffca\015\uffca\016\uffca" +
    "\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca\030\uffca\031" +
    "\uffca\036\uffca\042\uffca\044\uffca\074\uffca\075\uffca\112\uffca" +
    "\116\uffca\117\uffca\120\uffca\123\uffca\124\uffca\125\uffca\126" +
    "\uffca\127\uffca\130\uffca\131\uffca\001\002\000\004\117\246" +
    "\001\002\000\074\002\uffe8\004\uffe8\010\uffe8\011\uffe8\015" +
    "\uffe8\016\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8" +
    "\030\uffe8\031\uffe8\036\uffe8\042\uffe8\044\uffe8\074\uffe8\075" +
    "\uffe8\112\uffe8\116\uffe8\117\uffe8\120\uffe8\123\uffe8\124\uffe8" +
    "\125\uffe8\126\uffe8\127\uffe8\130\uffe8\131\uffe8\001\002\000" +
    "\022\004\250\074\032\075\026\123\260\124\254\126\255" +
    "\127\251\131\253\001\002\000\110\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\053\uffad\054\uffad\055\uffad\056\uffad" +
    "\057\uffad\060\uffad\061\uffad\062\uffad\063\uffad\064\uffad\065" +
    "\uffad\066\uffad\067\uffad\070\uffad\071\uffad\072\uffad\073\uffad" +
    "\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103\uffad\104" +
    "\uffad\105\uffad\106\uffad\107\uffad\110\uffad\112\315\113\uffad" +
    "\001\002\000\106\045\uff98\046\uff98\047\uff98\050\uff98\051" +
    "\uff98\053\uff98\054\uff98\055\uff98\056\uff98\057\uff98\060\uff98" +
    "\061\uff98\062\uff98\063\uff98\064\uff98\065\uff98\066\uff98\067" +
    "\uff98\070\uff98\071\uff98\072\uff98\073\uff98\076\uff98\077\uff98" +
    "\100\uff98\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106" +
    "\uff98\107\uff98\110\uff98\113\uff98\001\002\000\106\045\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062\uffab\063\uffab" +
    "\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab\071\uffab\072" +
    "\uffab\073\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab" +
    "\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\113" +
    "\uffab\001\002\000\106\045\uff97\046\uff97\047\uff97\050\uff97" +
    "\051\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060" +
    "\uff97\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97" +
    "\067\uff97\070\uff97\071\uff97\072\uff97\073\uff97\076\uff97\077" +
    "\uff97\100\uff97\101\uff97\102\uff97\103\uff97\104\uff97\105\uff97" +
    "\106\uff97\107\uff97\110\uff97\113\uff97\001\002\000\106\045" +
    "\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\053\uff9a\054\uff9a" +
    "\055\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063" +
    "\uff9a\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a" +
    "\072\uff9a\073\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102" +
    "\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a" +
    "\113\uff9a\001\002\000\106\045\uff99\046\uff99\047\uff99\050" +
    "\uff99\051\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99" +
    "\060\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066" +
    "\uff99\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\076\uff99" +
    "\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105" +
    "\uff99\106\uff99\107\uff99\110\uff99\113\uff99\001\002\000\106" +
    "\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\053\uffac\054" +
    "\uffac\055\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac" +
    "\063\uffac\064\uffac\065\uffac\066\uffac\067\uffac\070\uffac\071" +
    "\uffac\072\uffac\073\uffac\076\uffac\077\uffac\100\uffac\101\uffac" +
    "\102\uffac\103\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110" +
    "\uffac\113\uffac\001\002\000\104\045\077\046\064\047\074" +
    "\050\102\051\052\053\071\054\060\055\062\056\075\057" +
    "\107\060\056\061\076\062\061\063\053\064\105\065\065" +
    "\066\063\067\054\070\066\071\073\072\106\073\051\076" +
    "\050\077\100\100\110\101\101\102\104\103\103\104\264" +
    "\106\055\107\057\110\070\113\271\001\002\000\106\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\053\uff9b\054\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063" +
    "\uff9b\064\uff9b\065\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b" +
    "\072\uff9b\073\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102" +
    "\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b" +
    "\113\uff9b\001\002\000\022\004\250\074\032\075\026\123" +
    "\260\124\254\126\255\127\251\131\253\001\002\000\106" +
    "\045\077\046\064\047\074\050\102\051\052\053\071\054" +
    "\060\055\062\056\075\057\107\060\056\061\076\062\061" +
    "\063\053\064\105\065\065\066\063\067\054\070\066\071" +
    "\073\072\106\073\051\076\050\077\100\100\110\101\101" +
    "\102\104\103\103\104\264\105\uffaa\106\055\107\057\110" +
    "\070\113\uffaa\001\002\000\022\004\250\074\032\075\026" +
    "\123\260\124\254\126\255\127\251\131\253\001\002\000" +
    "\022\004\250\074\032\075\026\123\260\124\254\126\255" +
    "\127\251\131\253\001\002\000\104\045\077\046\064\047" +
    "\074\050\102\051\052\053\071\054\060\055\062\056\075" +
    "\057\107\060\056\061\076\062\061\063\053\064\105\065" +
    "\065\066\063\067\054\070\066\071\073\072\106\073\051" +
    "\076\050\077\100\100\110\101\101\102\104\103\103\104" +
    "\264\105\266\106\055\107\057\110\070\001\002\000\022" +
    "\004\250\074\032\075\026\123\260\124\254\126\255\127" +
    "\251\131\253\001\002\000\106\045\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\053\071\054\060\055\062\056\075\057" +
    "\107\060\056\061\076\062\061\063\053\064\105\065\065" +
    "\066\063\067\054\070\066\071\073\072\106\073\051\076" +
    "\050\077\100\100\110\101\101\102\104\103\103\104\uffa8" +
    "\105\uffa8\106\055\107\057\110\070\113\uffa8\001\002\000" +
    "\106\045\077\046\064\047\074\050\102\051\052\053\071" +
    "\054\060\055\062\056\075\057\107\060\056\061\076\062" +
    "\061\063\053\064\105\065\065\066\063\067\054\070\066" +
    "\071\073\072\106\073\051\076\050\077\100\100\110\101" +
    "\101\102\104\103\103\104\264\105\uffa9\106\055\107\057" +
    "\110\070\113\uffa9\001\002\000\102\002\uffc7\004\162\006" +
    "\274\007\272\010\006\011\152\013\276\015\020\016\uffc7" +
    "\021\016\022\150\024\164\025\015\026\010\030\156\031" +
    "\017\036\163\042\013\044\173\074\032\075\026\112\043" +
    "\116\273\117\uffc7\120\174\123\041\124\033\125\040\126" +
    "\034\127\030\130\035\131\031\001\002\000\022\004\250" +
    "\074\032\075\026\123\260\124\254\126\255\127\251\131" +
    "\253\001\002\000\076\004\162\006\274\007\272\010\006" +
    "\011\152\013\276\015\020\021\016\022\150\024\164\025" +
    "\015\026\010\030\156\031\017\036\163\042\013\044\173" +
    "\074\032\075\026\112\043\116\273\117\uffc7\120\174\123" +
    "\041\124\033\125\040\126\034\127\030\130\035\131\031" +
    "\001\002\000\004\120\303\001\002\000\074\002\uffe2\004" +
    "\uffe2\010\uffe2\011\uffe2\015\uffe2\016\uffe2\021\uffe2\022\uffe2" +
    "\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\036\uffe2\042" +
    "\uffe2\044\uffe2\074\uffe2\075\uffe2\112\uffe2\116\uffe2\117\uffe2" +
    "\120\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130" +
    "\uffe2\131\uffe2\001\002\000\022\004\250\074\032\075\026" +
    "\123\260\124\254\126\255\127\251\131\253\001\002\000" +
    "\074\002\uffe7\004\uffe7\010\uffe7\011\uffe7\015\uffe7\016\uffe7" +
    "\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\031" +
    "\uffe7\036\uffe7\042\uffe7\044\uffe7\074\uffe7\075\uffe7\112\uffe7" +
    "\116\uffe7\117\uffe7\120\uffe7\123\uffe7\124\uffe7\125\uffe7\126" +
    "\uffe7\127\uffe7\130\uffe7\131\uffe7\001\002\000\104\045\077" +
    "\046\064\047\074\050\102\051\052\053\071\054\060\055" +
    "\062\056\075\057\107\060\056\061\076\062\061\063\053" +
    "\064\105\065\065\066\063\067\054\070\066\071\073\072" +
    "\106\073\051\076\050\077\100\100\110\101\101\102\104" +
    "\103\103\104\264\105\301\106\055\107\057\110\070\001" +
    "\002\000\102\002\uffc7\004\162\006\274\007\272\010\006" +
    "\011\152\013\276\015\020\016\uffc7\021\016\022\150\024" +
    "\164\025\015\026\010\030\156\031\017\036\163\042\013" +
    "\044\173\074\032\075\026\112\043\116\273\117\uffc7\120" +
    "\174\123\041\124\033\125\040\126\034\127\030\130\035" +
    "\131\031\001\002\000\074\002\uffe4\004\uffe4\010\uffe4\011" +
    "\uffe4\015\uffe4\016\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\030\uffe4\031\uffe4\036\uffe4\042\uffe4\044\uffe4\074" +
    "\uffe4\075\uffe4\112\uffe4\116\uffe4\117\uffe4\120\uffe4\123\uffe4" +
    "\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\001" +
    "\002\000\102\002\uffc7\004\162\006\274\007\272\010\006" +
    "\011\152\013\276\015\020\016\uffc7\021\016\022\150\024" +
    "\164\025\015\026\010\030\156\031\017\036\163\042\013" +
    "\044\173\074\032\075\026\112\043\116\273\117\uffc7\120" +
    "\174\123\041\124\033\125\040\126\034\127\030\130\035" +
    "\131\031\001\002\000\074\002\uffe3\004\uffe3\010\uffe3\011" +
    "\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\030\uffe3\031\uffe3\036\uffe3\042\uffe3\044\uffe3\074" +
    "\uffe3\075\uffe3\112\uffe3\116\uffe3\117\uffe3\120\uffe3\123\uffe3" +
    "\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\001" +
    "\002\000\004\117\311\001\002\000\004\117\307\001\002" +
    "\000\102\002\uffc7\004\162\006\274\007\272\010\006\011" +
    "\152\013\276\015\020\016\uffc7\021\016\022\150\024\164" +
    "\025\015\026\010\030\156\031\017\036\163\042\013\044" +
    "\173\074\032\075\026\112\043\116\273\117\uffc7\120\174" +
    "\123\041\124\033\125\040\126\034\127\030\130\035\131" +
    "\031\001\002\000\074\002\uffe6\004\uffe6\010\uffe6\011\uffe6" +
    "\015\uffe6\016\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\030\uffe6\031\uffe6\036\uffe6\042\uffe6\044\uffe6\074\uffe6" +
    "\075\uffe6\112\uffe6\116\uffe6\117\uffe6\120\uffe6\123\uffe6\124" +
    "\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\001\002" +
    "\000\074\002\uffcf\004\uffcf\010\uffcf\011\uffcf\015\uffcf\016" +
    "\uffcf\021\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\030\uffcf" +
    "\031\uffcf\036\uffcf\042\uffcf\044\uffcf\074\uffcf\075\uffcf\112" +
    "\uffcf\116\uffcf\117\uffcf\120\uffcf\123\uffcf\124\uffcf\125\uffcf" +
    "\126\uffcf\127\uffcf\130\uffcf\131\uffcf\001\002\000\104\045" +
    "\077\046\064\047\074\050\102\051\052\053\071\054\060" +
    "\055\062\056\075\057\107\060\056\061\076\062\061\063" +
    "\053\064\105\065\065\066\063\067\054\070\066\071\073" +
    "\072\106\073\051\076\050\077\100\100\110\101\101\102" +
    "\104\103\103\104\264\105\313\106\055\107\057\110\070" +
    "\001\002\000\102\002\uffc7\004\162\006\274\007\272\010" +
    "\006\011\152\013\276\015\020\016\uffc7\021\016\022\150" +
    "\024\164\025\015\026\010\030\156\031\017\036\163\042" +
    "\013\044\173\074\032\075\026\112\043\116\273\117\uffc7" +
    "\120\174\123\041\124\033\125\040\126\034\127\030\130" +
    "\035\131\031\001\002\000\074\002\uffe5\004\uffe5\010\uffe5" +
    "\011\uffe5\015\uffe5\016\uffe5\021\uffe5\022\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\030\uffe5\031\uffe5\036\uffe5\042\uffe5\044\uffe5" +
    "\074\uffe5\075\uffe5\112\uffe5\116\uffe5\117\uffe5\120\uffe5\123" +
    "\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5" +
    "\001\002\000\032\004\027\074\032\075\026\112\043\113" +
    "\317\123\041\124\033\125\040\126\034\127\030\130\035" +
    "\131\031\001\002\000\004\113\320\001\002\000\106\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\053\uff96\054\uff96" +
    "\055\uff96\056\uff96\057\uff96\060\uff96\061\uff96\062\uff96\063" +
    "\uff96\064\uff96\065\uff96\066\uff96\067\uff96\070\uff96\071\uff96" +
    "\072\uff96\073\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102" +
    "\uff96\103\uff96\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96" +
    "\113\uff96\001\002\000\106\045\uff95\046\uff95\047\uff95\050" +
    "\uff95\051\uff95\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95" +
    "\060\uff95\061\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066" +
    "\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\076\uff95" +
    "\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105" +
    "\uff95\106\uff95\107\uff95\110\uff95\113\uff95\001\002\000\030" +
    "\004\027\074\032\075\026\112\043\123\041\124\033\125" +
    "\040\126\034\127\030\130\035\131\031\001\002\000\174" +
    "\002\uffb7\004\uffb7\010\uffb7\011\uffb7\015\uffb7\016\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7" +
    "\036\uffb7\042\uffb7\044\uffb7\045\077\046\064\047\074\050" +
    "\102\051\052\053\071\054\060\055\062\056\075\057\107" +
    "\060\056\061\076\062\061\063\053\064\105\065\065\066" +
    "\063\067\054\070\066\071\073\072\106\073\051\074\uffb7" +
    "\075\uffb7\076\050\077\100\100\110\101\101\102\104\103" +
    "\103\104\072\106\055\107\057\110\070\112\uffb7\116\uffb7" +
    "\117\uffb7\120\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127" +
    "\uffb7\130\uffb7\131\uffb7\001\002\000\074\002\uffce\004\uffce" +
    "\010\uffce\011\uffce\015\uffce\016\uffce\021\uffce\022\uffce\024" +
    "\uffce\025\uffce\026\uffce\030\uffce\031\uffce\036\uffce\042\uffce" +
    "\044\uffce\074\uffce\075\uffce\112\uffce\116\uffce\117\uffce\120" +
    "\uffce\123\uffce\124\uffce\125\uffce\126\uffce\127\uffce\130\uffce" +
    "\131\uffce\001\002\000\074\002\uffc7\004\162\010\006\011" +
    "\152\015\020\016\uffc7\021\016\022\150\024\164\025\015" +
    "\026\010\030\156\031\017\036\163\042\013\044\173\074" +
    "\032\075\026\112\043\116\154\117\uffc7\120\174\123\041" +
    "\124\033\125\040\126\034\127\030\130\035\131\031\001" +
    "\002\000\074\002\uffcb\004\uffcb\010\uffcb\011\uffcb\015\uffcb" +
    "\016\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\030" +
    "\uffcb\031\uffcb\036\uffcb\042\uffcb\044\uffcb\074\uffcb\075\uffcb" +
    "\112\uffcb\116\uffcb\117\uffcb\120\uffcb\123\uffcb\124\uffcb\125" +
    "\uffcb\126\uffcb\127\uffcb\130\uffcb\131\uffcb\001\002\000\104" +
    "\045\077\046\064\047\074\050\102\051\052\053\071\054" +
    "\060\055\062\056\075\057\107\060\056\061\076\062\061" +
    "\063\053\064\105\065\065\066\063\067\054\070\066\071" +
    "\073\072\106\073\051\076\050\077\100\100\110\101\101" +
    "\102\104\103\103\104\072\106\055\107\057\110\070\120" +
    "\327\001\002\000\074\002\uffc7\004\162\010\006\011\152" +
    "\015\020\016\uffc7\021\016\022\150\024\164\025\015\026" +
    "\010\030\156\031\017\036\163\042\013\044\173\074\032" +
    "\075\026\112\043\116\154\117\uffc7\120\174\123\041\124" +
    "\033\125\040\126\034\127\030\130\035\131\031\001\002" +
    "\000\074\002\uffc8\004\uffc8\010\uffc8\011\uffc8\015\uffc8\016" +
    "\uffc8\021\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8" +
    "\031\uffc8\036\uffc8\042\uffc8\044\uffc8\074\uffc8\075\uffc8\112" +
    "\uffc8\116\uffc8\117\uffc8\120\uffc8\123\uffc8\124\uffc8\125\uffc8" +
    "\126\uffc8\127\uffc8\130\uffc8\131\uffc8\001\002\000\004\117" +
    "\311\001\002\000\004\004\333\001\002\000\004\106\334" +
    "\001\002\000\002\001\002\000\004\120\336\001\002\000" +
    "\074\002\uffc5\004\uffc5\010\uffc5\011\uffc5\015\uffc5\016\uffc5" +
    "\021\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031" +
    "\uffc5\036\uffc5\042\uffc5\044\uffc5\074\uffc5\075\uffc5\112\uffc5" +
    "\116\uffc5\117\uffc5\120\uffc5\123\uffc5\124\uffc5\125\uffc5\126" +
    "\uffc5\127\uffc5\130\uffc5\131\uffc5\001\002\000\050\004\340" +
    "\010\006\015\020\021\016\025\015\026\010\031\017\042" +
    "\013\074\032\075\026\112\043\120\uffd3\123\041\124\033" +
    "\125\040\126\034\127\030\130\035\131\031\001\002\000" +
    "\112\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7" +
    "\071\uffa7\072\uffa7\073\uffa7\074\032\075\026\076\uffa7\077" +
    "\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\106\356" +
    "\107\uffa7\110\uffa7\112\121\120\uffa7\001\002\000\104\045" +
    "\077\046\064\047\074\050\102\051\052\053\071\054\060" +
    "\055\062\056\075\057\107\060\056\061\076\062\061\063" +
    "\053\064\105\065\065\066\063\067\054\070\066\071\073" +
    "\072\106\073\051\076\050\077\100\100\110\101\101\102" +
    "\104\103\103\104\072\106\055\107\057\110\070\120\uffd4" +
    "\001\002\000\004\120\uffd6\001\002\000\004\120\344\001" +
    "\002\000\030\004\027\074\032\075\026\112\043\123\041" +
    "\124\033\125\040\126\034\127\030\130\035\131\031\001" +
    "\002\000\104\045\077\046\064\047\074\050\102\051\052" +
    "\053\071\054\060\055\062\056\075\057\107\060\056\061" +
    "\076\062\061\063\053\064\105\065\065\066\063\067\054" +
    "\070\066\071\073\072\106\073\051\076\050\077\100\100" +
    "\110\101\101\102\104\103\103\104\072\106\055\107\057" +
    "\110\070\120\346\001\002\000\032\004\347\074\032\075" +
    "\026\112\043\113\uffd0\123\041\124\033\125\040\126\034" +
    "\127\030\130\035\131\031\001\002\000\112\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\064" +
    "\uffa7\065\uffa7\066\uffa7\067\uffa7\070\uffa7\071\uffa7\072\uffa7" +
    "\073\uffa7\074\032\075\026\076\uffa7\077\uffa7\100\uffa7\101" +
    "\uffa7\102\uffa7\103\uffa7\104\uffa7\106\354\107\uffa7\110\uffa7" +
    "\112\121\113\uffa7\001\002\000\004\113\352\001\002\000" +
    "\104\045\077\046\064\047\074\050\102\051\052\053\071" +
    "\054\060\055\062\056\075\057\107\060\056\061\076\062" +
    "\061\063\053\064\105\065\065\066\063\067\054\070\066" +
    "\071\073\072\106\073\051\076\050\077\100\100\110\101" +
    "\101\102\104\103\103\104\072\106\055\107\057\110\070" +
    "\113\uffd1\001\002\000\074\002\uffc7\004\162\010\006\011" +
    "\152\015\020\016\uffc7\021\016\022\150\024\164\025\015" +
    "\026\010\030\156\031\017\036\163\042\013\044\173\074" +
    "\032\075\026\112\043\116\154\117\uffc7\120\174\123\041" +
    "\124\033\125\040\126\034\127\030\130\035\131\031\001" +
    "\002\000\074\002\uffd7\004\uffd7\010\uffd7\011\uffd7\015\uffd7" +
    "\016\uffd7\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\030" +
    "\uffd7\031\uffd7\036\uffd7\042\uffd7\044\uffd7\074\uffd7\075\uffd7" +
    "\112\uffd7\116\uffd7\117\uffd7\120\uffd7\123\uffd7\124\uffd7\125" +
    "\uffd7\126\uffd7\127\uffd7\130\uffd7\131\uffd7\001\002\000\030" +
    "\004\027\074\032\075\026\112\043\123\041\124\033\125" +
    "\040\126\034\127\030\130\035\131\031\001\002\000\104" +
    "\045\077\046\064\047\074\050\102\051\052\053\071\054" +
    "\060\055\062\056\075\057\107\060\056\061\076\062\061" +
    "\063\053\064\105\065\065\066\063\067\054\070\066\071" +
    "\073\072\106\073\051\076\050\077\100\100\110\101\101" +
    "\102\104\103\103\104\072\106\055\107\057\110\070\113" +
    "\uffd2\001\002\000\030\004\027\074\032\075\026\112\043" +
    "\123\041\124\033\125\040\126\034\127\030\130\035\131" +
    "\031\001\002\000\104\045\077\046\064\047\074\050\102" +
    "\051\052\053\071\054\060\055\062\056\075\057\107\060" +
    "\056\061\076\062\061\063\053\064\105\065\065\066\063" +
    "\067\054\070\066\071\073\072\106\073\051\076\050\077" +
    "\100\100\110\101\101\102\104\103\103\104\072\106\055" +
    "\107\057\110\070\120\uffd5\001\002\000\006\052\uffba\113" +
    "\uffba\001\002\000\070\002\ufffb\004\ufffb\010\ufffb\011\ufffb" +
    "\015\ufffb\021\ufffb\022\ufffb\024\ufffb\025\ufffb\026\ufffb\030" +
    "\ufffb\031\ufffb\036\ufffb\042\ufffb\044\ufffb\074\ufffb\075\ufffb" +
    "\112\ufffb\116\ufffb\120\ufffb\123\ufffb\124\ufffb\125\ufffb\126" +
    "\ufffb\127\ufffb\130\ufffb\131\ufffb\001\002\000\022\010\006" +
    "\011\140\015\020\021\016\025\015\026\010\031\017\042" +
    "\013\001\002\000\004\113\uffbc\001\002\000\004\002\001" +
    "\001\002\000\022\002\uffc6\010\uffc6\015\uffc6\021\uffc6\025" +
    "\uffc6\026\uffc6\031\uffc6\042\uffc6\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\365\000\016\004\006\005\013\012\003\027\004\031" +
    "\010\047\011\001\001\000\002\001\001\000\014\004\006" +
    "\005\013\012\366\027\004\031\010\001\001\000\002\001" +
    "\001\000\014\004\006\005\013\012\365\027\004\031\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\136" +
    "\005\135\010\133\011\132\001\001\000\004\032\131\001" +
    "\001\000\012\015\041\016\035\021\036\022\043\001\001" +
    "\000\002\001\001\000\004\022\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\066\001\001\000\012\015\046\016\045\021\036\022" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\113\016\035\021\036\022\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\015" +
    "\110\016\035\021\036\022\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\066\001\001\000\012\015\112\016\035\021" +
    "\036\022\043\001\001\000\004\023\066\001\001\000\004" +
    "\023\066\001\001\000\002\001\001\000\004\032\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\123" +
    "\007\122\015\124\016\035\021\036\022\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\130\007\122\015\124\016\035\021\036\022\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\170\005\152\013\171\014\154\015\156\016" +
    "\035\021\036\022\043\030\160\031\167\033\166\034\150" +
    "\035\165\037\164\041\157\043\145\050\146\051\144\001" +
    "\001\000\004\005\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\331\001\001\000" +
    "\004\032\020\001\001\000\044\005\152\013\330\014\154" +
    "\015\156\016\035\021\036\022\043\030\160\031\167\033" +
    "\166\034\150\035\165\037\164\041\157\043\145\050\146" +
    "\051\144\001\001\000\002\001\001\000\012\015\325\016" +
    "\035\021\036\022\043\001\001\000\004\023\066\001\001" +
    "\000\002\001\001\000\044\005\152\013\322\014\154\015" +
    "\156\016\035\021\036\022\043\030\160\031\167\033\166" +
    "\034\150\035\165\037\164\041\157\043\145\050\146\051" +
    "\144\001\001\000\004\022\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\005\152\013\220\014\154\015\156\016\035\021\036" +
    "\022\043\030\160\031\167\033\166\034\150\035\165\037" +
    "\164\041\157\043\145\050\146\051\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\005\152\013\174\014\154\015\156\016\035" +
    "\021\036\022\043\030\160\031\167\033\166\034\150\035" +
    "\165\037\164\041\157\043\145\050\146\051\144\001\001" +
    "\000\002\001\001\000\012\015\201\016\035\021\036\022" +
    "\043\001\001\000\004\055\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\066\001\001\000\004\056" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\214\001\001\000\046\005\152\013\211\014\154\015" +
    "\156\016\035\021\036\022\043\030\160\031\167\033\166" +
    "\034\150\035\165\037\164\041\157\042\207\043\145\050" +
    "\146\051\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\005\152\013\211\014\154\015" +
    "\156\016\035\021\036\022\043\030\160\031\167\033\166" +
    "\034\150\035\165\037\164\041\157\042\213\043\145\050" +
    "\146\051\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\152\013\217\014\154\015" +
    "\156\016\035\021\036\022\043\030\160\031\167\033\166" +
    "\034\150\035\165\037\164\041\157\043\145\050\146\051" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\225\016\035\021\036\022\043\001\001\000\004\052" +
    "\223\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\066\001\001\000\004\053\227\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\244\001\001\000\044" +
    "\005\152\013\233\014\154\015\156\016\035\021\036\022" +
    "\043\030\160\031\167\033\166\034\150\035\165\037\164" +
    "\041\157\043\145\050\146\051\144\001\001\000\046\005" +
    "\152\013\237\014\235\015\156\016\035\021\036\022\043" +
    "\030\160\031\167\033\166\034\150\035\165\036\234\037" +
    "\164\041\157\043\145\050\146\051\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\152\013\241\014" +
    "\240\015\156\016\035\021\036\022\043\030\160\031\167" +
    "\033\166\034\150\035\165\037\164\041\157\043\145\050" +
    "\146\051\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\152\013\243\014\154\015" +
    "\156\016\035\021\036\022\043\030\160\031\167\033\166" +
    "\034\150\035\165\037\164\041\157\043\145\050\146\051" +
    "\144\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\256\022\260\024\255\026\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\262\001\001\000\002\001\001" +
    "\000\012\017\261\022\260\024\255\026\251\001\001\000" +
    "\004\023\262\001\001\000\012\017\267\022\260\024\255" +
    "\026\251\001\001\000\012\017\264\022\260\024\255\026" +
    "\251\001\001\000\004\023\262\001\001\000\012\017\266" +
    "\022\260\024\255\026\251\001\001\000\004\023\262\001" +
    "\001\000\004\023\262\001\001\000\046\005\152\013\274" +
    "\014\154\015\156\016\035\021\036\022\043\030\160\031" +
    "\167\033\166\034\150\035\165\037\164\040\276\041\157" +
    "\043\145\050\146\051\144\001\001\000\012\017\311\022" +
    "\260\024\255\026\251\001\001\000\046\005\152\013\304" +
    "\014\154\015\156\016\035\021\036\022\043\030\160\031" +
    "\167\033\166\034\150\035\165\037\164\040\305\041\157" +
    "\043\145\050\146\051\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\017\277\022\260\024\255\026\251" +
    "\001\001\000\002\001\001\000\004\023\262\001\001\000" +
    "\046\005\152\013\274\014\154\015\156\016\035\021\036" +
    "\022\043\030\160\031\167\033\166\034\150\035\165\037" +
    "\164\040\301\041\157\043\145\050\146\051\144\001\001" +
    "\000\002\001\001\000\046\005\152\013\274\014\154\015" +
    "\156\016\035\021\036\022\043\030\160\031\167\033\166" +
    "\034\150\035\165\037\164\040\303\041\157\043\145\050" +
    "\146\051\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\005\152\013\274\014\154\015" +
    "\156\016\035\021\036\022\043\030\160\031\167\033\166" +
    "\034\150\035\165\037\164\040\307\041\157\043\145\050" +
    "\146\051\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\262\001\001\000\046\005\152\013\274\014" +
    "\154\015\156\016\035\021\036\022\043\030\160\031\167" +
    "\033\166\034\150\035\165\037\164\040\313\041\157\043" +
    "\145\050\146\051\144\001\001\000\002\001\001\000\016" +
    "\006\315\007\122\015\124\016\035\021\036\022\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\321\016\035\021\036\022\043\001\001\000" +
    "\004\023\066\001\001\000\002\001\001\000\044\005\152" +
    "\013\324\014\154\015\156\016\035\021\036\022\043\030" +
    "\160\031\167\033\166\034\150\035\165\037\164\041\157" +
    "\043\145\050\146\051\144\001\001\000\002\001\001\000" +
    "\004\023\066\001\001\000\044\005\152\013\327\014\154" +
    "\015\156\016\035\021\036\022\043\030\160\031\167\033" +
    "\166\034\150\035\165\037\164\041\157\043\145\050\146" +
    "\051\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\334\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\152\015" +
    "\340\016\035\021\036\022\043\031\341\044\342\001\001" +
    "\000\004\022\121\001\001\000\004\023\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\344\016\035" +
    "\021\036\022\043\001\001\000\004\023\066\001\001\000" +
    "\014\015\350\016\035\021\036\022\043\045\347\001\001" +
    "\000\004\022\121\001\001\000\002\001\001\000\004\023" +
    "\066\001\001\000\044\005\152\013\352\014\154\015\156" +
    "\016\035\021\036\022\043\030\160\031\167\033\166\034" +
    "\150\035\165\037\164\041\157\043\145\050\146\051\144" +
    "\001\001\000\002\001\001\000\012\015\354\016\035\021" +
    "\036\022\043\001\001\000\004\023\066\001\001\000\012" +
    "\015\356\016\035\021\036\022\043\001\001\000\004\023" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\135\010\362\011\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }


    // Connect this parser to a scanner!
    CLexer s;
    Analyzer a;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    // public void generateSyntaxError(String message, String expected, String value) {
    //     this.a.addSyntaxError(new SyntaxError(message, null));
    // }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message, null));
        }
    }

    public void syntax_error(Symbol cur_token) {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_declaration_1 ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // control_structure ::= control_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // control_structure ::= control_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // control_structure ::= control_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // control_structure ::= control_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // control_if ::= control_if_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // control_if ::= error_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // control_else ::= KW_ELSE gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // control_else ::= KW_ELSE instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // control_else ::= instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // control_else ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
 
      parser.generateSyntaxError("Left parenthesis missing", "(", i);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // error_if ::= KW_IF error NT$0 OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
 
      parser.generateSyntaxError("Expression missing in conditional structure", "expression", null);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT error NT$1 OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
    
      parser.generateSyntaxError("Right parenthesis missing", ")", i);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression error NT$2 OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // control_switch_case ::= OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // control_switch_case ::= KW_CASE expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // control_switch_case ::= KW_DEFAULT expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // control_switch_case ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // control_switch_case ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // control_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // control_while ::= error_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // control_while_body ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // control_while_body ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$3 ::= 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

      parser.generateSyntaxError("Left parenthesis missing", "(", w);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // error_while ::= KW_WHILE error NT$3 OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$4 ::= 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

      parser.generateSyntaxError("Expression missing in conditional structure", "expression", null);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT error NT$4 OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$5 ::= 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

      parser.generateSyntaxError("Right parenthesis missing", ")", w);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression error NT$5 OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // control_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // control_for_instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // control_for_instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // control_for_instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // control_for_instruction ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // control_for_instruction1 ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // control_for_instruction1 ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control_for_instruction1 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // gramatic_body ::= constant gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // gramatic_body ::= OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramatic_body ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // gramatic_body ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramatic_body ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramatic_body ::= control_structure gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // gramatic_body ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramatic_body ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_0 OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable ::= keyword_types variable_definition 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_definition ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_definition ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // parameters_definition ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // parameter_definition ::= keyword_types IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // parameter_definition ::= KW_CONST keyword_types IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_any_type OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= expression_any_type 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression_any_type ::= expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression_any_type ::= expression_unary_operator IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression_any_type ::= IDENT expression_unary_operator 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression_any_type ::= expression expression_binary_operators expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression_any_type ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression_numeric ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expression_numeric ::= expression_atomic_literal_int 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression_numeric ::= expression_atomic_call_functions_anytype 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression_numeric ::= expression_unary_operator expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression_numeric ::= expression_numeric expression_binary_operators expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression_numeric ::= expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression_atomic ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression_atomic ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression_atomic ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression_atomic ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression_atomic ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression_atomic ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression_binary_operators ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_binary_operators ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression_binary_operators ::= OP_ORASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // keyword_types ::= KW_INT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // keyword_types ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // keyword_types ::= KW_LONG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // keyword_types ::= KW_SHORT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // keyword_types ::= KW_VOID 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // keyword_types ::= KW_FLOAT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // keyword_types ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
