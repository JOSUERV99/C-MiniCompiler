
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.CLexer;
import handler.Analyzer;
import model.Token;
import errors.SyntaxError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\254\000\002\002\004\000\002\047\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\002\000\002\062\004\000\002\062\004\000" +
    "\002\062\005\000\002\062\003\000\002\062\003\000\002" +
    "\004\007\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\053\006\000\002\053\007\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\003\000\002\035\010\000\002" +
    "\036\004\000\002\036\004\000\002\036\003\000\002\036" +
    "\003\000\002\050\010\000\002\050\010\000\002\050\010" +
    "\000\002\050\006\000\002\050\011\000\002\037\007\000" +
    "\002\040\006\000\002\040\006\000\002\040\006\000\002" +
    "\040\005\000\002\040\003\000\002\056\005\000\002\056" +
    "\006\000\002\056\007\000\002\041\007\000\002\042\005" +
    "\000\002\042\003\000\002\051\005\000\002\051\006\000" +
    "\002\051\007\000\002\043\013\000\002\052\005\000\002" +
    "\052\013\000\002\044\003\000\002\044\005\000\002\044" +
    "\003\000\002\044\002\000\002\045\005\000\002\045\003" +
    "\000\002\045\002\000\002\013\005\000\002\013\004\000" +
    "\002\013\004\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\004\000\002\013\006\000\002\013" +
    "\005\000\002\013\002\000\002\061\002\000\002\061\004" +
    "\000\002\027\004\000\002\030\010\000\002\057\007\000" +
    "\002\057\010\000\002\057\011\000\002\057\011\000\002" +
    "\057\011\000\002\057\011\000\002\057\011\000\002\031" +
    "\004\000\002\032\003\000\002\032\005\000\002\032\005" +
    "\000\002\032\007\000\002\055\004\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\004\000\002\011\005\000\002\011" +
    "\007\000\002\060\002\000\002\060\005\000\002\060\005" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\016\005\000\002\016\003\000\002\017\003\000\002" +
    "\017\004\000\002\017\004\000\002\017\005\000\002\017" +
    "\007\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\004\000\002\020\005\000\002\020\007\000" +
    "\002\021\003\000\002\021\006\000\002\021\005\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\025\003\000\002\025\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\026\005\000\002\026\006\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\054\002\ufffb\003\034\004\010\010\004\011" +
    "\011\015\041\021\044\025\045\026\042\031\013\042\036" +
    "\074\005\075\022\112\007\123\027\124\006\125\017\126" +
    "\024\127\032\130\026\131\016\001\002\000\010\003\uff5b" +
    "\004\uff5b\120\uff5b\001\002\000\202\003\uff7d\004\uff7d\010" +
    "\uff7d\011\uff7d\015\uff7d\016\uff7d\021\uff7d\022\uff7d\024\uff7d" +
    "\025\uff7d\026\uff7d\030\uff7d\031\uff7d\036\uff7d\042\uff7d\044" +
    "\uff7d\045\uff7d\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d" +
    "\053\uff7d\054\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061" +
    "\uff7d\062\uff7d\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d" +
    "\070\uff7d\071\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076" +
    "\uff7d\077\uff7d\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d" +
    "\105\uff7d\106\uff7d\107\uff7d\110\uff7d\112\uff7d\113\uff7d\116" +
    "\uff7d\117\uff7d\120\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d" +
    "\127\uff7d\130\uff7d\131\uff7d\001\002\000\202\003\uff8c\004" +
    "\uff8c\010\uff8c\011\uff8c\015\uff8c\016\uff8c\021\uff8c\022\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\030\uff8c\031\uff8c\036\uff8c\042" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c" +
    "\052\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c" +
    "\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\074\uff8c\075" +
    "\uff8c\076\uff8c\077\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c" +
    "\104\uff8c\105\uff8c\106\uff8c\107\uff8c\110\uff8c\112\uff8c\113" +
    "\uff8c\116\uff8c\117\uff8c\120\uff8c\123\uff8c\124\uff8c\125\uff8c" +
    "\126\uff8c\127\uff8c\130\uff8c\131\uff8c\001\002\000\030\004" +
    "\061\074\005\075\022\112\007\123\027\124\006\125\017" +
    "\126\024\127\032\130\026\131\016\001\002\000\174\004" +
    "\uff90\010\uff90\011\uff90\015\uff90\016\uff90\021\uff90\022\uff90" +
    "\024\uff90\025\uff90\026\uff90\030\uff90\031\uff90\036\uff90\042" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90" +
    "\053\uff90\054\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061" +
    "\uff90\062\uff90\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90" +
    "\070\uff90\071\uff90\072\uff90\073\uff90\074\005\075\022\076" +
    "\uff90\077\uff90\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90" +
    "\106\u011a\107\uff90\110\uff90\112\133\113\uff90\116\uff90\117" +
    "\uff90\120\uff90\123\uff90\124\uff90\125\uff90\126\uff90\127\uff90" +
    "\130\uff90\131\uff90\001\002\000\020\010\004\015\041\021" +
    "\044\025\045\026\042\031\013\042\036\001\002\000\054" +
    "\002\ufffb\003\034\004\010\010\004\011\011\015\041\021" +
    "\044\025\045\026\042\031\013\042\036\074\005\075\022" +
    "\112\007\123\027\124\006\125\017\126\024\127\032\130" +
    "\026\131\016\001\002\000\010\003\uff59\004\uff59\120\uff59" +
    "\001\002\000\004\002\000\001\002\000\004\002\u0102\001" +
    "\002\000\202\003\uff87\004\uff87\010\uff87\011\uff87\015\uff87" +
    "\016\uff87\021\uff87\022\uff87\024\uff87\025\uff87\026\uff87\030" +
    "\uff87\031\uff87\036\uff87\042\uff87\044\uff87\045\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\055" +
    "\uff87\056\uff87\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87" +
    "\064\uff87\065\uff87\066\uff87\067\uff87\070\uff87\071\uff87\072" +
    "\uff87\073\uff87\074\uff87\075\uff87\076\uff87\077\uff87\100\uff87" +
    "\101\uff87\102\uff87\103\uff87\104\uff87\105\uff87\106\uff87\107" +
    "\uff87\110\uff87\112\uff87\113\uff87\116\uff87\117\uff87\120\uff87" +
    "\123\uff87\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131" +
    "\uff87\001\002\000\202\003\uff8b\004\uff8b\010\uff8b\011\uff8b" +
    "\015\uff8b\016\uff8b\021\uff8b\022\uff8b\024\uff8b\025\uff8b\026" +
    "\uff8b\030\uff8b\031\uff8b\036\uff8b\042\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071" +
    "\uff8b\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b" +
    "\100\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106" +
    "\uff8b\107\uff8b\110\uff8b\112\uff8b\113\uff8b\116\uff8b\117\uff8b" +
    "\120\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130" +
    "\uff8b\131\uff8b\001\002\000\054\002\ufffb\003\034\004\010" +
    "\010\004\011\011\015\041\021\044\025\045\026\042\031" +
    "\013\042\036\074\005\075\022\112\007\123\027\124\006" +
    "\125\017\126\024\127\032\130\026\131\016\001\002\000" +
    "\202\003\uff9c\004\uff9c\010\uff9c\011\uff9c\015\uff9c\016\uff9c" +
    "\021\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c\030\uff9c\031" +
    "\uff9c\036\uff9c\042\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056" +
    "\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064\uff9c" +
    "\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c\073" +
    "\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110" +
    "\uff9c\112\uff9c\113\uff9c\116\uff9c\117\uff9c\120\uff9c\123\uff9c" +
    "\124\uff9c\125\uff9c\126\uff9c\127\uff9c\130\uff9c\131\uff9c\001" +
    "\002\000\202\003\uff7c\004\uff7c\010\uff7c\011\uff7c\015\uff7c" +
    "\016\uff7c\021\uff7c\022\uff7c\024\uff7c\025\uff7c\026\uff7c\030" +
    "\uff7c\031\uff7c\036\uff7c\042\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072" +
    "\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c" +
    "\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107" +
    "\uff7c\110\uff7c\112\uff7c\113\uff7c\116\uff7c\117\uff7c\120\uff7c" +
    "\123\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c\130\uff7c\131" +
    "\uff7c\001\002\000\104\045\113\046\077\047\110\050\116" +
    "\051\065\053\105\054\074\055\075\056\111\057\124\060" +
    "\071\061\112\062\073\063\066\064\121\065\101\066\076" +
    "\067\067\070\100\071\107\072\122\073\064\076\063\077" +
    "\115\100\123\101\114\102\117\103\120\104\106\106\070" +
    "\107\072\110\104\120\uff9e\001\002\000\202\003\uff8a\004" +
    "\uff8a\010\uff8a\011\uff8a\015\uff8a\016\uff8a\021\uff8a\022\uff8a" +
    "\024\uff8a\025\uff8a\026\uff8a\030\uff8a\031\uff8a\036\uff8a\042" +
    "\uff8a\044\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\052\uff8a\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060" +
    "\uff8a\061\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a" +
    "\067\uff8a\070\uff8a\071\uff8a\072\uff8a\073\uff8a\074\uff8a\075" +
    "\uff8a\076\uff8a\077\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\105\uff8a\106\uff8a\107\uff8a\110\uff8a\112\uff8a\113" +
    "\uff8a\116\uff8a\117\uff8a\120\uff8a\123\uff8a\124\uff8a\125\uff8a" +
    "\126\uff8a\127\uff8a\130\uff8a\131\uff8a\001\002\000\054\002" +
    "\ufffb\003\034\004\010\010\004\011\011\015\041\021\044" +
    "\025\045\026\042\031\013\042\036\074\005\075\022\112" +
    "\007\123\027\124\006\125\017\126\024\127\032\130\026" +
    "\131\016\001\002\000\202\003\uff88\004\uff88\010\uff88\011" +
    "\uff88\015\uff88\016\uff88\021\uff88\022\uff88\024\uff88\025\uff88" +
    "\026\uff88\030\uff88\031\uff88\036\uff88\042\uff88\044\uff88\045" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061\uff88\062" +
    "\uff88\063\uff88\064\uff88\065\uff88\066\uff88\067\uff88\070\uff88" +
    "\071\uff88\072\uff88\073\uff88\074\uff88\075\uff88\076\uff88\077" +
    "\uff88\100\uff88\101\uff88\102\uff88\103\uff88\104\uff88\105\uff88" +
    "\106\uff88\107\uff88\110\uff88\112\uff88\113\uff88\116\uff88\117" +
    "\uff88\120\uff88\123\uff88\124\uff88\125\uff88\126\uff88\127\uff88" +
    "\130\uff88\131\uff88\001\002\000\202\003\uff8d\004\uff8d\010" +
    "\uff8d\011\uff8d\015\uff8d\016\uff8d\021\uff8d\022\uff8d\024\uff8d" +
    "\025\uff8d\026\uff8d\030\uff8d\031\uff8d\036\uff8d\042\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061" +
    "\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d" +
    "\070\uff8d\071\uff8d\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076" +
    "\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d" +
    "\105\uff8d\106\uff8d\107\uff8d\110\uff8d\112\uff8d\113\uff8d\116" +
    "\uff8d\117\uff8d\120\uff8d\123\uff8d\124\uff8d\125\uff8d\126\uff8d" +
    "\127\uff8d\130\uff8d\131\uff8d\001\002\000\010\003\053\004" +
    "\055\120\052\001\002\000\054\002\ufffb\003\034\004\010" +
    "\010\004\011\011\015\041\021\044\025\045\026\042\031" +
    "\013\042\036\074\005\075\022\112\007\123\027\124\006" +
    "\125\017\126\024\127\032\130\026\131\016\001\002\000" +
    "\202\003\uff89\004\uff89\010\uff89\011\uff89\015\uff89\016\uff89" +
    "\021\uff89\022\uff89\024\uff89\025\uff89\026\uff89\030\uff89\031" +
    "\uff89\036\uff89\042\uff89\044\uff89\045\uff89\046\uff89\047\uff89" +
    "\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\055\uff89\056" +
    "\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89" +
    "\065\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073" +
    "\uff89\074\uff89\075\uff89\076\uff89\077\uff89\100\uff89\101\uff89" +
    "\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89\110" +
    "\uff89\112\uff89\113\uff89\116\uff89\117\uff89\120\uff89\123\uff89" +
    "\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89\131\uff89\001" +
    "\002\000\004\120\050\001\002\000\054\002\ufff6\003\ufff6" +
    "\004\ufff6\010\ufff6\011\ufff6\015\ufff6\021\ufff6\025\ufff6\026" +
    "\ufff6\031\ufff6\042\ufff6\074\ufff6\075\ufff6\112\ufff6\123\ufff6" +
    "\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130\ufff6\131\ufff6\001" +
    "\002\000\054\002\ufff7\003\ufff7\004\ufff7\010\ufff7\011\ufff7" +
    "\015\ufff7\021\ufff7\025\ufff7\026\ufff7\031\ufff7\042\ufff7\074" +
    "\ufff7\075\ufff7\112\ufff7\123\ufff7\124\ufff7\125\ufff7\126\ufff7" +
    "\127\ufff7\130\ufff7\131\ufff7\001\002\000\010\003\uff58\004" +
    "\uff58\120\uff58\001\002\000\004\004\047\001\002\000\004" +
    "\120\046\001\002\000\010\003\uff56\004\uff56\120\uff56\001" +
    "\002\000\010\003\uff5a\004\uff5a\120\uff5a\001\002\000\202" +
    "\003\uff9b\004\uff9b\010\uff9b\011\uff9b\015\uff9b\016\uff9b\021" +
    "\uff9b\022\uff9b\024\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b" +
    "\036\uff9b\042\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b" +
    "\057\uff9b\060\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065" +
    "\uff9b\066\uff9b\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b" +
    "\074\uff9b\075\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102" +
    "\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b" +
    "\112\uff9b\113\uff9b\116\uff9b\117\uff9b\120\uff9b\123\uff9b\124" +
    "\uff9b\125\uff9b\126\uff9b\127\uff9b\130\uff9b\131\uff9b\001\002" +
    "\000\010\003\uff57\004\uff57\120\uff57\001\002\000\010\003" +
    "\uff5c\004\uff5c\120\uff5c\001\002\000\054\002\ufff9\003\ufff9" +
    "\004\ufff9\010\ufff9\011\ufff9\015\ufff9\021\ufff9\025\ufff9\026" +
    "\ufff9\031\ufff9\042\ufff9\074\ufff9\075\ufff9\112\ufff9\123\ufff9" +
    "\124\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\001" +
    "\002\000\202\003\uff9a\004\uff9a\010\uff9a\011\uff9a\015\uff9a" +
    "\016\uff9a\021\uff9a\022\uff9a\024\uff9a\025\uff9a\026\uff9a\030" +
    "\uff9a\031\uff9a\036\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a" +
    "\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a" +
    "\064\uff9a\065\uff9a\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072" +
    "\uff9a\073\uff9a\074\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a" +
    "\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107" +
    "\uff9a\110\uff9a\112\uff9a\113\uff9a\116\uff9a\117\uff9a\120\uff9a" +
    "\123\uff9a\124\uff9a\125\uff9a\126\uff9a\127\uff9a\130\uff9a\131" +
    "\uff9a\001\002\000\054\002\uffba\003\uffba\004\uffba\010\uffba" +
    "\011\uffba\015\uffba\021\uffba\025\uffba\026\uffba\031\uffba\042" +
    "\uffba\074\uffba\075\uffba\112\uffba\123\uffba\124\uffba\125\uffba" +
    "\126\uffba\127\uffba\130\uffba\131\uffba\001\002\000\004\002" +
    "\ufffe\001\002\000\054\002\ufffa\003\ufffa\004\ufffa\010\ufffa" +
    "\011\ufffa\015\ufffa\021\ufffa\025\ufffa\026\ufffa\031\ufffa\042" +
    "\ufffa\074\ufffa\075\ufffa\112\ufffa\123\ufffa\124\ufffa\125\ufffa" +
    "\126\ufffa\127\ufffa\130\ufffa\131\ufffa\001\002\000\004\120" +
    "\377\001\002\000\072\004\uffb1\010\uffb1\011\uffb1\015\uffb1" +
    "\016\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026\uffb1\030" +
    "\uffb1\031\uffb1\036\uffb1\042\uffb1\044\uffb1\074\uffb1\075\uffb1" +
    "\112\uffb1\116\uffb1\117\uffb1\120\uffb1\123\uffb1\124\uffb1\125" +
    "\uffb1\126\uffb1\127\uffb1\130\uffb1\131\uffb1\001\002\000\012" +
    "\052\057\106\060\112\056\120\uffb0\001\002\000\024\010" +
    "\004\011\152\015\041\021\044\025\045\026\042\031\013" +
    "\042\036\113\146\001\002\000\004\004\130\001\002\000" +
    "\030\004\061\074\005\075\022\112\007\123\027\124\006" +
    "\125\017\126\024\127\032\130\026\131\016\001\002\000" +
    "\202\003\uff90\004\uff90\010\uff90\011\uff90\015\uff90\016\uff90" +
    "\021\uff90\022\uff90\024\uff90\025\uff90\026\uff90\030\uff90\031" +
    "\uff90\036\uff90\042\uff90\044\uff90\045\uff90\046\uff90\047\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\005\075\022\076\uff90\077\uff90\100\uff90\101\uff90" +
    "\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110" +
    "\uff90\112\133\113\uff90\116\uff90\117\uff90\120\uff90\123\uff90" +
    "\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90\131\uff90\001" +
    "\002\000\174\004\uffaf\010\uffaf\011\uffaf\015\uffaf\016\uffaf" +
    "\021\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031" +
    "\uffaf\036\uffaf\042\uffaf\044\uffaf\045\113\046\077\047\110" +
    "\050\116\051\065\052\103\053\105\054\074\055\075\056" +
    "\111\057\124\060\071\061\112\062\073\063\066\064\121" +
    "\065\101\066\076\067\067\070\100\071\107\072\122\073" +
    "\064\074\uffaf\075\uffaf\076\063\077\115\100\123\101\114" +
    "\102\117\103\120\104\106\106\070\107\072\110\104\112" +
    "\uffaf\116\uffaf\117\uffaf\120\uffaf\123\uffaf\124\uffaf\125\uffaf" +
    "\126\uffaf\127\uffaf\130\uffaf\131\uffaf\001\002\000\030\004" +
    "\uff62\074\uff62\075\uff62\112\uff62\123\uff62\124\uff62\125\uff62" +
    "\126\uff62\127\uff62\130\uff62\131\uff62\001\002\000\030\004" +
    "\uff63\074\uff63\075\uff63\112\uff63\123\uff63\124\uff63\125\uff63" +
    "\126\uff63\127\uff63\130\uff63\131\uff63\001\002\000\030\004" +
    "\uff77\074\uff77\075\uff77\112\uff77\123\uff77\124\uff77\125\uff77" +
    "\126\uff77\127\uff77\130\uff77\131\uff77\001\002\000\030\004" +
    "\uff6d\074\uff6d\075\uff6d\112\uff6d\123\uff6d\124\uff6d\125\uff6d" +
    "\126\uff6d\127\uff6d\130\uff6d\131\uff6d\001\002\000\030\004" +
    "\uff6e\074\uff6e\075\uff6e\112\uff6e\123\uff6e\124\uff6e\125\uff6e" +
    "\126\uff6e\127\uff6e\130\uff6e\131\uff6e\001\002\000\030\004" +
    "\uff67\074\uff67\075\uff67\112\uff67\123\uff67\124\uff67\125\uff67" +
    "\126\uff67\127\uff67\130\uff67\131\uff67\001\002\000\030\004" +
    "\uff6f\074\uff6f\075\uff6f\112\uff6f\123\uff6f\124\uff6f\125\uff6f" +
    "\126\uff6f\127\uff6f\130\uff6f\131\uff6f\001\002\000\030\004" +
    "\uff6a\074\uff6a\075\uff6a\112\uff6a\123\uff6a\124\uff6a\125\uff6a" +
    "\126\uff6a\127\uff6a\130\uff6a\131\uff6a\001\002\000\030\004" +
    "\uff72\074\uff72\075\uff72\112\uff72\123\uff72\124\uff72\125\uff72" +
    "\126\uff72\127\uff72\130\uff72\131\uff72\001\002\000\030\004" +
    "\uff75\074\uff75\075\uff75\112\uff75\123\uff75\124\uff75\125\uff75" +
    "\126\uff75\127\uff75\130\uff75\131\uff75\001\002\000\030\004" +
    "\uff76\074\uff76\075\uff76\112\uff76\123\uff76\124\uff76\125\uff76" +
    "\126\uff76\127\uff76\130\uff76\131\uff76\001\002\000\030\004" +
    "\uff69\074\uff69\075\uff69\112\uff69\123\uff69\124\uff69\125\uff69" +
    "\126\uff69\127\uff69\130\uff69\131\uff69\001\002\000\030\004" +
    "\uff79\074\uff79\075\uff79\112\uff79\123\uff79\124\uff79\125\uff79" +
    "\126\uff79\127\uff79\130\uff79\131\uff79\001\002\000\030\004" +
    "\uff66\074\uff66\075\uff66\112\uff66\123\uff66\124\uff66\125\uff66" +
    "\126\uff66\127\uff66\130\uff66\131\uff66\001\002\000\030\004" +
    "\uff6c\074\uff6c\075\uff6c\112\uff6c\123\uff6c\124\uff6c\125\uff6c" +
    "\126\uff6c\127\uff6c\130\uff6c\131\uff6c\001\002\000\030\004" +
    "\061\074\005\075\022\112\007\123\027\124\006\125\017" +
    "\126\024\127\032\130\026\131\016\001\002\000\004\004" +
    "\130\001\002\000\030\004\uff6b\074\uff6b\075\uff6b\112\uff6b" +
    "\123\uff6b\124\uff6b\125\uff6b\126\uff6b\127\uff6b\130\uff6b\131" +
    "\uff6b\001\002\000\030\004\uff73\074\uff73\075\uff73\112\uff73" +
    "\123\uff73\124\uff73\125\uff73\126\uff73\127\uff73\130\uff73\131" +
    "\uff73\001\002\000\030\004\061\074\005\075\022\112\007" +
    "\123\027\124\006\125\017\126\024\127\032\130\026\131" +
    "\016\001\002\000\030\004\uff65\074\uff65\075\uff65\112\uff65" +
    "\123\uff65\124\uff65\125\uff65\126\uff65\127\uff65\130\uff65\131" +
    "\uff65\001\002\000\030\004\uff7b\074\uff7b\075\uff7b\112\uff7b" +
    "\123\uff7b\124\uff7b\125\uff7b\126\uff7b\127\uff7b\130\uff7b\131" +
    "\uff7b\001\002\000\030\004\uff74\074\uff74\075\uff74\112\uff74" +
    "\123\uff74\124\uff74\125\uff74\126\uff74\127\uff74\130\uff74\131" +
    "\uff74\001\002\000\030\004\uff70\074\uff70\075\uff70\112\uff70" +
    "\123\uff70\124\uff70\125\uff70\126\uff70\127\uff70\130\uff70\131" +
    "\uff70\001\002\000\030\004\uff7a\074\uff7a\075\uff7a\112\uff7a" +
    "\123\uff7a\124\uff7a\125\uff7a\126\uff7a\127\uff7a\130\uff7a\131" +
    "\uff7a\001\002\000\030\004\uff5e\074\uff5e\075\uff5e\112\uff5e" +
    "\123\uff5e\124\uff5e\125\uff5e\126\uff5e\127\uff5e\130\uff5e\131" +
    "\uff5e\001\002\000\030\004\uff5d\074\uff5d\075\uff5d\112\uff5d" +
    "\123\uff5d\124\uff5d\125\uff5d\126\uff5d\127\uff5d\130\uff5d\131" +
    "\uff5d\001\002\000\030\004\uff78\074\uff78\075\uff78\112\uff78" +
    "\123\uff78\124\uff78\125\uff78\126\uff78\127\uff78\130\uff78\131" +
    "\uff78\001\002\000\030\004\uff61\074\uff61\075\uff61\112\uff61" +
    "\123\uff61\124\uff61\125\uff61\126\uff61\127\uff61\130\uff61\131" +
    "\uff61\001\002\000\030\004\uff60\074\uff60\075\uff60\112\uff60" +
    "\123\uff60\124\uff60\125\uff60\126\uff60\127\uff60\130\uff60\131" +
    "\uff60\001\002\000\030\004\uff68\074\uff68\075\uff68\112\uff68" +
    "\123\uff68\124\uff68\125\uff68\126\uff68\127\uff68\130\uff68\131" +
    "\uff68\001\002\000\030\004\uff64\074\uff64\075\uff64\112\uff64" +
    "\123\uff64\124\uff64\125\uff64\126\uff64\127\uff64\130\uff64\131" +
    "\uff64\001\002\000\030\004\uff5f\074\uff5f\075\uff5f\112\uff5f" +
    "\123\uff5f\124\uff5f\125\uff5f\126\uff5f\127\uff5f\130\uff5f\131" +
    "\uff5f\001\002\000\030\004\uff71\074\uff71\075\uff71\112\uff71" +
    "\123\uff71\124\uff71\125\uff71\126\uff71\127\uff71\130\uff71\131" +
    "\uff71\001\002\000\104\045\113\046\077\047\110\050\116" +
    "\051\065\053\105\054\074\055\075\056\111\057\124\060" +
    "\071\061\112\062\073\063\066\064\121\065\101\066\076" +
    "\067\067\070\100\071\107\072\122\073\064\076\063\077" +
    "\115\100\123\101\114\102\117\103\120\104\106\105\126" +
    "\106\070\107\072\110\104\001\002\000\030\004\061\074" +
    "\005\075\022\112\007\123\027\124\006\125\017\126\024" +
    "\127\032\130\026\131\016\001\002\000\202\003\uff97\004" +
    "\uff97\010\uff97\011\uff97\015\uff97\016\uff97\021\uff97\022\uff97" +
    "\024\uff97\025\uff97\026\uff97\030\uff97\031\uff97\036\uff97\042" +
    "\uff97\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\105\054\074\055\075\056\111\057\124\060" +
    "\071\061\112\062\073\063\066\064\121\065\101\066\076" +
    "\067\067\070\100\071\107\072\122\073\064\074\uff97\075" +
    "\uff97\076\063\077\115\100\123\101\114\102\117\103\120" +
    "\104\uff97\105\uff97\106\070\107\072\110\104\112\uff97\113" +
    "\uff97\116\uff97\117\uff97\120\uff97\123\uff97\124\uff97\125\uff97" +
    "\126\uff97\127\uff97\130\uff97\131\uff97\001\002\000\076\004" +
    "\uffb0\010\uffb0\011\uffb0\015\uffb0\016\uffb0\021\uffb0\022\uffb0" +
    "\024\uffb0\025\uffb0\026\uffb0\030\uffb0\031\uffb0\036\uffb0\042" +
    "\uffb0\044\uffb0\052\057\074\uffb0\075\uffb0\106\060\112\uffb0" +
    "\116\uffb0\117\uffb0\120\uffb0\123\uffb0\124\uffb0\125\uffb0\126" +
    "\uffb0\127\uffb0\130\uffb0\131\uffb0\001\002\000\072\004\uffad" +
    "\010\uffad\011\uffad\015\uffad\016\uffad\021\uffad\022\uffad\024" +
    "\uffad\025\uffad\026\uffad\030\uffad\031\uffad\036\uffad\042\uffad" +
    "\044\uffad\074\uffad\075\uffad\112\uffad\116\uffad\117\uffad\120" +
    "\uffad\123\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130\uffad" +
    "\131\uffad\001\002\000\202\003\uff98\004\uff98\010\uff98\011" +
    "\uff98\015\uff98\016\uff98\021\uff98\022\uff98\024\uff98\025\uff98" +
    "\026\uff98\030\uff98\031\uff98\036\uff98\042\uff98\044\uff98\045" +
    "\113\046\077\047\110\050\116\051\065\052\uff98\053\105" +
    "\054\074\055\075\056\111\057\124\060\071\061\112\062" +
    "\073\063\066\064\121\065\101\066\076\067\067\070\100" +
    "\071\107\072\122\073\064\074\uff98\075\uff98\076\063\077" +
    "\115\100\123\101\114\102\117\103\120\104\106\105\uff98" +
    "\106\070\107\072\110\104\112\uff98\113\uff98\116\uff98\117" +
    "\uff98\120\uff98\123\uff98\124\uff98\125\uff98\126\uff98\127\uff98" +
    "\130\uff98\131\uff98\001\002\000\032\004\061\074\005\075" +
    "\022\112\007\113\140\123\027\124\006\125\017\126\024" +
    "\127\032\130\026\131\016\001\002\000\202\003\uff99\004" +
    "\uff99\010\uff99\011\uff99\015\uff99\016\uff99\021\uff99\022\uff99" +
    "\024\uff99\025\uff99\026\uff99\030\uff99\031\uff99\036\uff99\042" +
    "\uff99\044\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99" +
    "\052\uff99\053\uff99\054\uff99\055\uff99\056\uff99\057\uff99\060" +
    "\uff99\061\uff99\062\uff99\063\uff99\064\uff99\065\uff99\066\uff99" +
    "\067\uff99\070\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075" +
    "\uff99\076\uff99\077\uff99\100\uff99\101\uff99\102\uff99\103\uff99" +
    "\104\uff99\105\uff99\106\uff99\107\uff99\110\uff99\112\uff99\113" +
    "\uff99\116\uff99\117\uff99\120\uff99\123\uff99\124\uff99\125\uff99" +
    "\126\uff99\127\uff99\130\uff99\131\uff99\001\002\000\006\052" +
    "\142\113\uffaa\001\002\000\004\113\141\001\002\000\106" +
    "\045\113\046\077\047\110\050\116\051\065\052\uffa9\053" +
    "\105\054\074\055\075\056\111\057\124\060\071\061\112" +
    "\062\073\063\066\064\121\065\101\066\076\067\067\070" +
    "\100\071\107\072\122\073\064\076\063\077\115\100\123" +
    "\101\114\102\117\103\120\104\106\106\070\107\072\110" +
    "\104\113\uffa9\001\002\000\202\003\uff8e\004\uff8e\010\uff8e" +
    "\011\uff8e\015\uff8e\016\uff8e\021\uff8e\022\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\030\uff8e\031\uff8e\036\uff8e\042\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053" +
    "\uff8e\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e" +
    "\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070" +
    "\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e" +
    "\077\uff8e\100\uff8e\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105" +
    "\uff8e\106\uff8e\107\uff8e\110\uff8e\112\uff8e\113\uff8e\116\uff8e" +
    "\117\uff8e\120\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127" +
    "\uff8e\130\uff8e\131\uff8e\001\002\000\202\003\uff8f\004\uff8f" +
    "\010\uff8f\011\uff8f\015\uff8f\016\uff8f\021\uff8f\022\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\030\uff8f\031\uff8f\036\uff8f\042\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052" +
    "\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f" +
    "\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067" +
    "\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f" +
    "\076\uff8f\077\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104" +
    "\uff8f\105\uff8f\106\uff8f\107\uff8f\110\uff8f\112\uff8f\113\uff8f" +
    "\116\uff8f\117\uff8f\120\uff8f\123\uff8f\124\uff8f\125\uff8f\126" +
    "\uff8f\127\uff8f\130\uff8f\131\uff8f\001\002\000\030\004\061" +
    "\074\005\075\022\112\007\123\027\124\006\125\017\126" +
    "\024\127\032\130\026\131\016\001\002\000\004\113\uffab" +
    "\001\002\000\072\004\uffae\010\uffae\011\uffae\015\uffae\016" +
    "\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026\uffae\030\uffae" +
    "\031\uffae\036\uffae\042\uffae\044\uffae\074\uffae\075\uffae\112" +
    "\uffae\116\uffae\117\uffae\120\uffae\123\uffae\124\uffae\125\uffae" +
    "\126\uffae\127\uffae\130\uffae\131\uffae\001\002\000\006\052" +
    "\375\113\uffa7\001\002\000\004\116\ufff3\001\002\000\004" +
    "\113\374\001\002\000\004\004\373\001\002\000\004\116" +
    "\160\001\002\000\020\010\004\015\041\021\044\025\045" +
    "\026\042\031\013\042\036\001\002\000\004\004\154\001" +
    "\002\000\010\052\uffa5\106\155\113\uffa5\001\002\000\022" +
    "\004\156\123\027\124\006\125\017\126\024\127\032\130" +
    "\026\131\016\001\002\000\010\052\uff90\112\133\113\uff90" +
    "\001\002\000\006\052\uffa4\113\uffa4\001\002\000\072\004" +
    "\010\010\004\011\166\015\041\016\204\021\044\022\164" +
    "\024\177\025\045\026\042\030\172\031\013\036\176\042" +
    "\036\044\206\074\005\075\022\112\007\116\170\117\uffbd" +
    "\120\207\123\027\124\006\125\017\126\024\127\032\130" +
    "\026\131\016\001\002\000\054\002\ufff5\003\ufff5\004\ufff5" +
    "\010\ufff5\011\ufff5\015\ufff5\021\ufff5\025\ufff5\026\ufff5\031" +
    "\ufff5\042\ufff5\074\ufff5\075\ufff5\112\ufff5\123\ufff5\124\ufff5" +
    "\125\ufff5\126\ufff5\127\ufff5\130\ufff5\131\ufff5\001\002\000" +
    "\072\004\uffec\010\uffec\011\uffec\015\uffec\016\uffec\021\uffec" +
    "\022\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec\036" +
    "\uffec\042\uffec\044\uffec\074\uffec\075\uffec\112\uffec\116\uffec" +
    "\117\uffec\120\uffec\123\uffec\124\uffec\125\uffec\126\uffec\127" +
    "\uffec\130\uffec\131\uffec\001\002\000\072\004\uffea\010\uffea" +
    "\011\uffea\015\uffea\016\uffea\021\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\030\uffea\031\uffea\036\uffea\042\uffea\044\uffea" +
    "\074\uffea\075\uffea\112\uffea\116\uffea\117\uffea\120\uffea\123" +
    "\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130\uffea\131\uffea" +
    "\001\002\000\004\112\352\001\002\000\072\004\uffef\010" +
    "\uffef\011\uffef\015\uffef\016\uffef\021\uffef\022\uffef\024\uffef" +
    "\025\uffef\026\uffef\030\uffef\031\uffef\036\uffef\042\uffef\044" +
    "\uffef\074\uffef\075\uffef\112\uffef\116\uffef\117\uffef\120\uffef" +
    "\123\uffef\124\uffef\125\uffef\126\uffef\127\uffef\130\uffef\131" +
    "\uffef\001\002\000\020\010\004\015\041\021\044\025\045" +
    "\026\042\031\013\042\036\001\002\000\004\004\130\001" +
    "\002\000\072\004\010\010\004\011\166\015\041\016\204" +
    "\021\044\022\164\024\177\025\045\026\042\030\172\031" +
    "\013\036\176\042\036\044\206\074\005\075\022\112\007" +
    "\116\170\117\uffbd\120\207\123\027\124\006\125\017\126" +
    "\024\127\032\130\026\131\016\001\002\000\004\120\241" +
    "\001\002\000\030\004\061\074\005\075\022\112\007\123" +
    "\027\124\006\125\017\126\024\127\032\130\026\131\016" +
    "\001\002\000\172\004\uff9e\010\uff9e\011\uff9e\015\uff9e\016" +
    "\uff9e\021\uff9e\022\uff9e\024\uff9e\025\uff9e\026\uff9e\030\uff9e" +
    "\031\uff9e\036\uff9e\042\uff9e\044\uff9e\045\113\046\077\047" +
    "\110\050\116\051\065\053\105\054\074\055\075\056\111" +
    "\057\124\060\071\061\112\062\073\063\066\064\121\065" +
    "\101\066\076\067\067\070\100\071\107\072\122\073\064" +
    "\074\uff9e\075\uff9e\076\063\077\115\100\123\101\114\102" +
    "\117\103\120\104\106\106\070\107\072\110\104\112\uff9e" +
    "\116\uff9e\117\uff9e\120\243\123\uff9e\124\uff9e\125\uff9e\126" +
    "\uff9e\127\uff9e\130\uff9e\131\uff9e\001\002\000\072\004\uffed" +
    "\010\uffed\011\uffed\015\uffed\016\uffed\021\uffed\022\uffed\024" +
    "\uffed\025\uffed\026\uffed\030\uffed\031\uffed\036\uffed\042\uffed" +
    "\044\uffed\074\uffed\075\uffed\112\uffed\116\uffed\117\uffed\120" +
    "\uffed\123\uffed\124\uffed\125\uffed\126\uffed\127\uffed\130\uffed" +
    "\131\uffed\001\002\000\072\004\010\010\004\011\166\015" +
    "\041\016\204\021\044\022\164\024\177\025\045\026\042" +
    "\030\172\031\013\036\176\042\036\044\206\074\005\075" +
    "\022\112\007\116\170\117\uffbd\120\207\123\027\124\006" +
    "\125\017\126\024\127\032\130\026\131\016\001\002\000" +
    "\004\112\266\001\002\000\006\003\230\112\227\001\002" +
    "\000\072\004\uffee\010\uffee\011\uffee\015\uffee\016\uffee\021" +
    "\uffee\022\uffee\024\uffee\025\uffee\026\uffee\030\uffee\031\uffee" +
    "\036\uffee\042\uffee\044\uffee\074\uffee\075\uffee\112\uffee\116" +
    "\uffee\117\uffee\120\uffee\123\uffee\124\uffee\125\uffee\126\uffee" +
    "\127\uffee\130\uffee\131\uffee\001\002\000\072\004\uffeb\010" +
    "\uffeb\011\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\030\uffeb\031\uffeb\036\uffeb\042\uffeb\044" +
    "\uffeb\074\uffeb\075\uffeb\112\uffeb\116\uffeb\117\uffeb\120\uffeb" +
    "\123\uffeb\124\uffeb\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131" +
    "\uffeb\001\002\000\072\004\010\010\004\011\166\015\041" +
    "\016\204\021\044\022\164\024\177\025\045\026\042\030" +
    "\172\031\013\036\176\042\036\044\206\074\005\075\022" +
    "\112\007\116\170\117\uffbd\120\207\123\027\124\006\125" +
    "\017\126\024\127\032\130\026\131\016\001\002\000\072" +
    "\004\uff9f\010\uff9f\011\uff9f\015\uff9f\016\uff9f\021\uff9f\022" +
    "\uff9f\024\uff9f\025\uff9f\026\uff9f\030\uff9f\031\uff9f\036\uff9f" +
    "\042\uff9f\044\uff9f\074\uff9f\075\uff9f\112\uff9f\116\uff9f\117" +
    "\uff9f\120\224\123\uff9f\124\uff9f\125\uff9f\126\uff9f\127\uff9f" +
    "\130\uff9f\131\uff9f\001\002\000\004\003\222\001\002\000" +
    "\004\117\221\001\002\000\004\112\211\001\002\000\072" +
    "\004\010\010\004\011\166\015\041\016\204\021\044\022" +
    "\164\024\177\025\045\026\042\030\172\031\013\036\176" +
    "\042\036\044\206\074\005\075\022\112\007\116\170\117" +
    "\uffbd\120\207\123\027\124\006\125\017\126\024\127\032" +
    "\130\026\131\016\001\002\000\072\004\uffc4\010\uffc4\011" +
    "\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\030\uffc4\031\uffc4\036\uffc4\042\uffc4\044\uffc4\074" +
    "\uffc4\075\uffc4\112\uffc4\116\uffc4\117\uffc4\120\uffc4\123\uffc4" +
    "\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4\131\uffc4\001" +
    "\002\000\030\004\061\074\005\075\022\112\007\123\027" +
    "\124\006\125\017\126\024\127\032\130\026\131\016\001" +
    "\002\000\104\045\113\046\077\047\110\050\116\051\065" +
    "\053\105\054\074\055\075\056\111\057\124\060\071\061" +
    "\112\062\073\063\066\064\121\065\101\066\076\067\067" +
    "\070\100\071\107\072\122\073\064\076\063\077\115\100" +
    "\123\101\114\102\117\103\120\104\106\106\070\107\072" +
    "\110\104\113\213\001\002\000\074\004\010\006\215\010" +
    "\004\011\166\015\041\016\204\021\044\022\164\024\177" +
    "\025\045\026\042\030\172\031\013\036\176\042\036\044" +
    "\206\074\005\075\022\112\007\116\170\117\uffbd\120\207" +
    "\123\027\124\006\125\017\126\024\127\032\130\026\131" +
    "\016\001\002\000\072\004\uffd6\010\uffd6\011\uffd6\015\uffd6" +
    "\016\uffd6\021\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\030" +
    "\uffd6\031\uffd6\036\uffd6\042\uffd6\044\uffd6\074\uffd6\075\uffd6" +
    "\112\uffd6\116\uffd6\117\uffd6\120\uffd6\123\uffd6\124\uffd6\125" +
    "\uffd6\126\uffd6\127\uffd6\130\uffd6\131\uffd6\001\002\000\004" +
    "\120\217\001\002\000\072\004\uffd4\010\uffd4\011\uffd4\015" +
    "\uffd4\016\uffd4\021\uffd4\022\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\030\uffd4\031\uffd4\036\uffd4\042\uffd4\044\uffd4\074\uffd4\075" +
    "\uffd4\112\uffd4\116\uffd4\117\uffd4\120\uffd4\123\uffd4\124\uffd4" +
    "\125\uffd4\126\uffd4\127\uffd4\130\uffd4\131\uffd4\001\002\000" +
    "\074\004\010\006\215\010\004\011\166\015\041\016\204" +
    "\021\044\022\164\024\177\025\045\026\042\030\172\031" +
    "\013\036\176\042\036\044\206\074\005\075\022\112\007" +
    "\116\170\117\uffbd\120\207\123\027\124\006\125\017\126" +
    "\024\127\032\130\026\131\016\001\002\000\072\004\uffd5" +
    "\010\uffd5\011\uffd5\015\uffd5\016\uffd5\021\uffd5\022\uffd5\024" +
    "\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\036\uffd5\042\uffd5" +
    "\044\uffd5\074\uffd5\075\uffd5\112\uffd5\116\uffd5\117\uffd5\120" +
    "\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\130\uffd5" +
    "\131\uffd5\001\002\000\054\002\ufff2\003\ufff2\004\ufff2\010" +
    "\ufff2\011\ufff2\015\ufff2\021\ufff2\025\ufff2\026\ufff2\031\ufff2" +
    "\042\ufff2\074\ufff2\075\ufff2\112\ufff2\123\ufff2\124\ufff2\125" +
    "\ufff2\126\ufff2\127\ufff2\130\ufff2\131\ufff2\001\002\000\072" +
    "\004\010\010\004\011\166\015\041\016\204\021\044\022" +
    "\164\024\177\025\045\026\042\030\172\031\013\036\176" +
    "\042\036\044\206\074\005\075\022\112\007\116\170\117" +
    "\uffbd\120\207\123\027\124\006\125\017\126\024\127\032" +
    "\130\026\131\016\001\002\000\072\004\uffbe\010\uffbe\011" +
    "\uffbe\015\uffbe\016\uffbe\021\uffbe\022\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\030\uffbe\031\uffbe\036\uffbe\042\uffbe\044\uffbe\074" +
    "\uffbe\075\uffbe\112\uffbe\116\uffbe\117\uffbe\120\uffbe\123\uffbe" +
    "\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130\uffbe\131\uffbe\001" +
    "\002\000\072\004\010\010\004\011\166\015\041\016\204" +
    "\021\044\022\164\024\177\025\045\026\042\030\172\031" +
    "\013\036\176\042\036\044\206\074\005\075\022\112\007" +
    "\116\170\117\uffbd\120\207\123\027\124\006\125\017\126" +
    "\024\127\032\130\026\131\016\001\002\000\072\004\uffc3" +
    "\010\uffc3\011\uffc3\015\uffc3\016\uffc3\021\uffc3\022\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\036\uffc3\042\uffc3" +
    "\044\uffc3\074\uffc3\075\uffc3\112\uffc3\116\uffc3\117\uffc3\120" +
    "\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3" +
    "\131\uffc3\001\002\000\072\004\uffc0\010\uffc0\011\uffc0\015" +
    "\uffc0\016\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\030\uffc0\031\uffc0\036\uffc0\042\uffc0\044\uffc0\074\uffc0\075" +
    "\uffc0\112\uffc0\116\uffc0\117\uffc0\120\uffc0\123\uffc0\124\uffc0" +
    "\125\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0\001\002\000" +
    "\032\003\251\004\061\074\005\075\022\112\007\123\027" +
    "\124\006\125\017\126\024\127\032\130\026\131\016\001" +
    "\002\000\072\004\010\010\004\011\166\015\041\016\204" +
    "\021\044\022\164\024\177\025\045\026\042\030\172\031" +
    "\013\036\176\042\036\044\206\074\005\075\022\112\007" +
    "\116\170\117\uffbd\120\207\123\027\124\006\125\017\126" +
    "\024\127\032\130\026\131\016\001\002\000\106\045\113" +
    "\046\077\047\110\050\116\051\065\053\105\054\074\055" +
    "\075\056\111\057\124\060\071\061\112\062\073\063\066" +
    "\064\121\065\101\066\076\067\067\070\100\071\107\072" +
    "\122\073\064\076\063\077\115\100\123\101\114\102\117" +
    "\103\120\104\106\106\070\107\072\110\104\113\244\120" +
    "\243\001\002\000\072\004\010\010\004\011\166\015\041" +
    "\016\235\021\044\022\164\024\177\025\045\026\042\030" +
    "\172\031\013\036\176\042\036\044\206\074\005\075\022" +
    "\112\007\116\170\117\uffbd\120\207\123\027\124\006\125" +
    "\017\126\024\127\032\130\026\131\016\001\002\000\072" +
    "\004\uffe1\010\uffe1\011\uffe1\015\uffe1\016\uffe1\021\uffe1\022" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031\uffe1\036\uffe1" +
    "\042\uffe1\044\uffe1\074\uffe1\075\uffe1\112\uffe1\116\uffe1\117" +
    "\uffe1\120\uffe1\123\uffe1\124\uffe1\125\uffe1\126\uffe1\127\uffe1" +
    "\130\uffe1\131\uffe1\001\002\000\072\004\uffe6\010\uffe6\011" +
    "\uffe6\015\uffe6\016\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6" +
    "\026\uffe6\030\uffe6\031\uffe6\036\uffe6\042\uffe6\044\uffe6\074" +
    "\uffe6\075\uffe6\112\uffe6\116\uffe6\117\uffe6\120\241\123\uffe6" +
    "\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\001" +
    "\002\000\074\003\222\004\010\010\004\011\166\015\041" +
    "\016\204\021\044\022\164\024\177\025\045\026\042\030" +
    "\172\031\013\036\176\042\036\044\206\074\005\075\022" +
    "\112\007\116\170\117\uffbd\120\207\123\027\124\006\125" +
    "\017\126\024\127\032\130\026\131\016\001\002\000\072" +
    "\004\uffe5\010\uffe5\011\uffe5\015\uffe5\016\uffe5\021\uffe5\022" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\031\uffe5\036\uffe5" +
    "\042\uffe5\044\uffe5\074\uffe5\075\uffe5\112\uffe5\116\uffe5\117" +
    "\uffe5\120\uffe5\123\uffe5\124\uffe5\125\uffe5\126\uffe5\127\uffe5" +
    "\130\uffe5\131\uffe5\001\002\000\072\004\uffe7\010\uffe7\011" +
    "\uffe7\015\uffe7\016\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\030\uffe7\031\uffe7\036\uffe7\042\uffe7\044\uffe7\074" +
    "\uffe7\075\uffe7\112\uffe7\116\uffe7\117\uffe7\120\uffe7\123\uffe7" +
    "\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\001" +
    "\002\000\072\004\uffe8\010\uffe8\011\uffe8\015\uffe8\016\uffe8" +
    "\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\031" +
    "\uffe8\036\uffe8\042\uffe8\044\uffe8\074\uffe8\075\uffe8\112\uffe8" +
    "\116\uffe8\117\uffe8\120\uffe8\123\uffe8\124\uffe8\125\uffe8\126" +
    "\uffe8\127\uffe8\130\uffe8\131\uffe8\001\002\000\072\004\010" +
    "\010\004\011\166\015\041\016\204\021\044\022\164\024" +
    "\177\025\045\026\042\030\172\031\013\036\176\042\036" +
    "\044\206\074\005\075\022\112\007\116\170\117\uffbd\120" +
    "\207\123\027\124\006\125\017\126\024\127\032\130\026" +
    "\131\016\001\002\000\072\004\uffc1\010\uffc1\011\uffc1\015" +
    "\uffc1\016\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\030\uffc1\031\uffc1\036\uffc1\042\uffc1\044\uffc1\074\uffc1\075" +
    "\uffc1\112\uffc1\116\uffc1\117\uffc1\120\uffc1\123\uffc1\124\uffc1" +
    "\125\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1\001\002\000" +
    "\072\004\010\010\004\011\166\015\041\016\204\021\044" +
    "\022\164\024\177\025\045\026\042\030\172\031\013\036" +
    "\176\042\036\044\206\074\005\075\022\112\007\116\170" +
    "\117\uffbd\120\207\123\027\124\006\125\017\126\024\127" +
    "\032\130\026\131\016\001\002\000\072\004\010\010\004" +
    "\011\166\015\041\016\204\021\044\022\164\024\177\025" +
    "\045\026\042\030\172\031\013\036\176\042\036\044\206" +
    "\074\005\075\022\112\007\116\170\117\uffbd\120\207\123" +
    "\027\124\006\125\017\126\024\127\032\130\026\131\016" +
    "\001\002\000\072\004\010\010\004\011\166\015\041\016" +
    "\235\021\044\022\164\024\177\025\045\026\042\030\172" +
    "\031\013\036\176\042\036\044\206\074\005\075\022\112" +
    "\007\116\170\117\uffbd\120\207\123\027\124\006\125\017" +
    "\126\024\127\032\130\026\131\016\001\002\000\072\004" +
    "\uffe4\010\uffe4\011\uffe4\015\uffe4\016\uffe4\021\uffe4\022\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\030\uffe4\031\uffe4\036\uffe4\042" +
    "\uffe4\044\uffe4\074\uffe4\075\uffe4\112\uffe4\116\uffe4\117\uffe4" +
    "\120\uffe4\123\uffe4\124\uffe4\125\uffe4\126\uffe4\127\uffe4\130" +
    "\uffe4\131\uffe4\001\002\000\072\004\uffc2\010\uffc2\011\uffc2" +
    "\015\uffc2\016\uffc2\021\uffc2\022\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\030\uffc2\031\uffc2\036\uffc2\042\uffc2\044\uffc2\074\uffc2" +
    "\075\uffc2\112\uffc2\116\uffc2\117\uffc2\120\uffc2\123\uffc2\124" +
    "\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2\001\002" +
    "\000\106\003\255\045\113\046\077\047\110\050\116\051" +
    "\065\053\105\054\074\055\075\056\111\057\124\060\071" +
    "\061\112\062\073\063\066\064\121\065\101\066\076\067" +
    "\067\070\100\071\107\072\122\073\064\076\063\077\115" +
    "\100\123\101\114\102\117\103\120\104\106\106\070\107" +
    "\072\110\104\113\256\001\002\000\004\113\252\001\002" +
    "\000\072\004\010\010\004\011\166\015\041\016\204\021" +
    "\044\022\164\024\177\025\045\026\042\030\172\031\013" +
    "\036\176\042\036\044\206\074\005\075\022\112\007\116" +
    "\170\117\uffbd\120\207\123\027\124\006\125\017\126\024" +
    "\127\032\130\026\131\016\001\002\000\072\004\010\010" +
    "\004\011\166\015\041\016\235\021\044\022\164\024\177" +
    "\025\045\026\042\030\172\031\013\036\176\042\036\044" +
    "\206\074\005\075\022\112\007\116\170\117\uffbd\120\207" +
    "\123\027\124\006\125\017\126\024\127\032\130\026\131" +
    "\016\001\002\000\072\004\uffe3\010\uffe3\011\uffe3\015\uffe3" +
    "\016\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\030" +
    "\uffe3\031\uffe3\036\uffe3\042\uffe3\044\uffe3\074\uffe3\075\uffe3" +
    "\112\uffe3\116\uffe3\117\uffe3\120\uffe3\123\uffe3\124\uffe3\125" +
    "\uffe3\126\uffe3\127\uffe3\130\uffe3\131\uffe3\001\002\000\072" +
    "\004\010\010\004\011\166\015\041\016\204\021\044\022" +
    "\164\024\177\025\045\026\042\030\172\031\013\036\176" +
    "\042\036\044\206\074\005\075\022\112\007\116\170\117" +
    "\uffbd\120\207\123\027\124\006\125\017\126\024\127\032" +
    "\130\026\131\016\001\002\000\074\003\257\004\010\010" +
    "\004\011\166\015\041\016\204\021\044\022\164\024\177" +
    "\025\045\026\042\030\172\031\013\036\176\042\036\044" +
    "\206\074\005\075\022\112\007\116\170\117\uffbd\120\207" +
    "\123\027\124\006\125\017\126\024\127\032\130\026\131" +
    "\016\001\002\000\072\004\010\010\004\011\166\015\041" +
    "\016\204\021\044\022\164\024\177\025\045\026\042\030" +
    "\172\031\013\036\176\042\036\044\206\074\005\075\022" +
    "\112\007\116\170\117\uffbd\120\207\123\027\124\006\125" +
    "\017\126\024\127\032\130\026\131\016\001\002\000\072" +
    "\004\010\010\004\011\166\015\041\016\235\021\044\022" +
    "\164\024\177\025\045\026\042\030\172\031\013\036\176" +
    "\042\036\044\206\074\005\075\022\112\007\116\170\117" +
    "\uffbd\120\207\123\027\124\006\125\017\126\024\127\032" +
    "\130\026\131\016\001\002\000\072\004\uffe9\010\uffe9\011" +
    "\uffe9\015\uffe9\016\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\030\uffe9\031\uffe9\036\uffe9\042\uffe9\044\uffe9\074" +
    "\uffe9\075\uffe9\112\uffe9\116\uffe9\117\uffe9\120\uffe9\123\uffe9" +
    "\124\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9\131\uffe9\001" +
    "\002\000\072\004\010\010\004\011\166\015\041\016\235" +
    "\021\044\022\164\024\177\025\045\026\042\030\172\031" +
    "\013\036\176\042\036\044\206\074\005\075\022\112\007" +
    "\116\170\117\uffbd\120\207\123\027\124\006\125\017\126" +
    "\024\127\032\130\026\131\016\001\002\000\072\004\uffe0" +
    "\010\uffe0\011\uffe0\015\uffe0\016\uffe0\021\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\030\uffe0\031\uffe0\036\uffe0\042\uffe0" +
    "\044\uffe0\074\uffe0\075\uffe0\112\uffe0\116\uffe0\117\uffe0\120" +
    "\uffe0\123\uffe0\124\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0" +
    "\131\uffe0\001\002\000\072\004\010\010\004\011\166\015" +
    "\041\016\235\021\044\022\164\024\177\025\045\026\042" +
    "\030\172\031\013\036\176\042\036\044\206\074\005\075" +
    "\022\112\007\116\170\117\uffbd\120\207\123\027\124\006" +
    "\125\017\126\024\127\032\130\026\131\016\001\002\000" +
    "\072\004\uffe2\010\uffe2\011\uffe2\015\uffe2\016\uffe2\021\uffe2" +
    "\022\uffe2\024\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\036" +
    "\uffe2\042\uffe2\044\uffe2\074\uffe2\075\uffe2\112\uffe2\116\uffe2" +
    "\117\uffe2\120\uffe2\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127" +
    "\uffe2\130\uffe2\131\uffe2\001\002\000\022\004\267\074\005" +
    "\075\022\123\277\124\273\126\274\127\270\131\272\001" +
    "\002\000\110\045\uff96\046\uff96\047\uff96\050\uff96\051\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060\uff96\061" +
    "\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96\067\uff96" +
    "\070\uff96\071\uff96\072\uff96\073\uff96\076\uff96\077\uff96\100" +
    "\uff96\101\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106\uff96" +
    "\107\uff96\110\uff96\112\334\113\uff96\001\002\000\110\045" +
    "\uff81\046\uff81\047\uff81\050\uff81\051\uff81\053\uff81\054\uff81" +
    "\055\uff81\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063" +
    "\uff81\064\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81" +
    "\072\uff81\073\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102" +
    "\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\110\uff81" +
    "\113\uff81\120\uff81\001\002\000\106\045\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\053\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\062\uff94\063\uff94\064\uff94\065" +
    "\uff94\066\uff94\067\uff94\070\uff94\071\uff94\072\uff94\073\uff94" +
    "\076\uff94\077\uff94\100\uff94\101\uff94\102\uff94\103\uff94\104" +
    "\uff94\105\uff94\106\uff94\107\uff94\110\uff94\113\uff94\001\002" +
    "\000\110\045\uff80\046\uff80\047\uff80\050\uff80\051\uff80\053" +
    "\uff80\054\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80" +
    "\062\uff80\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070" +
    "\uff80\071\uff80\072\uff80\073\uff80\076\uff80\077\uff80\100\uff80" +
    "\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106\uff80\107" +
    "\uff80\110\uff80\113\uff80\120\uff80\001\002\000\110\045\uff83" +
    "\046\uff83\047\uff83\050\uff83\051\uff83\053\uff83\054\uff83\055" +
    "\uff83\056\uff83\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83" +
    "\064\uff83\065\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072" +
    "\uff83\073\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102\uff83" +
    "\103\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83\113" +
    "\uff83\120\uff83\001\002\000\110\045\uff82\046\uff82\047\uff82" +
    "\050\uff82\051\uff82\053\uff82\054\uff82\055\uff82\056\uff82\057" +
    "\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\067\uff82\070\uff82\071\uff82\072\uff82\073\uff82\076" +
    "\uff82\077\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82" +
    "\105\uff82\106\uff82\107\uff82\110\uff82\113\uff82\120\uff82\001" +
    "\002\000\106\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95" +
    "\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95" +
    "\070\uff95\071\uff95\072\uff95\073\uff95\076\uff95\077\uff95\100" +
    "\uff95\101\uff95\102\uff95\103\uff95\104\uff95\105\uff95\106\uff95" +
    "\107\uff95\110\uff95\113\uff95\001\002\000\104\045\113\046" +
    "\077\047\110\050\116\051\065\053\105\054\074\055\075" +
    "\056\111\057\124\060\071\061\112\062\073\063\066\064" +
    "\121\065\101\066\076\067\067\070\100\071\107\072\122" +
    "\073\064\076\063\077\115\100\123\101\114\102\117\103" +
    "\120\104\303\106\070\107\072\110\104\113\310\001\002" +
    "\000\110\045\uff84\046\uff84\047\uff84\050\uff84\051\uff84\053" +
    "\uff84\054\uff84\055\uff84\056\uff84\057\uff84\060\uff84\061\uff84" +
    "\062\uff84\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\070" +
    "\uff84\071\uff84\072\uff84\073\uff84\076\uff84\077\uff84\100\uff84" +
    "\101\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107" +
    "\uff84\110\uff84\113\uff84\120\uff84\001\002\000\022\004\267" +
    "\074\005\075\022\123\277\124\273\126\274\127\270\131" +
    "\272\001\002\000\106\045\113\046\077\047\110\050\116" +
    "\051\065\053\105\054\074\055\075\056\111\057\124\060" +
    "\071\061\112\062\073\063\066\064\121\065\101\066\076" +
    "\067\067\070\100\071\107\072\122\073\064\076\063\077" +
    "\115\100\123\101\114\102\117\103\120\104\303\105\uff93" +
    "\106\070\107\072\110\104\113\uff93\001\002\000\022\004" +
    "\267\074\005\075\022\123\277\124\273\126\274\127\270" +
    "\131\272\001\002\000\022\004\267\074\005\075\022\123" +
    "\277\124\273\126\274\127\270\131\272\001\002\000\104" +
    "\045\113\046\077\047\110\050\116\051\065\053\105\054" +
    "\074\055\075\056\111\057\124\060\071\061\112\062\073" +
    "\063\066\064\121\065\101\066\076\067\067\070\100\071" +
    "\107\072\122\073\064\076\063\077\115\100\123\101\114" +
    "\102\117\103\120\104\303\105\305\106\070\107\072\110" +
    "\104\001\002\000\022\004\267\074\005\075\022\123\277" +
    "\124\273\126\274\127\270\131\272\001\002\000\106\045" +
    "\uff91\046\uff91\047\uff91\050\uff91\051\uff91\053\105\054\074" +
    "\055\075\056\111\057\124\060\071\061\112\062\073\063" +
    "\066\064\121\065\101\066\076\067\067\070\100\071\107" +
    "\072\122\073\064\076\063\077\115\100\123\101\114\102" +
    "\117\103\120\104\uff91\105\uff91\106\070\107\072\110\104" +
    "\113\uff91\001\002\000\106\045\113\046\077\047\110\050" +
    "\116\051\065\053\105\054\074\055\075\056\111\057\124" +
    "\060\071\061\112\062\073\063\066\064\121\065\101\066" +
    "\076\067\067\070\100\071\107\072\122\073\064\076\063" +
    "\077\115\100\123\101\114\102\117\103\120\104\303\105" +
    "\uff92\106\070\107\072\110\104\113\uff92\001\002\000\100" +
    "\004\010\006\313\007\311\010\004\011\166\013\315\015" +
    "\041\016\204\021\044\022\164\024\177\025\045\026\042" +
    "\030\172\031\013\036\176\042\036\044\206\074\005\075" +
    "\022\112\007\116\312\117\uffbd\120\207\123\027\124\006" +
    "\125\017\126\024\127\032\130\026\131\016\001\002\000" +
    "\022\004\267\074\005\075\022\123\277\124\273\126\274" +
    "\127\270\131\272\001\002\000\100\004\010\006\313\007" +
    "\311\010\004\011\166\013\315\015\041\016\204\021\044" +
    "\022\164\024\177\025\045\026\042\030\172\031\013\036" +
    "\176\042\036\044\206\074\005\075\022\112\007\116\312" +
    "\117\uffbd\120\207\123\027\124\006\125\017\126\024\127" +
    "\032\130\026\131\016\001\002\000\004\120\322\001\002" +
    "\000\072\004\uffda\010\uffda\011\uffda\015\uffda\016\uffda\021" +
    "\uffda\022\uffda\024\uffda\025\uffda\026\uffda\030\uffda\031\uffda" +
    "\036\uffda\042\uffda\044\uffda\074\uffda\075\uffda\112\uffda\116" +
    "\uffda\117\uffda\120\uffda\123\uffda\124\uffda\125\uffda\126\uffda" +
    "\127\uffda\130\uffda\131\uffda\001\002\000\022\004\267\074" +
    "\005\075\022\123\277\124\273\126\274\127\270\131\272" +
    "\001\002\000\072\004\uffdf\010\uffdf\011\uffdf\015\uffdf\016" +
    "\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf" +
    "\031\uffdf\036\uffdf\042\uffdf\044\uffdf\074\uffdf\075\uffdf\112" +
    "\uffdf\116\uffdf\117\uffdf\120\uffdf\123\uffdf\124\uffdf\125\uffdf" +
    "\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\104\045" +
    "\113\046\077\047\110\050\116\051\065\053\105\054\074" +
    "\055\075\056\111\057\124\060\071\061\112\062\073\063" +
    "\066\064\121\065\101\066\076\067\067\070\100\071\107" +
    "\072\122\073\064\076\063\077\115\100\123\101\114\102" +
    "\117\103\120\104\303\105\320\106\070\107\072\110\104" +
    "\001\002\000\100\004\010\006\313\007\311\010\004\011" +
    "\166\013\315\015\041\016\204\021\044\022\164\024\177" +
    "\025\045\026\042\030\172\031\013\036\176\042\036\044" +
    "\206\074\005\075\022\112\007\116\312\117\uffbd\120\207" +
    "\123\027\124\006\125\017\126\024\127\032\130\026\131" +
    "\016\001\002\000\072\004\uffdc\010\uffdc\011\uffdc\015\uffdc" +
    "\016\uffdc\021\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\030" +
    "\uffdc\031\uffdc\036\uffdc\042\uffdc\044\uffdc\074\uffdc\075\uffdc" +
    "\112\uffdc\116\uffdc\117\uffdc\120\uffdc\123\uffdc\124\uffdc\125" +
    "\uffdc\126\uffdc\127\uffdc\130\uffdc\131\uffdc\001\002\000\100" +
    "\004\010\006\313\007\311\010\004\011\166\013\315\015" +
    "\041\016\204\021\044\022\164\024\177\025\045\026\042" +
    "\030\172\031\013\036\176\042\036\044\206\074\005\075" +
    "\022\112\007\116\312\117\uffbd\120\207\123\027\124\006" +
    "\125\017\126\024\127\032\130\026\131\016\001\002\000" +
    "\072\004\uffdb\010\uffdb\011\uffdb\015\uffdb\016\uffdb\021\uffdb" +
    "\022\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\036" +
    "\uffdb\042\uffdb\044\uffdb\074\uffdb\075\uffdb\112\uffdb\116\uffdb" +
    "\117\uffdb\120\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\127" +
    "\uffdb\130\uffdb\131\uffdb\001\002\000\004\117\330\001\002" +
    "\000\004\117\326\001\002\000\100\004\010\006\313\007" +
    "\311\010\004\011\166\013\315\015\041\016\204\021\044" +
    "\022\164\024\177\025\045\026\042\030\172\031\013\036" +
    "\176\042\036\044\206\074\005\075\022\112\007\116\312" +
    "\117\uffbd\120\207\123\027\124\006\125\017\126\024\127" +
    "\032\130\026\131\016\001\002\000\072\004\uffde\010\uffde" +
    "\011\uffde\015\uffde\016\uffde\021\uffde\022\uffde\024\uffde\025" +
    "\uffde\026\uffde\030\uffde\031\uffde\036\uffde\042\uffde\044\uffde" +
    "\074\uffde\075\uffde\112\uffde\116\uffde\117\uffde\120\uffde\123" +
    "\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde\131\uffde" +
    "\001\002\000\072\004\uffc6\010\uffc6\011\uffc6\015\uffc6\016" +
    "\uffc6\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6" +
    "\031\uffc6\036\uffc6\042\uffc6\044\uffc6\074\uffc6\075\uffc6\112" +
    "\uffc6\116\uffc6\117\uffc6\120\uffc6\123\uffc6\124\uffc6\125\uffc6" +
    "\126\uffc6\127\uffc6\130\uffc6\131\uffc6\001\002\000\104\045" +
    "\113\046\077\047\110\050\116\051\065\053\105\054\074" +
    "\055\075\056\111\057\124\060\071\061\112\062\073\063" +
    "\066\064\121\065\101\066\076\067\067\070\100\071\107" +
    "\072\122\073\064\076\063\077\115\100\123\101\114\102" +
    "\117\103\120\104\303\105\332\106\070\107\072\110\104" +
    "\001\002\000\100\004\010\006\313\007\311\010\004\011" +
    "\166\013\315\015\041\016\204\021\044\022\164\024\177" +
    "\025\045\026\042\030\172\031\013\036\176\042\036\044" +
    "\206\074\005\075\022\112\007\116\312\117\uffbd\120\207" +
    "\123\027\124\006\125\017\126\024\127\032\130\026\131" +
    "\016\001\002\000\072\004\uffdd\010\uffdd\011\uffdd\015\uffdd" +
    "\016\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\030" +
    "\uffdd\031\uffdd\036\uffdd\042\uffdd\044\uffdd\074\uffdd\075\uffdd" +
    "\112\uffdd\116\uffdd\117\uffdd\120\uffdd\123\uffdd\124\uffdd\125" +
    "\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd\001\002\000\032" +
    "\004\061\074\005\075\022\112\007\113\336\123\027\124" +
    "\006\125\017\126\024\127\032\130\026\131\016\001\002" +
    "\000\004\113\337\001\002\000\106\045\uff7f\046\uff7f\047" +
    "\uff7f\050\uff7f\051\uff7f\053\uff7f\054\uff7f\055\uff7f\056\uff7f" +
    "\057\uff7f\060\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065" +
    "\uff7f\066\uff7f\067\uff7f\070\uff7f\071\uff7f\072\uff7f\073\uff7f" +
    "\076\uff7f\077\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104" +
    "\uff7f\105\uff7f\106\uff7f\107\uff7f\110\uff7f\113\uff7f\001\002" +
    "\000\106\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\053" +
    "\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e" +
    "\062\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\076\uff7e\077\uff7e\100\uff7e" +
    "\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107" +
    "\uff7e\110\uff7e\113\uff7e\001\002\000\072\004\uffc5\010\uffc5" +
    "\011\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\030\uffc5\031\uffc5\036\uffc5\042\uffc5\044\uffc5" +
    "\074\uffc5\075\uffc5\112\uffc5\116\uffc5\117\uffc5\120\uffc5\123" +
    "\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130\uffc5\131\uffc5" +
    "\001\002\000\104\045\113\046\077\047\110\050\116\051" +
    "\065\053\105\054\074\055\075\056\111\057\124\060\071" +
    "\061\112\062\073\063\066\064\121\065\101\066\076\067" +
    "\067\070\100\071\107\072\122\073\064\076\063\077\115" +
    "\100\123\101\114\102\117\103\120\104\106\106\070\107" +
    "\072\110\104\120\342\001\002\000\072\004\010\010\004" +
    "\011\166\015\041\016\204\021\044\022\164\024\177\025" +
    "\045\026\042\030\172\031\013\036\176\042\036\044\206" +
    "\074\005\075\022\112\007\116\170\117\uffbd\120\207\123" +
    "\027\124\006\125\017\126\024\127\032\130\026\131\016" +
    "\001\002\000\072\004\uffbf\010\uffbf\011\uffbf\015\uffbf\016" +
    "\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf" +
    "\031\uffbf\036\uffbf\042\uffbf\044\uffbf\074\uffbf\075\uffbf\112" +
    "\uffbf\116\uffbf\117\uffbf\120\uffbf\123\uffbf\124\uffbf\125\uffbf" +
    "\126\uffbf\127\uffbf\130\uffbf\131\uffbf\001\002\000\004\117" +
    "\330\001\002\000\004\004\346\001\002\000\004\106\347" +
    "\001\002\000\014\123\277\124\273\126\274\127\270\131" +
    "\272\001\002\000\004\120\351\001\002\000\076\002\uffb9" +
    "\003\uffb9\004\uffb9\010\uffb9\011\uffb9\015\uffb9\016\uffb9\021" +
    "\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9\030\uffb9\031\uffb9" +
    "\036\uffb9\042\uffb9\044\uffb9\074\uffb9\075\uffb9\112\uffb9\116" +
    "\uffb9\117\uffb9\120\uffb9\123\uffb9\124\uffb9\125\uffb9\126\uffb9" +
    "\127\uffb9\130\uffb9\131\uffb9\001\002\000\050\004\353\010" +
    "\004\015\041\021\044\025\045\026\042\031\013\042\036" +
    "\074\005\075\022\112\007\120\uffca\123\027\124\006\125" +
    "\017\126\024\127\032\130\026\131\016\001\002\000\112" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90" +
    "\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071" +
    "\uff90\072\uff90\073\uff90\074\005\075\022\076\uff90\077\uff90" +
    "\100\uff90\101\uff90\102\uff90\103\uff90\104\uff90\106\371\107" +
    "\uff90\110\uff90\112\133\120\uff90\001\002\000\104\045\113" +
    "\046\077\047\110\050\116\051\065\053\105\054\074\055" +
    "\075\056\111\057\124\060\071\061\112\062\073\063\066" +
    "\064\121\065\101\066\076\067\067\070\100\071\107\072" +
    "\122\073\064\076\063\077\115\100\123\101\114\102\117" +
    "\103\120\104\106\106\070\107\072\110\104\120\uffcb\001" +
    "\002\000\004\120\uffcd\001\002\000\004\120\357\001\002" +
    "\000\030\004\061\074\005\075\022\112\007\123\027\124" +
    "\006\125\017\126\024\127\032\130\026\131\016\001\002" +
    "\000\104\045\113\046\077\047\110\050\116\051\065\053" +
    "\105\054\074\055\075\056\111\057\124\060\071\061\112" +
    "\062\073\063\066\064\121\065\101\066\076\067\067\070" +
    "\100\071\107\072\122\073\064\076\063\077\115\100\123" +
    "\101\114\102\117\103\120\104\106\106\070\107\072\110" +
    "\104\120\361\001\002\000\032\004\362\074\005\075\022" +
    "\112\007\113\uffc7\123\027\124\006\125\017\126\024\127" +
    "\032\130\026\131\016\001\002\000\112\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\053\uff90\054\uff90\055\uff90\056" +
    "\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\005\075\022\076\uff90\077\uff90\100\uff90\101\uff90" +
    "\102\uff90\103\uff90\104\uff90\106\367\107\uff90\110\uff90\112" +
    "\133\113\uff90\001\002\000\004\113\365\001\002\000\104" +
    "\045\113\046\077\047\110\050\116\051\065\053\105\054" +
    "\074\055\075\056\111\057\124\060\071\061\112\062\073" +
    "\063\066\064\121\065\101\066\076\067\067\070\100\071" +
    "\107\072\122\073\064\076\063\077\115\100\123\101\114" +
    "\102\117\103\120\104\106\106\070\107\072\110\104\113" +
    "\uffc8\001\002\000\072\004\010\010\004\011\166\015\041" +
    "\016\204\021\044\022\164\024\177\025\045\026\042\030" +
    "\172\031\013\036\176\042\036\044\206\074\005\075\022" +
    "\112\007\116\170\117\uffbd\120\207\123\027\124\006\125" +
    "\017\126\024\127\032\130\026\131\016\001\002\000\072" +
    "\004\uffd0\010\uffd0\011\uffd0\015\uffd0\016\uffd0\021\uffd0\022" +
    "\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0\031\uffd0\036\uffd0" +
    "\042\uffd0\044\uffd0\074\uffd0\075\uffd0\112\uffd0\116\uffd0\117" +
    "\uffd0\120\uffd0\123\uffd0\124\uffd0\125\uffd0\126\uffd0\127\uffd0" +
    "\130\uffd0\131\uffd0\001\002\000\030\004\061\074\005\075" +
    "\022\112\007\123\027\124\006\125\017\126\024\127\032" +
    "\130\026\131\016\001\002\000\104\045\113\046\077\047" +
    "\110\050\116\051\065\053\105\054\074\055\075\056\111" +
    "\057\124\060\071\061\112\062\073\063\066\064\121\065" +
    "\101\066\076\067\067\070\100\071\107\072\122\073\064" +
    "\076\063\077\115\100\123\101\114\102\117\103\120\104" +
    "\106\106\070\107\072\110\104\113\uffc9\001\002\000\030" +
    "\004\061\074\005\075\022\112\007\123\027\124\006\125" +
    "\017\126\024\127\032\130\026\131\016\001\002\000\104" +
    "\045\113\046\077\047\110\050\116\051\065\053\105\054" +
    "\074\055\075\056\111\057\124\060\071\061\112\062\073" +
    "\063\066\064\121\065\101\066\076\067\067\070\100\071" +
    "\107\072\122\073\064\076\063\077\115\100\123\101\114" +
    "\102\117\103\120\104\106\106\070\107\072\110\104\120" +
    "\uffcc\001\002\000\006\052\uffa6\113\uffa6\001\002\000\004" +
    "\116\ufff4\001\002\000\022\010\004\011\152\015\041\021" +
    "\044\025\045\026\042\031\013\042\036\001\002\000\004" +
    "\113\uffa8\001\002\000\054\002\ufff8\003\ufff8\004\ufff8\010" +
    "\ufff8\011\ufff8\015\ufff8\021\ufff8\025\ufff8\026\ufff8\031\ufff8" +
    "\042\ufff8\074\ufff8\075\ufff8\112\ufff8\123\ufff8\124\ufff8\125" +
    "\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8\001\002\000\004" +
    "\002\ufffc\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\001\001\002\000\004\002\ufffd\001\002\000\004\004\u0105" +
    "\001\002\000\006\003\u0106\106\u0107\001\002\000\004\120" +
    "\u0119\001\002\000\016\003\u010b\123\u010d\124\u0109\126\u010c" +
    "\127\u0108\131\u010a\001\002\000\006\003\u0117\120\uff81\001" +
    "\002\000\006\003\u0115\120\uff83\001\002\000\006\003\u0113" +
    "\120\uff80\001\002\000\004\120\u0112\001\002\000\006\003" +
    "\u0110\120\uff82\001\002\000\006\003\u010e\120\uff84\001\002" +
    "\000\004\120\u010f\001\002\000\054\002\uffb6\003\uffb6\004" +
    "\uffb6\010\uffb6\011\uffb6\015\uffb6\021\uffb6\025\uffb6\026\uffb6" +
    "\031\uffb6\042\uffb6\074\uffb6\075\uffb6\112\uffb6\123\uffb6\124" +
    "\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6\001\002" +
    "\000\004\120\u0111\001\002\000\054\002\uffb4\003\uffb4\004" +
    "\uffb4\010\uffb4\011\uffb4\015\uffb4\021\uffb4\025\uffb4\026\uffb4" +
    "\031\uffb4\042\uffb4\074\uffb4\075\uffb4\112\uffb4\123\uffb4\124" +
    "\uffb4\125\uffb4\126\uffb4\127\uffb4\130\uffb4\131\uffb4\001\002" +
    "\000\054\002\uffb7\003\uffb7\004\uffb7\010\uffb7\011\uffb7\015" +
    "\uffb7\021\uffb7\025\uffb7\026\uffb7\031\uffb7\042\uffb7\074\uffb7" +
    "\075\uffb7\112\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127" +
    "\uffb7\130\uffb7\131\uffb7\001\002\000\004\120\u0114\001\002" +
    "\000\054\002\uffb2\003\uffb2\004\uffb2\010\uffb2\011\uffb2\015" +
    "\uffb2\021\uffb2\025\uffb2\026\uffb2\031\uffb2\042\uffb2\074\uffb2" +
    "\075\uffb2\112\uffb2\123\uffb2\124\uffb2\125\uffb2\126\uffb2\127" +
    "\uffb2\130\uffb2\131\uffb2\001\002\000\004\120\u0116\001\002" +
    "\000\054\002\uffb5\003\uffb5\004\uffb5\010\uffb5\011\uffb5\015" +
    "\uffb5\021\uffb5\025\uffb5\026\uffb5\031\uffb5\042\uffb5\074\uffb5" +
    "\075\uffb5\112\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\127" +
    "\uffb5\130\uffb5\131\uffb5\001\002\000\004\120\u0118\001\002" +
    "\000\054\002\uffb3\003\uffb3\004\uffb3\010\uffb3\011\uffb3\015" +
    "\uffb3\021\uffb3\025\uffb3\026\uffb3\031\uffb3\042\uffb3\074\uffb3" +
    "\075\uffb3\112\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127" +
    "\uffb3\130\uffb3\131\uffb3\001\002\000\054\002\uffb8\003\uffb8" +
    "\004\uffb8\010\uffb8\011\uffb8\015\uffb8\021\uffb8\025\uffb8\026" +
    "\uffb8\031\uffb8\042\uffb8\074\uffb8\075\uffb8\112\uffb8\123\uffb8" +
    "\124\uffb8\125\uffb8\126\uffb8\127\uffb8\130\uffb8\131\uffb8\001" +
    "\002\000\030\004\061\074\005\075\022\112\007\123\027" +
    "\124\006\125\017\126\024\127\032\130\026\131\016\001" +
    "\002\000\172\004\uffa0\010\uffa0\011\uffa0\015\uffa0\016\uffa0" +
    "\021\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0\030\uffa0\031" +
    "\uffa0\036\uffa0\042\uffa0\044\uffa0\045\113\046\077\047\110" +
    "\050\116\051\065\053\105\054\074\055\075\056\111\057" +
    "\124\060\071\061\112\062\073\063\066\064\121\065\101" +
    "\066\076\067\067\070\100\071\107\072\122\073\064\074" +
    "\uffa0\075\uffa0\076\063\077\115\100\123\101\114\102\117" +
    "\103\120\104\106\106\070\107\072\110\104\112\uffa0\116" +
    "\uffa0\117\uffa0\120\uffa0\123\uffa0\124\uffa0\125\uffa0\126\uffa0" +
    "\127\uffa0\130\uffa0\131\uffa0\001\002\000\104\045\uff9c\046" +
    "\uff9c\047\uff9c\050\uff9c\051\uff9c\053\uff9c\054\uff9c\055\uff9c" +
    "\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062\uff9c\063\uff9c\064" +
    "\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c\071\uff9c\072\uff9c" +
    "\073\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c\102\uff9c\103" +
    "\uff9c\104\uff9c\106\uff9c\107\uff9c\110\uff9c\113\u011e\001\002" +
    "\000\102\045\113\046\077\047\110\050\116\051\065\053" +
    "\105\054\074\055\075\056\111\057\124\060\071\061\112" +
    "\062\073\063\066\064\121\065\101\066\076\067\067\070" +
    "\100\071\107\072\122\073\064\076\063\077\115\100\123" +
    "\101\114\102\117\103\120\104\106\106\070\107\072\110" +
    "\104\001\002\000\202\003\uff9d\004\uff9d\010\uff9d\011\uff9d" +
    "\015\uff9d\016\uff9d\021\uff9d\022\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\030\uff9d\031\uff9d\036\uff9d\042\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d\054" +
    "\uff9d\055\uff9d\056\uff9d\057\uff9d\060\uff9d\061\uff9d\062\uff9d" +
    "\063\uff9d\064\uff9d\065\uff9d\066\uff9d\067\uff9d\070\uff9d\071" +
    "\uff9d\072\uff9d\073\uff9d\074\uff9d\075\uff9d\076\uff9d\077\uff9d" +
    "\100\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106" +
    "\uff9d\107\uff9d\110\uff9d\112\uff9d\113\uff9d\116\uff9d\117\uff9d" +
    "\120\uff9d\123\uff9d\124\uff9d\125\uff9d\126\uff9d\127\uff9d\130" +
    "\uff9d\131\uff9d\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011c\000\036\004\017\005\027\012\013\015\037\016" +
    "\022\017\020\021\042\022\036\027\030\030\011\031\032" +
    "\047\014\057\034\062\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\u011c\017\u011b" +
    "\021\042\022\036\001\001\000\004\022\133\001\001\000" +
    "\004\005\u0103\001\001\000\034\004\017\005\027\012\u0102" +
    "\015\037\016\022\017\020\021\042\022\036\027\030\030" +
    "\011\031\032\057\034\062\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\017\005\027\012\u0100\015\037" +
    "\016\022\017\020\021\042\022\036\027\030\030\011\031" +
    "\032\057\034\062\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\101\001\001\000\002\001\001\000" +
    "\034\004\017\005\027\012\377\015\037\016\022\017\020" +
    "\021\042\022\036\027\030\030\011\031\032\057\034\062" +
    "\024\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\053\001\001\000\034\004\017\005\027\012\050\015" +
    "\037\016\022\017\020\021\042\022\036\027\030\030\011" +
    "\031\032\057\034\062\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\002" +
    "\150\005\147\010\146\011\144\001\001\000\004\032\143" +
    "\001\001\000\012\016\061\017\020\021\042\022\036\001" +
    "\001\000\004\022\133\001\001\000\004\023\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\131\017" +
    "\020\021\042\022\036\001\001\000\004\032\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\124\017" +
    "\020\021\042\022\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\101\001\001\000\012\016\126\017\020\021\042\022" +
    "\036\001\001\000\004\023\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\101\001\001\000\016\006" +
    "\135\007\134\016\136\017\020\021\042\022\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\142\007\134\016\136\017\020\021\042\022" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\160\001\001\000\004\005\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\166" +
    "\013\204\015\170\016\172\017\020\021\042\022\036\030" +
    "\174\031\202\033\201\034\164\035\200\037\177\041\173" +
    "\043\161\050\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\344\001\001\000\004\032\053\001\001\000" +
    "\042\005\166\013\343\015\170\016\172\017\020\021\042" +
    "\022\036\030\174\031\202\033\201\034\164\035\200\037" +
    "\177\041\173\043\161\050\162\001\001\000\002\001\001" +
    "\000\012\016\340\017\020\021\042\022\036\001\001\000" +
    "\004\023\101\001\001\000\002\001\001\000\042\005\166" +
    "\013\337\015\170\016\172\017\020\021\042\022\036\030" +
    "\174\031\202\033\201\034\164\035\200\037\177\041\173" +
    "\043\161\050\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\166" +
    "\013\225\015\170\016\172\017\020\021\042\022\036\030" +
    "\174\031\202\033\201\034\164\035\200\037\177\041\173" +
    "\043\161\050\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\166" +
    "\013\207\015\170\016\172\017\020\021\042\022\036\030" +
    "\174\031\202\033\201\034\164\035\200\037\177\041\173" +
    "\043\161\050\162\001\001\000\002\001\001\000\012\016" +
    "\211\017\020\021\042\022\036\001\001\000\004\023\101" +
    "\001\001\000\044\005\166\013\215\015\170\016\172\017" +
    "\020\021\042\022\036\030\174\031\202\033\201\034\164" +
    "\035\200\037\177\041\173\042\213\043\161\050\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\166\013\215\015\170\016\172\017\020\021" +
    "\042\022\036\030\174\031\202\033\201\034\164\035\200" +
    "\037\177\041\173\042\217\043\161\050\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\166\013\222" +
    "\015\170\016\172\017\020\021\042\022\036\030\174\031" +
    "\202\033\201\034\164\035\200\037\177\041\173\043\161" +
    "\050\162\001\001\000\002\001\001\000\042\005\166\013" +
    "\224\015\170\016\172\017\020\021\042\022\036\030\174" +
    "\031\202\033\201\034\164\035\200\037\177\041\173\043" +
    "\161\050\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\247\017\020\021\042\022\036\001\001\000" +
    "\042\005\166\013\231\015\170\016\230\017\020\021\042" +
    "\022\036\030\174\031\202\033\201\034\164\035\200\037" +
    "\177\041\173\043\161\050\162\001\001\000\004\023\101" +
    "\001\001\000\044\005\166\013\235\015\233\016\172\017" +
    "\020\021\042\022\036\030\174\031\202\033\201\034\164" +
    "\035\200\036\232\037\177\041\173\043\161\050\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\166" +
    "\013\237\015\236\016\172\017\020\021\042\022\036\030" +
    "\174\031\202\033\201\034\164\035\200\037\177\041\173" +
    "\043\161\050\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\005\166\013\241\015\170" +
    "\016\172\017\020\021\042\022\036\030\174\031\202\033" +
    "\201\034\164\035\200\037\177\041\173\043\161\050\162" +
    "\001\001\000\002\001\001\000\042\005\166\013\246\015" +
    "\170\016\172\017\020\021\042\022\036\030\174\031\202" +
    "\033\201\034\164\035\200\037\177\041\173\043\161\050" +
    "\162\001\001\000\042\005\166\013\244\015\170\016\172" +
    "\017\020\021\042\022\036\030\174\031\202\033\201\034" +
    "\164\035\200\037\177\041\173\043\161\050\162\001\001" +
    "\000\044\005\166\013\235\015\233\016\172\017\020\021" +
    "\042\022\036\030\174\031\202\033\201\034\164\035\200" +
    "\036\245\037\177\041\173\043\161\050\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\101\001\001" +
    "\000\002\001\001\000\042\005\166\013\252\015\170\016" +
    "\172\017\020\021\042\022\036\030\174\031\202\033\201" +
    "\034\164\035\200\037\177\041\173\043\161\050\162\001" +
    "\001\000\044\005\166\013\235\015\233\016\172\017\020" +
    "\021\042\022\036\030\174\031\202\033\201\034\164\035" +
    "\200\036\253\037\177\041\173\043\161\050\162\001\001" +
    "\000\002\001\001\000\042\005\166\013\263\015\170\016" +
    "\172\017\020\021\042\022\036\030\174\031\202\033\201" +
    "\034\164\035\200\037\177\041\173\043\161\050\162\001" +
    "\001\000\042\005\166\013\257\015\170\016\172\017\020" +
    "\021\042\022\036\030\174\031\202\033\201\034\164\035" +
    "\200\037\177\041\173\043\161\050\162\001\001\000\042" +
    "\005\166\013\261\015\170\016\172\017\020\021\042\022" +
    "\036\030\174\031\202\033\201\034\164\035\200\037\177" +
    "\041\173\043\161\050\162\001\001\000\044\005\166\013" +
    "\235\015\233\016\172\017\020\021\042\022\036\030\174" +
    "\031\202\033\201\034\164\035\200\036\260\037\177\041" +
    "\173\043\161\050\162\001\001\000\002\001\001\000\044" +
    "\005\166\013\235\015\233\016\172\017\020\021\042\022" +
    "\036\030\174\031\202\033\201\034\164\035\200\036\262" +
    "\037\177\041\173\043\161\050\162\001\001\000\002\001" +
    "\001\000\044\005\166\013\235\015\233\016\172\017\020" +
    "\021\042\022\036\030\174\031\202\033\201\034\164\035" +
    "\200\036\264\037\177\041\173\043\161\050\162\001\001" +
    "\000\002\001\001\000\012\020\275\022\277\024\274\026" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\301\001\001\000\002" +
    "\001\001\000\012\020\300\022\277\024\274\026\270\001" +
    "\001\000\004\023\301\001\001\000\012\020\306\022\277" +
    "\024\274\026\270\001\001\000\012\020\303\022\277\024" +
    "\274\026\270\001\001\000\004\023\301\001\001\000\012" +
    "\020\305\022\277\024\274\026\270\001\001\000\004\023" +
    "\301\001\001\000\004\023\301\001\001\000\044\005\166" +
    "\013\313\015\170\016\172\017\020\021\042\022\036\030" +
    "\174\031\202\033\201\034\164\035\200\037\177\040\315" +
    "\041\173\043\161\050\162\001\001\000\012\020\330\022" +
    "\277\024\274\026\270\001\001\000\044\005\166\013\323" +
    "\015\170\016\172\017\020\021\042\022\036\030\174\031" +
    "\202\033\201\034\164\035\200\037\177\040\324\041\173" +
    "\043\161\050\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\316\022\277\024\274\026\270\001\001" +
    "\000\002\001\001\000\004\023\301\001\001\000\044\005" +
    "\166\013\313\015\170\016\172\017\020\021\042\022\036" +
    "\030\174\031\202\033\201\034\164\035\200\037\177\040" +
    "\320\041\173\043\161\050\162\001\001\000\002\001\001" +
    "\000\044\005\166\013\313\015\170\016\172\017\020\021" +
    "\042\022\036\030\174\031\202\033\201\034\164\035\200" +
    "\037\177\040\322\041\173\043\161\050\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\166\013\313\015\170\016\172\017\020\021\042\022" +
    "\036\030\174\031\202\033\201\034\164\035\200\037\177" +
    "\040\326\041\173\043\161\050\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\301\001\001\000\044" +
    "\005\166\013\313\015\170\016\172\017\020\021\042\022" +
    "\036\030\174\031\202\033\201\034\164\035\200\037\177" +
    "\040\332\041\173\043\161\050\162\001\001\000\002\001" +
    "\001\000\016\006\334\007\134\016\136\017\020\021\042" +
    "\022\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\101\001\001" +
    "\000\042\005\166\013\342\015\170\016\172\017\020\021" +
    "\042\022\036\030\174\031\202\033\201\034\164\035\200" +
    "\037\177\041\173\043\161\050\162\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\347\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\166\016\353\017\020\021\042\022\036" +
    "\031\354\044\355\001\001\000\004\022\133\001\001\000" +
    "\004\023\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\357\017\020\021\042\022\036\001\001\000" +
    "\004\023\101\001\001\000\014\016\363\017\020\021\042" +
    "\022\036\045\362\001\001\000\004\022\133\001\001\000" +
    "\002\001\001\000\004\023\101\001\001\000\042\005\166" +
    "\013\365\015\170\016\172\017\020\021\042\022\036\030" +
    "\174\031\202\033\201\034\164\035\200\037\177\041\173" +
    "\043\161\050\162\001\001\000\002\001\001\000\012\016" +
    "\367\017\020\021\042\022\036\001\001\000\004\023\101" +
    "\001\001\000\012\016\371\017\020\021\042\022\036\001" +
    "\001\000\004\023\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\147\010\375\011\144\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\u011a" +
    "\017\020\021\042\022\036\001\001\000\004\023\101\001" +
    "\001\000\002\001\001\000\004\023\101\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }



    CLexer s;
    Analyzer a;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message + " at line:" + s.getCurrentLine(), null));
        }
    }

    public void syntax_error(Symbol cur_token) 
    {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token) 
    {
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= constant program_definition 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_definition ::= error_program_definition program_definition 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_definition ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // error_program_definition ::= keyword_types OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int kw_typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int kw_typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object kw_type = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Must give a name for a global variable", "Global variable", kw_type);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // error_program_definition ::= instruction OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Instruction out of place", "Global variable", instr);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // error_program_definition ::= keyword_types error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // error_program_definition ::= error_constant 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // error_program_definition ::= error 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_declaration_1 ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // error_function_declaration ::= keyword_types IDENT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // error_function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // control_structure ::= control_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // control_structure ::= control_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // control_structure ::= control_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // control_structure ::= control_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // control_if ::= control_if_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // control_if ::= error_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // control_else ::= KW_ELSE gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // control_else ::= KW_ELSE instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // control_else ::= instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // control_else ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // error_if ::= KW_IF error expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("Right parenthesis missing", ")", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // error_if ::= KW_IF error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("Some code between if and conditional expression", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT error gramatic_body control_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("Syntax error, illegal code inside of the if", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // control_switch_case ::= OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // control_switch_case ::= KW_CASE expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // control_switch_case ::= KW_DEFAULT expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // control_switch_case ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // control_switch_case ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // error_switch ::= KW_SWITCH error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Numeric expresion expected", "expression", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // control_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // control_while_body ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // control_while_body ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // error_while ::= KW_WHILE error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Expression missing in conditional structure", "expression", null);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // error_for ::= KW_FOR error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        parser.generateSyntaxError("Left parenthesis missing", "(", f); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        parser.generateSyntaxError("Right parenthesis missing", ")", f);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // control_for_instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // control_for_instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // control_for_instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // control_for_instruction ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control_for_instruction1 ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // control_for_instruction1 ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // control_for_instruction1 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gramatic_body ::= constant gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // gramatic_body ::= OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // gramatic_body ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // gramatic_body ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // gramatic_body ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // gramatic_body ::= control_structure gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // gramatic_body ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // gramatic_body ::= KW_ELSE error gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // gramatic_body ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // error_gramatic ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_gramatic",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // error_gramatic ::= KW_ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		    
      parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_gramatic",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // error_constant ::= KW_CONST keyword_types IDENT error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be defined as literal", "=", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be asigned with literal", "literal", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_HEXVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_DECIMALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_CHARVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_OCTALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_EXPONENTIALDEF error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variable ::= keyword_types variable_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variable_definition ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variable_definition ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // error_variable_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_variable_definition",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parameters_definition ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // parameter_definition ::= keyword_types IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // parameter_definition ::= KW_CONST keyword_types IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // error_parameter ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // error_parameter ::= KW_CONST error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Const params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // error_parameter ::= IDENT error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_any_type OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression ::= expression_any_type 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression_any_type ::= expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_any_type ::= expression_unary_operator IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_any_type ::= IDENT expression_unary_operator 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_any_type ::= expression expression_binary_operators expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression_any_type ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression_numeric ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression_numeric ::= expression_atomic_literal_int 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression_numeric ::= expression_atomic_call_functions_anytype 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression_numeric ::= expression_unary_operator expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression_numeric ::= expression_numeric expression_binary_operators expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression_numeric ::= expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_atomic ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression_atomic ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression_atomic ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_atomic ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_atomic ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_atomic ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_binary_operators ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expression_binary_operators ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expression_binary_operators ::= OP_ORASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // keyword_types ::= KW_INT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // keyword_types ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // keyword_types ::= KW_LONG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // keyword_types ::= KW_SHORT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // keyword_types ::= KW_VOID 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // keyword_types ::= KW_FLOAT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // keyword_types ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
