
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.CLexer;
import handler.Analyzer;
import model.Token;
import errors.SyntaxError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\267\000\002\002\004\000\002\047\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\004" +
    "\000\002\012\002\000\002\062\004\000\002\062\004\000" +
    "\002\062\005\000\002\062\003\000\002\062\004\000\002" +
    "\062\004\000\002\062\004\000\002\004\007\000\002\002" +
    "\004\000\002\002\003\000\002\003\005\000\002\053\007" +
    "\000\002\053\007\000\002\053\007\000\002\053\010\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\035" +
    "\010\000\002\036\004\000\002\036\004\000\002\036\003" +
    "\000\002\036\003\000\002\050\010\000\002\050\010\000" +
    "\002\050\010\000\002\050\006\000\002\050\011\000\002" +
    "\037\007\000\002\040\006\000\002\040\006\000\002\040" +
    "\006\000\002\040\005\000\002\040\003\000\002\056\005" +
    "\000\002\056\006\000\002\056\007\000\002\041\007\000" +
    "\002\041\003\000\002\042\005\000\002\042\003\000\002" +
    "\051\007\000\002\051\007\000\002\051\007\000\002\051" +
    "\005\000\002\043\013\000\002\043\003\000\002\052\013" +
    "\000\002\052\013\000\002\052\013\000\002\052\013\000" +
    "\002\052\013\000\002\052\013\000\002\044\003\000\002" +
    "\044\005\000\002\044\003\000\002\044\002\000\002\045" +
    "\005\000\002\045\003\000\002\045\002\000\002\013\005" +
    "\000\002\013\004\000\002\013\004\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\004\000\002" +
    "\013\006\000\002\013\005\000\002\013\002\000\002\061" +
    "\002\000\002\061\004\000\002\027\004\000\002\030\010" +
    "\000\002\057\007\000\002\057\010\000\002\057\011\000" +
    "\002\057\011\000\002\057\011\000\002\057\011\000\002" +
    "\057\011\000\002\031\004\000\002\032\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\007\000\002\055\004" +
    "\000\002\006\005\000\002\006\003\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\011\004\000\002" +
    "\011\005\000\002\011\007\000\002\060\002\000\002\060" +
    "\005\000\002\060\005\000\002\015\005\000\002\015\003" +
    "\000\002\015\003\000\002\016\005\000\002\016\003\000" +
    "\002\017\003\000\002\017\004\000\002\017\004\000\002" +
    "\017\005\000\002\017\007\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\004\000\002\020\005" +
    "\000\002\020\007\000\002\021\003\000\002\021\006\000" +
    "\002\021\005\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\025\003\000\002\025\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\026\005\000\002" +
    "\026\006\000\002\022\003\000\002\022\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\054\002\ufffb\003\033\004\010\010\005\011" +
    "\011\015\041\021\044\025\045\026\042\031\013\042\035" +
    "\074\004\075\022\112\007\123\026\124\006\125\017\126" +
    "\023\127\031\130\030\131\016\001\002\000\202\003\uff72" +
    "\004\uff72\010\uff72\011\uff72\015\uff72\016\uff72\021\uff72\022" +
    "\uff72\024\uff72\025\uff72\026\uff72\030\uff72\031\uff72\036\uff72" +
    "\042\uff72\044\uff72\045\uff72\046\uff72\047\uff72\050\uff72\051" +
    "\uff72\052\uff72\053\uff72\054\uff72\055\uff72\056\uff72\057\uff72" +
    "\060\uff72\061\uff72\062\uff72\063\uff72\064\uff72\065\uff72\066" +
    "\uff72\067\uff72\070\uff72\071\uff72\072\uff72\073\uff72\074\uff72" +
    "\075\uff72\076\uff72\077\uff72\100\uff72\101\uff72\102\uff72\103" +
    "\uff72\104\uff72\105\uff72\106\uff72\107\uff72\110\uff72\112\uff72" +
    "\113\uff72\116\uff72\117\uff72\120\uff72\123\uff72\124\uff72\125" +
    "\uff72\126\uff72\127\uff72\130\uff72\131\uff72\001\002\000\010" +
    "\003\uff50\004\uff50\120\uff50\001\002\000\202\003\uff81\004" +
    "\uff81\010\uff81\011\uff81\015\uff81\016\uff81\021\uff81\022\uff81" +
    "\024\uff81\025\uff81\026\uff81\030\uff81\031\uff81\036\uff81\042" +
    "\uff81\044\uff81\045\uff81\046\uff81\047\uff81\050\uff81\051\uff81" +
    "\052\uff81\053\uff81\054\uff81\055\uff81\056\uff81\057\uff81\060" +
    "\uff81\061\uff81\062\uff81\063\uff81\064\uff81\065\uff81\066\uff81" +
    "\067\uff81\070\uff81\071\uff81\072\uff81\073\uff81\074\uff81\075" +
    "\uff81\076\uff81\077\uff81\100\uff81\101\uff81\102\uff81\103\uff81" +
    "\104\uff81\105\uff81\106\uff81\107\uff81\110\uff81\112\uff81\113" +
    "\uff81\116\uff81\117\uff81\120\uff81\123\uff81\124\uff81\125\uff81" +
    "\126\uff81\127\uff81\130\uff81\131\uff81\001\002\000\030\004" +
    "\064\074\004\075\022\112\007\123\026\124\006\125\017" +
    "\126\023\127\031\130\030\131\016\001\002\000\174\004" +
    "\uff85\010\uff85\011\uff85\015\uff85\016\uff85\021\uff85\022\uff85" +
    "\024\uff85\025\uff85\026\uff85\030\uff85\031\uff85\036\uff85\042" +
    "\uff85\044\uff85\045\uff85\046\uff85\047\uff85\050\uff85\051\uff85" +
    "\053\uff85\054\uff85\055\uff85\056\uff85\057\uff85\060\uff85\061" +
    "\uff85\062\uff85\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85" +
    "\070\uff85\071\uff85\072\uff85\073\uff85\074\004\075\022\076" +
    "\uff85\077\uff85\100\uff85\101\uff85\102\uff85\103\uff85\104\uff85" +
    "\106\u0146\107\uff85\110\uff85\112\136\113\uff85\116\uff85\117" +
    "\uff85\120\uff85\123\uff85\124\uff85\125\uff85\126\uff85\127\uff85" +
    "\130\uff85\131\uff85\001\002\000\020\010\005\015\041\021" +
    "\044\025\045\026\042\031\013\042\035\001\002\000\054" +
    "\002\ufffb\003\033\004\010\010\005\011\011\015\041\021" +
    "\044\025\045\026\042\031\013\042\035\074\004\075\022" +
    "\112\007\123\026\124\006\125\017\126\023\127\031\130" +
    "\030\131\016\001\002\000\010\003\uff4e\004\uff4e\120\uff4e" +
    "\001\002\000\004\002\000\001\002\000\004\002\u012e\001" +
    "\002\000\202\003\uff7c\004\uff7c\010\uff7c\011\uff7c\015\uff7c" +
    "\016\uff7c\021\uff7c\022\uff7c\024\uff7c\025\uff7c\026\uff7c\030" +
    "\uff7c\031\uff7c\036\uff7c\042\uff7c\044\uff7c\045\uff7c\046\uff7c" +
    "\047\uff7c\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055" +
    "\uff7c\056\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072" +
    "\uff7c\073\uff7c\074\uff7c\075\uff7c\076\uff7c\077\uff7c\100\uff7c" +
    "\101\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107" +
    "\uff7c\110\uff7c\112\uff7c\113\uff7c\116\uff7c\117\uff7c\120\uff7c" +
    "\123\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c\130\uff7c\131" +
    "\uff7c\001\002\000\202\003\uff80\004\uff80\010\uff80\011\uff80" +
    "\015\uff80\016\uff80\021\uff80\022\uff80\024\uff80\025\uff80\026" +
    "\uff80\030\uff80\031\uff80\036\uff80\042\uff80\044\uff80\045\uff80" +
    "\046\uff80\047\uff80\050\uff80\051\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\056\uff80\057\uff80\060\uff80\061\uff80\062\uff80" +
    "\063\uff80\064\uff80\065\uff80\066\uff80\067\uff80\070\uff80\071" +
    "\uff80\072\uff80\073\uff80\074\uff80\075\uff80\076\uff80\077\uff80" +
    "\100\uff80\101\uff80\102\uff80\103\uff80\104\uff80\105\uff80\106" +
    "\uff80\107\uff80\110\uff80\112\uff80\113\uff80\116\uff80\117\uff80" +
    "\120\uff80\123\uff80\124\uff80\125\uff80\126\uff80\127\uff80\130" +
    "\uff80\131\uff80\001\002\000\054\002\ufffb\003\033\004\010" +
    "\010\005\011\011\015\041\021\044\025\045\026\042\031" +
    "\013\042\035\074\004\075\022\112\007\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\202\003\uff91\004\uff91\010\uff91\011\uff91\015\uff91\016\uff91" +
    "\021\uff91\022\uff91\024\uff91\025\uff91\026\uff91\030\uff91\031" +
    "\uff91\036\uff91\042\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91\056" +
    "\uff91\057\uff91\060\uff91\061\uff91\062\uff91\063\uff91\064\uff91" +
    "\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073" +
    "\uff91\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91\101\uff91" +
    "\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91\107\uff91\110" +
    "\uff91\112\uff91\113\uff91\116\uff91\117\uff91\120\uff91\123\uff91" +
    "\124\uff91\125\uff91\126\uff91\127\uff91\130\uff91\131\uff91\001" +
    "\002\000\202\003\uff71\004\uff71\010\uff71\011\uff71\015\uff71" +
    "\016\uff71\021\uff71\022\uff71\024\uff71\025\uff71\026\uff71\030" +
    "\uff71\031\uff71\036\uff71\042\uff71\044\uff71\045\uff71\046\uff71" +
    "\047\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054\uff71\055" +
    "\uff71\056\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71" +
    "\064\uff71\065\uff71\066\uff71\067\uff71\070\uff71\071\uff71\072" +
    "\uff71\073\uff71\074\uff71\075\uff71\076\uff71\077\uff71\100\uff71" +
    "\101\uff71\102\uff71\103\uff71\104\uff71\105\uff71\106\uff71\107" +
    "\uff71\110\uff71\112\uff71\113\uff71\116\uff71\117\uff71\120\uff71" +
    "\123\uff71\124\uff71\125\uff71\126\uff71\127\uff71\130\uff71\131" +
    "\uff71\001\002\000\202\003\uff7f\004\uff7f\010\uff7f\011\uff7f" +
    "\015\uff7f\016\uff7f\021\uff7f\022\uff7f\024\uff7f\025\uff7f\026" +
    "\uff7f\030\uff7f\031\uff7f\036\uff7f\042\uff7f\044\uff7f\045\uff7f" +
    "\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f\054" +
    "\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062\uff7f" +
    "\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076\uff7f\077\uff7f" +
    "\100\uff7f\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f\106" +
    "\uff7f\107\uff7f\110\uff7f\112\uff7f\113\uff7f\116\uff7f\117\uff7f" +
    "\120\uff7f\123\uff7f\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130" +
    "\uff7f\131\uff7f\001\002\000\104\045\116\046\102\047\113" +
    "\050\121\051\070\053\110\054\076\055\101\056\114\057" +
    "\127\060\074\061\115\062\077\063\071\064\124\065\103" +
    "\066\100\067\072\070\104\071\112\072\125\073\067\076" +
    "\066\077\117\100\126\101\120\102\123\103\122\104\111" +
    "\106\073\107\075\110\107\120\uff93\001\002\000\054\002" +
    "\ufffb\003\033\004\010\010\005\011\011\015\041\021\044" +
    "\025\045\026\042\031\013\042\035\074\004\075\022\112" +
    "\007\123\026\124\006\125\017\126\023\127\031\130\030" +
    "\131\016\001\002\000\202\003\uff82\004\uff82\010\uff82\011" +
    "\uff82\015\uff82\016\uff82\021\uff82\022\uff82\024\uff82\025\uff82" +
    "\026\uff82\030\uff82\031\uff82\036\uff82\042\uff82\044\uff82\045" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82" +
    "\071\uff82\072\uff82\073\uff82\074\uff82\075\uff82\076\uff82\077" +
    "\uff82\100\uff82\101\uff82\102\uff82\103\uff82\104\uff82\105\uff82" +
    "\106\uff82\107\uff82\110\uff82\112\uff82\113\uff82\116\uff82\117" +
    "\uff82\120\uff82\123\uff82\124\uff82\125\uff82\126\uff82\127\uff82" +
    "\130\uff82\131\uff82\001\002\000\010\003\056\004\060\120" +
    "\055\001\002\000\202\003\uff7d\004\uff7d\010\uff7d\011\uff7d" +
    "\015\uff7d\016\uff7d\021\uff7d\022\uff7d\024\uff7d\025\uff7d\026" +
    "\uff7d\030\uff7d\031\uff7d\036\uff7d\042\uff7d\044\uff7d\045\uff7d" +
    "\046\uff7d\047\uff7d\050\uff7d\051\uff7d\052\uff7d\053\uff7d\054" +
    "\uff7d\055\uff7d\056\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d" +
    "\063\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\070\uff7d\071" +
    "\uff7d\072\uff7d\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\uff7d" +
    "\100\uff7d\101\uff7d\102\uff7d\103\uff7d\104\uff7d\105\uff7d\106" +
    "\uff7d\107\uff7d\110\uff7d\112\uff7d\113\uff7d\116\uff7d\117\uff7d" +
    "\120\uff7d\123\uff7d\124\uff7d\125\uff7d\126\uff7d\127\uff7d\130" +
    "\uff7d\131\uff7d\001\002\000\202\003\uff7e\004\uff7e\010\uff7e" +
    "\011\uff7e\015\uff7e\016\uff7e\021\uff7e\022\uff7e\024\uff7e\025" +
    "\uff7e\026\uff7e\030\uff7e\031\uff7e\036\uff7e\042\uff7e\044\uff7e" +
    "\045\uff7e\046\uff7e\047\uff7e\050\uff7e\051\uff7e\052\uff7e\053" +
    "\uff7e\054\uff7e\055\uff7e\056\uff7e\057\uff7e\060\uff7e\061\uff7e" +
    "\062\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\070" +
    "\uff7e\071\uff7e\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e" +
    "\077\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104\uff7e\105" +
    "\uff7e\106\uff7e\107\uff7e\110\uff7e\112\uff7e\113\uff7e\116\uff7e" +
    "\117\uff7e\120\uff7e\123\uff7e\124\uff7e\125\uff7e\126\uff7e\127" +
    "\uff7e\130\uff7e\131\uff7e\001\002\000\054\002\ufffb\003\033" +
    "\004\010\010\005\011\011\015\041\021\044\025\045\026" +
    "\042\031\013\042\035\074\004\075\022\112\007\123\026" +
    "\124\006\125\017\126\023\127\031\130\030\131\016\001" +
    "\002\000\010\116\052\117\053\120\051\001\002\000\004" +
    "\120\050\001\002\000\010\003\uff4d\004\uff4d\120\uff4d\001" +
    "\002\000\054\002\ufff7\003\ufff7\004\ufff7\010\ufff7\011\ufff7" +
    "\015\ufff7\021\ufff7\025\ufff7\026\ufff7\031\ufff7\042\ufff7\074" +
    "\ufff7\075\ufff7\112\ufff7\123\ufff7\124\ufff7\125\ufff7\126\ufff7" +
    "\127\ufff7\130\ufff7\131\ufff7\001\002\000\004\004\047\001" +
    "\002\000\004\120\046\001\002\000\010\003\uff4b\004\uff4b" +
    "\120\uff4b\001\002\000\010\003\uff4f\004\uff4f\120\uff4f\001" +
    "\002\000\202\003\uff90\004\uff90\010\uff90\011\uff90\015\uff90" +
    "\016\uff90\021\uff90\022\uff90\024\uff90\025\uff90\026\uff90\030" +
    "\uff90\031\uff90\036\uff90\042\uff90\044\uff90\045\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055" +
    "\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90\063\uff90" +
    "\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072" +
    "\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90" +
    "\101\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107" +
    "\uff90\110\uff90\112\uff90\113\uff90\116\uff90\117\uff90\120\uff90" +
    "\123\uff90\124\uff90\125\uff90\126\uff90\127\uff90\130\uff90\131" +
    "\uff90\001\002\000\010\003\uff4c\004\uff4c\120\uff4c\001\002" +
    "\000\010\003\uff51\004\uff51\120\uff51\001\002\000\054\002" +
    "\ufff9\003\ufff9\004\ufff9\010\ufff9\011\ufff9\015\ufff9\021\ufff9" +
    "\025\ufff9\026\ufff9\031\ufff9\042\ufff9\074\ufff9\075\ufff9\112" +
    "\ufff9\123\ufff9\124\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9" +
    "\131\ufff9\001\002\000\202\003\uff8f\004\uff8f\010\uff8f\011" +
    "\uff8f\015\uff8f\016\uff8f\021\uff8f\022\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\030\uff8f\031\uff8f\036\uff8f\042\uff8f\044\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060\uff8f\061\uff8f\062" +
    "\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f\067\uff8f\070\uff8f" +
    "\071\uff8f\072\uff8f\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077" +
    "\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f" +
    "\106\uff8f\107\uff8f\110\uff8f\112\uff8f\113\uff8f\116\uff8f\117" +
    "\uff8f\120\uff8f\123\uff8f\124\uff8f\125\uff8f\126\uff8f\127\uff8f" +
    "\130\uff8f\131\uff8f\001\002\000\054\002\uffaf\003\uffaf\004" +
    "\uffaf\010\uffaf\011\uffaf\015\uffaf\021\uffaf\025\uffaf\026\uffaf" +
    "\031\uffaf\042\uffaf\074\uffaf\075\uffaf\112\uffaf\123\uffaf\124" +
    "\uffaf\125\uffaf\126\uffaf\127\uffaf\130\uffaf\131\uffaf\001\002" +
    "\000\054\002\ufff6\003\ufff6\004\ufff6\010\ufff6\011\ufff6\015" +
    "\ufff6\021\ufff6\025\ufff6\026\ufff6\031\ufff6\042\ufff6\074\ufff6" +
    "\075\ufff6\112\ufff6\123\ufff6\124\ufff6\125\ufff6\126\ufff6\127" +
    "\ufff6\130\ufff6\131\ufff6\001\002\000\054\002\ufff4\003\ufff4" +
    "\004\ufff4\010\ufff4\011\ufff4\015\ufff4\021\ufff4\025\ufff4\026" +
    "\ufff4\031\ufff4\042\ufff4\074\ufff4\075\ufff4\112\ufff4\123\ufff4" +
    "\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131\ufff4\001" +
    "\002\000\054\002\ufff5\003\ufff5\004\ufff5\010\ufff5\011\ufff5" +
    "\015\ufff5\021\ufff5\025\ufff5\026\ufff5\031\ufff5\042\ufff5\074" +
    "\ufff5\075\ufff5\112\ufff5\123\ufff5\124\ufff5\125\ufff5\126\ufff5" +
    "\127\ufff5\130\ufff5\131\ufff5\001\002\000\004\002\ufffe\001" +
    "\002\000\054\002\ufffa\003\ufffa\004\ufffa\010\ufffa\011\ufffa" +
    "\015\ufffa\021\ufffa\025\ufffa\026\ufffa\031\ufffa\042\ufffa\074" +
    "\ufffa\075\ufffa\112\ufffa\123\ufffa\124\ufffa\125\ufffa\126\ufffa" +
    "\127\ufffa\130\ufffa\131\ufffa\001\002\000\004\120\u012b\001" +
    "\002\000\074\003\uffa6\004\uffa6\010\uffa6\011\uffa6\015\uffa6" +
    "\016\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6\030" +
    "\uffa6\031\uffa6\036\uffa6\042\uffa6\044\uffa6\074\uffa6\075\uffa6" +
    "\112\uffa6\116\uffa6\117\uffa6\120\uffa6\123\uffa6\124\uffa6\125" +
    "\uffa6\126\uffa6\127\uffa6\130\uffa6\131\uffa6\001\002\000\012" +
    "\052\062\106\063\112\061\120\uffa5\001\002\000\024\010" +
    "\005\011\155\015\041\021\044\025\045\026\042\031\013" +
    "\042\035\113\152\001\002\000\004\004\133\001\002\000" +
    "\030\004\064\074\004\075\022\112\007\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\202\003\uff85\004\uff85\010\uff85\011\uff85\015\uff85\016\uff85" +
    "\021\uff85\022\uff85\024\uff85\025\uff85\026\uff85\030\uff85\031" +
    "\uff85\036\uff85\042\uff85\044\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073" +
    "\uff85\074\004\075\022\076\uff85\077\uff85\100\uff85\101\uff85" +
    "\102\uff85\103\uff85\104\uff85\105\uff85\106\uff85\107\uff85\110" +
    "\uff85\112\136\113\uff85\116\uff85\117\uff85\120\uff85\123\uff85" +
    "\124\uff85\125\uff85\126\uff85\127\uff85\130\uff85\131\uff85\001" +
    "\002\000\176\003\uffa4\004\uffa4\010\uffa4\011\uffa4\015\uffa4" +
    "\016\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4\030" +
    "\uffa4\031\uffa4\036\uffa4\042\uffa4\044\uffa4\045\116\046\102" +
    "\047\113\050\121\051\070\052\106\053\110\054\076\055" +
    "\101\056\114\057\127\060\074\061\115\062\077\063\071" +
    "\064\124\065\103\066\100\067\072\070\104\071\112\072" +
    "\125\073\067\074\uffa4\075\uffa4\076\066\077\117\100\126" +
    "\101\120\102\123\103\122\104\111\106\073\107\075\110" +
    "\107\112\uffa4\116\uffa4\117\uffa4\120\uffa4\123\uffa4\124\uffa4" +
    "\125\uffa4\126\uffa4\127\uffa4\130\uffa4\131\uffa4\001\002\000" +
    "\030\004\uff57\074\uff57\075\uff57\112\uff57\123\uff57\124\uff57" +
    "\125\uff57\126\uff57\127\uff57\130\uff57\131\uff57\001\002\000" +
    "\030\004\uff58\074\uff58\075\uff58\112\uff58\123\uff58\124\uff58" +
    "\125\uff58\126\uff58\127\uff58\130\uff58\131\uff58\001\002\000" +
    "\030\004\uff6c\074\uff6c\075\uff6c\112\uff6c\123\uff6c\124\uff6c" +
    "\125\uff6c\126\uff6c\127\uff6c\130\uff6c\131\uff6c\001\002\000" +
    "\030\004\uff62\074\uff62\075\uff62\112\uff62\123\uff62\124\uff62" +
    "\125\uff62\126\uff62\127\uff62\130\uff62\131\uff62\001\002\000" +
    "\030\004\uff63\074\uff63\075\uff63\112\uff63\123\uff63\124\uff63" +
    "\125\uff63\126\uff63\127\uff63\130\uff63\131\uff63\001\002\000" +
    "\030\004\uff5c\074\uff5c\075\uff5c\112\uff5c\123\uff5c\124\uff5c" +
    "\125\uff5c\126\uff5c\127\uff5c\130\uff5c\131\uff5c\001\002\000" +
    "\030\004\uff64\074\uff64\075\uff64\112\uff64\123\uff64\124\uff64" +
    "\125\uff64\126\uff64\127\uff64\130\uff64\131\uff64\001\002\000" +
    "\030\004\uff5f\074\uff5f\075\uff5f\112\uff5f\123\uff5f\124\uff5f" +
    "\125\uff5f\126\uff5f\127\uff5f\130\uff5f\131\uff5f\001\002\000" +
    "\030\004\uff6a\074\uff6a\075\uff6a\112\uff6a\123\uff6a\124\uff6a" +
    "\125\uff6a\126\uff6a\127\uff6a\130\uff6a\131\uff6a\001\002\000" +
    "\030\004\uff67\074\uff67\075\uff67\112\uff67\123\uff67\124\uff67" +
    "\125\uff67\126\uff67\127\uff67\130\uff67\131\uff67\001\002\000" +
    "\030\004\uff5e\074\uff5e\075\uff5e\112\uff5e\123\uff5e\124\uff5e" +
    "\125\uff5e\126\uff5e\127\uff5e\130\uff5e\131\uff5e\001\002\000" +
    "\030\004\uff6b\074\uff6b\075\uff6b\112\uff6b\123\uff6b\124\uff6b" +
    "\125\uff6b\126\uff6b\127\uff6b\130\uff6b\131\uff6b\001\002\000" +
    "\030\004\uff6e\074\uff6e\075\uff6e\112\uff6e\123\uff6e\124\uff6e" +
    "\125\uff6e\126\uff6e\127\uff6e\130\uff6e\131\uff6e\001\002\000" +
    "\030\004\uff61\074\uff61\075\uff61\112\uff61\123\uff61\124\uff61" +
    "\125\uff61\126\uff61\127\uff61\130\uff61\131\uff61\001\002\000" +
    "\030\004\uff5b\074\uff5b\075\uff5b\112\uff5b\123\uff5b\124\uff5b" +
    "\125\uff5b\126\uff5b\127\uff5b\130\uff5b\131\uff5b\001\002\000" +
    "\030\004\064\074\004\075\022\112\007\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\004\004\133\001\002\000\030\004\uff60\074\uff60\075\uff60" +
    "\112\uff60\123\uff60\124\uff60\125\uff60\126\uff60\127\uff60\130" +
    "\uff60\131\uff60\001\002\000\030\004\uff68\074\uff68\075\uff68" +
    "\112\uff68\123\uff68\124\uff68\125\uff68\126\uff68\127\uff68\130" +
    "\uff68\131\uff68\001\002\000\030\004\064\074\004\075\022" +
    "\112\007\123\026\124\006\125\017\126\023\127\031\130" +
    "\030\131\016\001\002\000\030\004\uff5a\074\uff5a\075\uff5a" +
    "\112\uff5a\123\uff5a\124\uff5a\125\uff5a\126\uff5a\127\uff5a\130" +
    "\uff5a\131\uff5a\001\002\000\030\004\uff70\074\uff70\075\uff70" +
    "\112\uff70\123\uff70\124\uff70\125\uff70\126\uff70\127\uff70\130" +
    "\uff70\131\uff70\001\002\000\030\004\uff69\074\uff69\075\uff69" +
    "\112\uff69\123\uff69\124\uff69\125\uff69\126\uff69\127\uff69\130" +
    "\uff69\131\uff69\001\002\000\030\004\uff65\074\uff65\075\uff65" +
    "\112\uff65\123\uff65\124\uff65\125\uff65\126\uff65\127\uff65\130" +
    "\uff65\131\uff65\001\002\000\030\004\uff6f\074\uff6f\075\uff6f" +
    "\112\uff6f\123\uff6f\124\uff6f\125\uff6f\126\uff6f\127\uff6f\130" +
    "\uff6f\131\uff6f\001\002\000\030\004\uff52\074\uff52\075\uff52" +
    "\112\uff52\123\uff52\124\uff52\125\uff52\126\uff52\127\uff52\130" +
    "\uff52\131\uff52\001\002\000\030\004\uff53\074\uff53\075\uff53" +
    "\112\uff53\123\uff53\124\uff53\125\uff53\126\uff53\127\uff53\130" +
    "\uff53\131\uff53\001\002\000\030\004\uff6d\074\uff6d\075\uff6d" +
    "\112\uff6d\123\uff6d\124\uff6d\125\uff6d\126\uff6d\127\uff6d\130" +
    "\uff6d\131\uff6d\001\002\000\030\004\uff55\074\uff55\075\uff55" +
    "\112\uff55\123\uff55\124\uff55\125\uff55\126\uff55\127\uff55\130" +
    "\uff55\131\uff55\001\002\000\030\004\uff56\074\uff56\075\uff56" +
    "\112\uff56\123\uff56\124\uff56\125\uff56\126\uff56\127\uff56\130" +
    "\uff56\131\uff56\001\002\000\030\004\uff5d\074\uff5d\075\uff5d" +
    "\112\uff5d\123\uff5d\124\uff5d\125\uff5d\126\uff5d\127\uff5d\130" +
    "\uff5d\131\uff5d\001\002\000\030\004\uff59\074\uff59\075\uff59" +
    "\112\uff59\123\uff59\124\uff59\125\uff59\126\uff59\127\uff59\130" +
    "\uff59\131\uff59\001\002\000\030\004\uff54\074\uff54\075\uff54" +
    "\112\uff54\123\uff54\124\uff54\125\uff54\126\uff54\127\uff54\130" +
    "\uff54\131\uff54\001\002\000\030\004\uff66\074\uff66\075\uff66" +
    "\112\uff66\123\uff66\124\uff66\125\uff66\126\uff66\127\uff66\130" +
    "\uff66\131\uff66\001\002\000\104\045\116\046\102\047\113" +
    "\050\121\051\070\053\110\054\076\055\101\056\114\057" +
    "\127\060\074\061\115\062\077\063\071\064\124\065\103" +
    "\066\100\067\072\070\104\071\112\072\125\073\067\076" +
    "\066\077\117\100\126\101\120\102\123\103\122\104\111" +
    "\105\131\106\073\107\075\110\107\001\002\000\030\004" +
    "\064\074\004\075\022\112\007\123\026\124\006\125\017" +
    "\126\023\127\031\130\030\131\016\001\002\000\202\003" +
    "\uff8c\004\uff8c\010\uff8c\011\uff8c\015\uff8c\016\uff8c\021\uff8c" +
    "\022\uff8c\024\uff8c\025\uff8c\026\uff8c\030\uff8c\031\uff8c\036" +
    "\uff8c\042\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\052\uff8c\053\110\054\076\055\101\056\114\057" +
    "\127\060\074\061\115\062\077\063\071\064\124\065\103" +
    "\066\100\067\072\070\104\071\112\072\125\073\067\074" +
    "\uff8c\075\uff8c\076\066\077\117\100\126\101\120\102\123" +
    "\103\122\104\uff8c\105\uff8c\106\073\107\075\110\107\112" +
    "\uff8c\113\uff8c\116\uff8c\117\uff8c\120\uff8c\123\uff8c\124\uff8c" +
    "\125\uff8c\126\uff8c\127\uff8c\130\uff8c\131\uff8c\001\002\000" +
    "\100\003\uffa5\004\uffa5\010\uffa5\011\uffa5\015\uffa5\016\uffa5" +
    "\021\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\030\uffa5\031" +
    "\uffa5\036\uffa5\042\uffa5\044\uffa5\052\062\074\uffa5\075\uffa5" +
    "\106\063\112\uffa5\116\uffa5\117\uffa5\120\uffa5\123\uffa5\124" +
    "\uffa5\125\uffa5\126\uffa5\127\uffa5\130\uffa5\131\uffa5\001\002" +
    "\000\074\003\uffa2\004\uffa2\010\uffa2\011\uffa2\015\uffa2\016" +
    "\uffa2\021\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\030\uffa2" +
    "\031\uffa2\036\uffa2\042\uffa2\044\uffa2\074\uffa2\075\uffa2\112" +
    "\uffa2\116\uffa2\117\uffa2\120\uffa2\123\uffa2\124\uffa2\125\uffa2" +
    "\126\uffa2\127\uffa2\130\uffa2\131\uffa2\001\002\000\202\003" +
    "\uff8d\004\uff8d\010\uff8d\011\uff8d\015\uff8d\016\uff8d\021\uff8d" +
    "\022\uff8d\024\uff8d\025\uff8d\026\uff8d\030\uff8d\031\uff8d\036" +
    "\uff8d\042\uff8d\044\uff8d\045\116\046\102\047\113\050\121" +
    "\051\070\052\uff8d\053\110\054\076\055\101\056\114\057" +
    "\127\060\074\061\115\062\077\063\071\064\124\065\103" +
    "\066\100\067\072\070\104\071\112\072\125\073\067\074" +
    "\uff8d\075\uff8d\076\066\077\117\100\126\101\120\102\123" +
    "\103\122\104\111\105\uff8d\106\073\107\075\110\107\112" +
    "\uff8d\113\uff8d\116\uff8d\117\uff8d\120\uff8d\123\uff8d\124\uff8d" +
    "\125\uff8d\126\uff8d\127\uff8d\130\uff8d\131\uff8d\001\002\000" +
    "\032\004\064\074\004\075\022\112\007\113\143\123\026" +
    "\124\006\125\017\126\023\127\031\130\030\131\016\001" +
    "\002\000\202\003\uff8e\004\uff8e\010\uff8e\011\uff8e\015\uff8e" +
    "\016\uff8e\021\uff8e\022\uff8e\024\uff8e\025\uff8e\026\uff8e\030" +
    "\uff8e\031\uff8e\036\uff8e\042\uff8e\044\uff8e\045\uff8e\046\uff8e" +
    "\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\074\uff8e\075\uff8e\076\uff8e\077\uff8e\100\uff8e" +
    "\101\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107" +
    "\uff8e\110\uff8e\112\uff8e\113\uff8e\116\uff8e\117\uff8e\120\uff8e" +
    "\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e\131" +
    "\uff8e\001\002\000\006\052\145\113\uff9f\001\002\000\004" +
    "\113\144\001\002\000\106\045\116\046\102\047\113\050" +
    "\121\051\070\052\uff9e\053\110\054\076\055\101\056\114" +
    "\057\127\060\074\061\115\062\077\063\071\064\124\065" +
    "\103\066\100\067\072\070\104\071\112\072\125\073\067" +
    "\076\066\077\117\100\126\101\120\102\123\103\122\104" +
    "\111\106\073\107\075\110\107\113\uff9e\001\002\000\202" +
    "\003\uff83\004\uff83\010\uff83\011\uff83\015\uff83\016\uff83\021" +
    "\uff83\022\uff83\024\uff83\025\uff83\026\uff83\030\uff83\031\uff83" +
    "\036\uff83\042\uff83\044\uff83\045\uff83\046\uff83\047\uff83\050" +
    "\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83" +
    "\057\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\074\uff83\075\uff83\076\uff83\077\uff83\100\uff83\101\uff83\102" +
    "\uff83\103\uff83\104\uff83\105\uff83\106\uff83\107\uff83\110\uff83" +
    "\112\uff83\113\uff83\116\uff83\117\uff83\120\uff83\123\uff83\124" +
    "\uff83\125\uff83\126\uff83\127\uff83\130\uff83\131\uff83\001\002" +
    "\000\202\003\uff84\004\uff84\010\uff84\011\uff84\015\uff84\016" +
    "\uff84\021\uff84\022\uff84\024\uff84\025\uff84\026\uff84\030\uff84" +
    "\031\uff84\036\uff84\042\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84" +
    "\056\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064" +
    "\uff84\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84" +
    "\073\uff84\074\uff84\075\uff84\076\uff84\077\uff84\100\uff84\101" +
    "\uff84\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84" +
    "\110\uff84\112\uff84\113\uff84\116\uff84\117\uff84\120\uff84\123" +
    "\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84\131\uff84" +
    "\001\002\000\030\004\064\074\004\075\022\112\007\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\004\113\uffa0\001\002\000\074\003\uffa3\004" +
    "\uffa3\010\uffa3\011\uffa3\015\uffa3\016\uffa3\021\uffa3\022\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\030\uffa3\031\uffa3\036\uffa3\042" +
    "\uffa3\044\uffa3\074\uffa3\075\uffa3\112\uffa3\116\uffa3\117\uffa3" +
    "\120\uffa3\123\uffa3\124\uffa3\125\uffa3\126\uffa3\127\uffa3\130" +
    "\uffa3\131\uffa3\001\002\000\006\052\u0129\113\uff9c\001\002" +
    "\000\004\113\u0128\001\002\000\004\116\ufff1\001\002\000" +
    "\004\004\u0127\001\002\000\004\116\163\001\002\000\020" +
    "\010\005\015\041\021\044\025\045\026\042\031\013\042" +
    "\035\001\002\000\004\004\157\001\002\000\010\052\uff9a" +
    "\106\160\113\uff9a\001\002\000\022\004\161\123\026\124" +
    "\006\125\017\126\023\127\031\130\030\131\016\001\002" +
    "\000\010\052\uff85\112\136\113\uff85\001\002\000\006\052" +
    "\uff99\113\uff99\001\002\000\072\004\010\010\005\011\173" +
    "\015\041\016\211\021\044\022\171\024\204\025\045\026" +
    "\042\030\177\031\013\036\203\042\035\044\213\074\004" +
    "\075\022\112\007\116\175\117\uffb2\120\214\123\026\124" +
    "\006\125\017\126\023\127\031\130\030\131\016\001\002" +
    "\000\054\002\ufff3\003\ufff3\004\ufff3\010\ufff3\011\ufff3\015" +
    "\ufff3\021\ufff3\025\ufff3\026\ufff3\031\ufff3\042\ufff3\074\ufff3" +
    "\075\ufff3\112\ufff3\123\ufff3\124\ufff3\125\ufff3\126\ufff3\127" +
    "\ufff3\130\ufff3\131\ufff3\001\002\000\072\004\uffd1\010\uffd1" +
    "\011\uffd1\015\uffd1\016\uffd1\021\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\030\uffd1\031\uffd1\036\uffd1\042\uffd1\044\uffd1" +
    "\074\uffd1\075\uffd1\112\uffd1\116\uffd1\117\uffd1\120\uffd1\123" +
    "\uffd1\124\uffd1\125\uffd1\126\uffd1\127\uffd1\130\uffd1\131\uffd1" +
    "\001\002\000\072\004\uffe8\010\uffe8\011\uffe8\015\uffe8\016" +
    "\uffe8\021\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8" +
    "\031\uffe8\036\uffe8\042\uffe8\044\uffe8\074\uffe8\075\uffe8\112" +
    "\uffe8\116\uffe8\117\uffe8\120\uffe8\123\uffe8\124\uffe8\125\uffe8" +
    "\126\uffe8\127\uffe8\130\uffe8\131\uffe8\001\002\000\072\004" +
    "\uffe6\010\uffe6\011\uffe6\015\uffe6\016\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\030\uffe6\031\uffe6\036\uffe6\042" +
    "\uffe6\044\uffe6\074\uffe6\075\uffe6\112\uffe6\116\uffe6\117\uffe6" +
    "\120\uffe6\123\uffe6\124\uffe6\125\uffe6\126\uffe6\127\uffe6\130" +
    "\uffe6\131\uffe6\001\002\000\072\004\uffc9\010\uffc9\011\uffc9" +
    "\015\uffc9\016\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\030\uffc9\031\uffc9\036\uffc9\042\uffc9\044\uffc9\074\uffc9" +
    "\075\uffc9\112\uffc9\116\uffc9\117\uffc9\120\uffc9\123\uffc9\124" +
    "\uffc9\125\uffc9\126\uffc9\127\uffc9\130\uffc9\131\uffc9\001\002" +
    "\000\006\003\372\112\371\001\002\000\072\004\uffeb\010" +
    "\uffeb\011\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\030\uffeb\031\uffeb\036\uffeb\042\uffeb\044" +
    "\uffeb\074\uffeb\075\uffeb\112\uffeb\116\uffeb\117\uffeb\120\uffeb" +
    "\123\uffeb\124\uffeb\125\uffeb\126\uffeb\127\uffeb\130\uffeb\131" +
    "\uffeb\001\002\000\020\010\005\015\041\021\044\025\045" +
    "\026\042\031\013\042\035\001\002\000\004\004\133\001" +
    "\002\000\072\004\010\010\005\011\173\015\041\016\211" +
    "\021\044\022\171\024\204\025\045\026\042\030\177\031" +
    "\013\036\203\042\035\044\213\074\004\075\022\112\007" +
    "\116\175\117\uffb2\120\214\123\026\124\006\125\017\126" +
    "\023\127\031\130\030\131\016\001\002\000\004\120\262" +
    "\001\002\000\030\004\064\074\004\075\022\112\007\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\172\004\uff93\010\uff93\011\uff93\015\uff93\016" +
    "\uff93\021\uff93\022\uff93\024\uff93\025\uff93\026\uff93\030\uff93" +
    "\031\uff93\036\uff93\042\uff93\044\uff93\045\116\046\102\047" +
    "\113\050\121\051\070\053\110\054\076\055\101\056\114" +
    "\057\127\060\074\061\115\062\077\063\071\064\124\065" +
    "\103\066\100\067\072\070\104\071\112\072\125\073\067" +
    "\074\uff93\075\uff93\076\066\077\117\100\126\101\120\102" +
    "\123\103\122\104\111\106\073\107\075\110\107\112\uff93" +
    "\116\uff93\117\uff93\120\226\123\uff93\124\uff93\125\uff93\126" +
    "\uff93\127\uff93\130\uff93\131\uff93\001\002\000\072\004\uffe9" +
    "\010\uffe9\011\uffe9\015\uffe9\016\uffe9\021\uffe9\022\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\036\uffe9\042\uffe9" +
    "\044\uffe9\074\uffe9\075\uffe9\112\uffe9\116\uffe9\117\uffe9\120" +
    "\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9\127\uffe9\130\uffe9" +
    "\131\uffe9\001\002\000\072\004\010\010\005\011\173\015" +
    "\041\016\211\021\044\022\171\024\204\025\045\026\042" +
    "\030\177\031\013\036\203\042\035\044\213\074\004\075" +
    "\022\112\007\116\175\117\uffb2\120\214\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\004\112\305\001\002\000\006\003\251\112\250\001\002" +
    "\000\072\004\uffea\010\uffea\011\uffea\015\uffea\016\uffea\021" +
    "\uffea\022\uffea\024\uffea\025\uffea\026\uffea\030\uffea\031\uffea" +
    "\036\uffea\042\uffea\044\uffea\074\uffea\075\uffea\112\uffea\116" +
    "\uffea\117\uffea\120\uffea\123\uffea\124\uffea\125\uffea\126\uffea" +
    "\127\uffea\130\uffea\131\uffea\001\002\000\072\004\uffe7\010" +
    "\uffe7\011\uffe7\015\uffe7\016\uffe7\021\uffe7\022\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\030\uffe7\031\uffe7\036\uffe7\042\uffe7\044" +
    "\uffe7\074\uffe7\075\uffe7\112\uffe7\116\uffe7\117\uffe7\120\uffe7" +
    "\123\uffe7\124\uffe7\125\uffe7\126\uffe7\127\uffe7\130\uffe7\131" +
    "\uffe7\001\002\000\072\004\010\010\005\011\173\015\041" +
    "\016\211\021\044\022\171\024\204\025\045\026\042\030" +
    "\177\031\013\036\203\042\035\044\213\074\004\075\022" +
    "\112\007\116\175\117\uffb2\120\214\123\026\124\006\125" +
    "\017\126\023\127\031\130\030\131\016\001\002\000\072" +
    "\004\uff94\010\uff94\011\uff94\015\uff94\016\uff94\021\uff94\022" +
    "\uff94\024\uff94\025\uff94\026\uff94\030\uff94\031\uff94\036\uff94" +
    "\042\uff94\044\uff94\074\uff94\075\uff94\112\uff94\116\uff94\117" +
    "\uff94\120\245\123\uff94\124\uff94\125\uff94\126\uff94\127\uff94" +
    "\130\uff94\131\uff94\001\002\000\004\003\243\001\002\000" +
    "\004\117\242\001\002\000\006\003\217\112\216\001\002" +
    "\000\072\004\010\010\005\011\173\015\041\016\211\021" +
    "\044\022\171\024\204\025\045\026\042\030\177\031\013" +
    "\036\203\042\035\044\213\074\004\075\022\112\007\116" +
    "\175\117\uffb2\120\214\123\026\124\006\125\017\126\023" +
    "\127\031\130\030\131\016\001\002\000\072\004\uffb9\010" +
    "\uffb9\011\uffb9\015\uffb9\016\uffb9\021\uffb9\022\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\030\uffb9\031\uffb9\036\uffb9\042\uffb9\044" +
    "\uffb9\074\uffb9\075\uffb9\112\uffb9\116\uffb9\117\uffb9\120\uffb9" +
    "\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127\uffb9\130\uffb9\131" +
    "\uffb9\001\002\000\032\003\233\004\064\074\004\075\022" +
    "\112\007\123\026\124\006\125\017\126\023\127\031\130" +
    "\030\131\016\001\002\000\074\004\010\006\222\010\005" +
    "\011\173\015\041\016\211\021\044\022\171\024\204\025" +
    "\045\026\042\030\177\031\013\036\203\042\035\044\213" +
    "\074\004\075\022\112\007\116\175\117\uffb2\120\214\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\072\004\uffcb\010\uffcb\011\uffcb\015\uffcb\016" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\030\uffcb" +
    "\031\uffcb\036\uffcb\042\uffcb\044\uffcb\074\uffcb\075\uffcb\112" +
    "\uffcb\116\uffcb\117\uffcb\120\uffcb\123\uffcb\124\uffcb\125\uffcb" +
    "\126\uffcb\127\uffcb\130\uffcb\131\uffcb\001\002\000\106\045" +
    "\116\046\102\047\113\050\121\051\070\053\110\054\076" +
    "\055\101\056\114\057\127\060\074\061\115\062\077\063" +
    "\071\064\124\065\103\066\100\067\072\070\104\071\112" +
    "\072\125\073\067\076\066\077\117\100\126\101\120\102" +
    "\123\103\122\104\111\106\073\107\075\110\107\113\227" +
    "\120\226\001\002\000\004\120\224\001\002\000\072\004" +
    "\uffcf\010\uffcf\011\uffcf\015\uffcf\016\uffcf\021\uffcf\022\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\030\uffcf\031\uffcf\036\uffcf\042" +
    "\uffcf\044\uffcf\074\uffcf\075\uffcf\112\uffcf\116\uffcf\117\uffcf" +
    "\120\uffcf\123\uffcf\124\uffcf\125\uffcf\126\uffcf\127\uffcf\130" +
    "\uffcf\131\uffcf\001\002\000\074\004\010\006\222\010\005" +
    "\011\173\015\041\016\211\021\044\022\171\024\204\025" +
    "\045\026\042\030\177\031\013\036\203\042\035\044\213" +
    "\074\004\075\022\112\007\116\175\117\uffb2\120\214\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\072\004\uffd0\010\uffd0\011\uffd0\015\uffd0\016" +
    "\uffd0\021\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\030\uffd0" +
    "\031\uffd0\036\uffd0\042\uffd0\044\uffd0\074\uffd0\075\uffd0\112" +
    "\uffd0\116\uffd0\117\uffd0\120\uffd0\123\uffd0\124\uffd0\125\uffd0" +
    "\126\uffd0\127\uffd0\130\uffd0\131\uffd0\001\002\000\072\004" +
    "\010\010\005\011\173\015\041\016\211\021\044\022\171" +
    "\024\204\025\045\026\042\030\177\031\013\036\203\042" +
    "\035\044\213\074\004\075\022\112\007\116\175\117\uffb2" +
    "\120\214\123\026\124\006\125\017\126\023\127\031\130" +
    "\030\131\016\001\002\000\074\004\010\006\222\010\005" +
    "\011\173\015\041\016\211\021\044\022\171\024\204\025" +
    "\045\026\042\030\177\031\013\036\203\042\035\044\213" +
    "\074\004\075\022\112\007\116\175\117\uffb2\120\214\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\072\004\uffce\010\uffce\011\uffce\015\uffce\016" +
    "\uffce\021\uffce\022\uffce\024\uffce\025\uffce\026\uffce\030\uffce" +
    "\031\uffce\036\uffce\042\uffce\044\uffce\074\uffce\075\uffce\112" +
    "\uffce\116\uffce\117\uffce\120\uffce\123\uffce\124\uffce\125\uffce" +
    "\126\uffce\127\uffce\130\uffce\131\uffce\001\002\000\072\004" +
    "\uffb7\010\uffb7\011\uffb7\015\uffb7\016\uffb7\021\uffb7\022\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7\036\uffb7\042" +
    "\uffb7\044\uffb7\074\uffb7\075\uffb7\112\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7\127\uffb7\130" +
    "\uffb7\131\uffb7\001\002\000\106\003\236\045\116\046\102" +
    "\047\113\050\121\051\070\053\110\054\076\055\101\056" +
    "\114\057\127\060\074\061\115\062\077\063\071\064\124" +
    "\065\103\066\100\067\072\070\104\071\112\072\125\073" +
    "\067\076\066\077\117\100\126\101\120\102\123\103\122" +
    "\104\111\106\073\107\075\110\107\113\237\001\002\000" +
    "\004\113\234\001\002\000\074\004\010\006\222\010\005" +
    "\011\173\015\041\016\211\021\044\022\171\024\204\025" +
    "\045\026\042\030\177\031\013\036\203\042\035\044\213" +
    "\074\004\075\022\112\007\116\175\117\uffb2\120\214\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\072\004\uffcd\010\uffcd\011\uffcd\015\uffcd\016" +
    "\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd" +
    "\031\uffcd\036\uffcd\042\uffcd\044\uffcd\074\uffcd\075\uffcd\112" +
    "\uffcd\116\uffcd\117\uffcd\120\uffcd\123\uffcd\124\uffcd\125\uffcd" +
    "\126\uffcd\127\uffcd\130\uffcd\131\uffcd\001\002\000\074\004" +
    "\010\006\222\010\005\011\173\015\041\016\211\021\044" +
    "\022\171\024\204\025\045\026\042\030\177\031\013\036" +
    "\203\042\035\044\213\074\004\075\022\112\007\116\175" +
    "\117\uffb2\120\214\123\026\124\006\125\017\126\023\127" +
    "\031\130\030\131\016\001\002\000\074\004\010\006\222" +
    "\010\005\011\173\015\041\016\211\021\044\022\171\024" +
    "\204\025\045\026\042\030\177\031\013\036\203\042\035" +
    "\044\213\074\004\075\022\112\007\116\175\117\uffb2\120" +
    "\214\123\026\124\006\125\017\126\023\127\031\130\030" +
    "\131\016\001\002\000\072\004\uffd2\010\uffd2\011\uffd2\015" +
    "\uffd2\016\uffd2\021\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\030\uffd2\031\uffd2\036\uffd2\042\uffd2\044\uffd2\074\uffd2\075" +
    "\uffd2\112\uffd2\116\uffd2\117\uffd2\120\uffd2\123\uffd2\124\uffd2" +
    "\125\uffd2\126\uffd2\127\uffd2\130\uffd2\131\uffd2\001\002\000" +
    "\072\004\uffcc\010\uffcc\011\uffcc\015\uffcc\016\uffcc\021\uffcc" +
    "\022\uffcc\024\uffcc\025\uffcc\026\uffcc\030\uffcc\031\uffcc\036" +
    "\uffcc\042\uffcc\044\uffcc\074\uffcc\075\uffcc\112\uffcc\116\uffcc" +
    "\117\uffcc\120\uffcc\123\uffcc\124\uffcc\125\uffcc\126\uffcc\127" +
    "\uffcc\130\uffcc\131\uffcc\001\002\000\054\002\ufff0\003\ufff0" +
    "\004\ufff0\010\ufff0\011\ufff0\015\ufff0\021\ufff0\025\ufff0\026" +
    "\ufff0\031\ufff0\042\ufff0\074\ufff0\075\ufff0\112\ufff0\123\ufff0" +
    "\124\ufff0\125\ufff0\126\ufff0\127\ufff0\130\ufff0\131\ufff0\001" +
    "\002\000\072\004\010\010\005\011\173\015\041\016\211" +
    "\021\044\022\171\024\204\025\045\026\042\030\177\031" +
    "\013\036\203\042\035\044\213\074\004\075\022\112\007" +
    "\116\175\117\uffb2\120\214\123\026\124\006\125\017\126" +
    "\023\127\031\130\030\131\016\001\002\000\072\004\uffb3" +
    "\010\uffb3\011\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3\024" +
    "\uffb3\025\uffb3\026\uffb3\030\uffb3\031\uffb3\036\uffb3\042\uffb3" +
    "\044\uffb3\074\uffb3\075\uffb3\112\uffb3\116\uffb3\117\uffb3\120" +
    "\uffb3\123\uffb3\124\uffb3\125\uffb3\126\uffb3\127\uffb3\130\uffb3" +
    "\131\uffb3\001\002\000\072\004\010\010\005\011\173\015" +
    "\041\016\211\021\044\022\171\024\204\025\045\026\042" +
    "\030\177\031\013\036\203\042\035\044\213\074\004\075" +
    "\022\112\007\116\175\117\uffb2\120\214\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\072\004\uffb8\010\uffb8\011\uffb8\015\uffb8\016\uffb8\021\uffb8" +
    "\022\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\036" +
    "\uffb8\042\uffb8\044\uffb8\074\uffb8\075\uffb8\112\uffb8\116\uffb8" +
    "\117\uffb8\120\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127" +
    "\uffb8\130\uffb8\131\uffb8\001\002\000\072\004\uffb5\010\uffb5" +
    "\011\uffb5\015\uffb5\016\uffb5\021\uffb5\022\uffb5\024\uffb5\025" +
    "\uffb5\026\uffb5\030\uffb5\031\uffb5\036\uffb5\042\uffb5\044\uffb5" +
    "\074\uffb5\075\uffb5\112\uffb5\116\uffb5\117\uffb5\120\uffb5\123" +
    "\uffb5\124\uffb5\125\uffb5\126\uffb5\127\uffb5\130\uffb5\131\uffb5" +
    "\001\002\000\032\003\270\004\064\074\004\075\022\112" +
    "\007\123\026\124\006\125\017\126\023\127\031\130\030" +
    "\131\016\001\002\000\072\004\010\010\005\011\173\015" +
    "\041\016\211\021\044\022\171\024\204\025\045\026\042" +
    "\030\177\031\013\036\203\042\035\044\213\074\004\075" +
    "\022\112\007\116\175\117\uffb2\120\214\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\106\045\116\046\102\047\113\050\121\051\070\053\110" +
    "\054\076\055\101\056\114\057\127\060\074\061\115\062" +
    "\077\063\071\064\124\065\103\066\100\067\072\070\104" +
    "\071\112\072\125\073\067\076\066\077\117\100\126\101" +
    "\120\102\123\103\122\104\111\106\073\107\075\110\107" +
    "\113\264\120\226\001\002\000\072\004\010\010\005\011" +
    "\173\015\041\016\256\021\044\022\171\024\204\025\045" +
    "\026\042\030\177\031\013\036\203\042\035\044\213\074" +
    "\004\075\022\112\007\116\175\117\uffb2\120\214\123\026" +
    "\124\006\125\017\126\023\127\031\130\030\131\016\001" +
    "\002\000\072\004\uffdd\010\uffdd\011\uffdd\015\uffdd\016\uffdd" +
    "\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026\uffdd\030\uffdd\031" +
    "\uffdd\036\uffdd\042\uffdd\044\uffdd\074\uffdd\075\uffdd\112\uffdd" +
    "\116\uffdd\117\uffdd\120\uffdd\123\uffdd\124\uffdd\125\uffdd\126" +
    "\uffdd\127\uffdd\130\uffdd\131\uffdd\001\002\000\072\004\uffe2" +
    "\010\uffe2\011\uffe2\015\uffe2\016\uffe2\021\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\030\uffe2\031\uffe2\036\uffe2\042\uffe2" +
    "\044\uffe2\074\uffe2\075\uffe2\112\uffe2\116\uffe2\117\uffe2\120" +
    "\262\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2" +
    "\131\uffe2\001\002\000\074\003\243\004\010\010\005\011" +
    "\173\015\041\016\211\021\044\022\171\024\204\025\045" +
    "\026\042\030\177\031\013\036\203\042\035\044\213\074" +
    "\004\075\022\112\007\116\175\117\uffb2\120\214\123\026" +
    "\124\006\125\017\126\023\127\031\130\030\131\016\001" +
    "\002\000\072\004\uffe1\010\uffe1\011\uffe1\015\uffe1\016\uffe1" +
    "\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\031" +
    "\uffe1\036\uffe1\042\uffe1\044\uffe1\074\uffe1\075\uffe1\112\uffe1" +
    "\116\uffe1\117\uffe1\120\uffe1\123\uffe1\124\uffe1\125\uffe1\126" +
    "\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002\000\072\004\uffe3" +
    "\010\uffe3\011\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\030\uffe3\031\uffe3\036\uffe3\042\uffe3" +
    "\044\uffe3\074\uffe3\075\uffe3\112\uffe3\116\uffe3\117\uffe3\120" +
    "\uffe3\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3" +
    "\131\uffe3\001\002\000\072\004\uffe4\010\uffe4\011\uffe4\015" +
    "\uffe4\016\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\030\uffe4\031\uffe4\036\uffe4\042\uffe4\044\uffe4\074\uffe4\075" +
    "\uffe4\112\uffe4\116\uffe4\117\uffe4\120\uffe4\123\uffe4\124\uffe4" +
    "\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\001\002\000" +
    "\072\004\010\010\005\011\173\015\041\016\211\021\044" +
    "\022\171\024\204\025\045\026\042\030\177\031\013\036" +
    "\203\042\035\044\213\074\004\075\022\112\007\116\175" +
    "\117\uffb2\120\214\123\026\124\006\125\017\126\023\127" +
    "\031\130\030\131\016\001\002\000\072\004\uffb6\010\uffb6" +
    "\011\uffb6\015\uffb6\016\uffb6\021\uffb6\022\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\030\uffb6\031\uffb6\036\uffb6\042\uffb6\044\uffb6" +
    "\074\uffb6\075\uffb6\112\uffb6\116\uffb6\117\uffb6\120\uffb6\123" +
    "\uffb6\124\uffb6\125\uffb6\126\uffb6\127\uffb6\130\uffb6\131\uffb6" +
    "\001\002\000\072\004\010\010\005\011\173\015\041\016" +
    "\211\021\044\022\171\024\204\025\045\026\042\030\177" +
    "\031\013\036\203\042\035\044\213\074\004\075\022\112" +
    "\007\116\175\117\uffb2\120\214\123\026\124\006\125\017" +
    "\126\023\127\031\130\030\131\016\001\002\000\072\004" +
    "\010\010\005\011\173\015\041\016\256\021\044\022\171" +
    "\024\204\025\045\026\042\030\177\031\013\036\203\042" +
    "\035\044\213\074\004\075\022\112\007\116\175\117\uffb2" +
    "\120\214\123\026\124\006\125\017\126\023\127\031\130" +
    "\030\131\016\001\002\000\072\004\uffe0\010\uffe0\011\uffe0" +
    "\015\uffe0\016\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026" +
    "\uffe0\030\uffe0\031\uffe0\036\uffe0\042\uffe0\044\uffe0\074\uffe0" +
    "\075\uffe0\112\uffe0\116\uffe0\117\uffe0\120\uffe0\123\uffe0\124" +
    "\uffe0\125\uffe0\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002" +
    "\000\106\003\274\045\116\046\102\047\113\050\121\051" +
    "\070\053\110\054\076\055\101\056\114\057\127\060\074" +
    "\061\115\062\077\063\071\064\124\065\103\066\100\067" +
    "\072\070\104\071\112\072\125\073\067\076\066\077\117" +
    "\100\126\101\120\102\123\103\122\104\111\106\073\107" +
    "\075\110\107\113\275\001\002\000\004\113\271\001\002" +
    "\000\072\004\010\010\005\011\173\015\041\016\211\021" +
    "\044\022\171\024\204\025\045\026\042\030\177\031\013" +
    "\036\203\042\035\044\213\074\004\075\022\112\007\116" +
    "\175\117\uffb2\120\214\123\026\124\006\125\017\126\023" +
    "\127\031\130\030\131\016\001\002\000\072\004\010\010" +
    "\005\011\173\015\041\016\256\021\044\022\171\024\204" +
    "\025\045\026\042\030\177\031\013\036\203\042\035\044" +
    "\213\074\004\075\022\112\007\116\175\117\uffb2\120\214" +
    "\123\026\124\006\125\017\126\023\127\031\130\030\131" +
    "\016\001\002\000\072\004\uffdf\010\uffdf\011\uffdf\015\uffdf" +
    "\016\uffdf\021\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\030" +
    "\uffdf\031\uffdf\036\uffdf\042\uffdf\044\uffdf\074\uffdf\075\uffdf" +
    "\112\uffdf\116\uffdf\117\uffdf\120\uffdf\123\uffdf\124\uffdf\125" +
    "\uffdf\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\072" +
    "\004\010\010\005\011\173\015\041\016\211\021\044\022" +
    "\171\024\204\025\045\026\042\030\177\031\013\036\203" +
    "\042\035\044\213\074\004\075\022\112\007\116\175\117" +
    "\uffb2\120\214\123\026\124\006\125\017\126\023\127\031" +
    "\130\030\131\016\001\002\000\074\003\276\004\010\010" +
    "\005\011\173\015\041\016\211\021\044\022\171\024\204" +
    "\025\045\026\042\030\177\031\013\036\203\042\035\044" +
    "\213\074\004\075\022\112\007\116\175\117\uffb2\120\214" +
    "\123\026\124\006\125\017\126\023\127\031\130\030\131" +
    "\016\001\002\000\072\004\010\010\005\011\173\015\041" +
    "\016\211\021\044\022\171\024\204\025\045\026\042\030" +
    "\177\031\013\036\203\042\035\044\213\074\004\075\022" +
    "\112\007\116\175\117\uffb2\120\214\123\026\124\006\125" +
    "\017\126\023\127\031\130\030\131\016\001\002\000\072" +
    "\004\010\010\005\011\173\015\041\016\256\021\044\022" +
    "\171\024\204\025\045\026\042\030\177\031\013\036\203" +
    "\042\035\044\213\074\004\075\022\112\007\116\175\117" +
    "\uffb2\120\214\123\026\124\006\125\017\126\023\127\031" +
    "\130\030\131\016\001\002\000\072\004\uffe5\010\uffe5\011" +
    "\uffe5\015\uffe5\016\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\030\uffe5\031\uffe5\036\uffe5\042\uffe5\044\uffe5\074" +
    "\uffe5\075\uffe5\112\uffe5\116\uffe5\117\uffe5\120\uffe5\123\uffe5" +
    "\124\uffe5\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5\001" +
    "\002\000\072\004\010\010\005\011\173\015\041\016\256" +
    "\021\044\022\171\024\204\025\045\026\042\030\177\031" +
    "\013\036\203\042\035\044\213\074\004\075\022\112\007" +
    "\116\175\117\uffb2\120\214\123\026\124\006\125\017\126" +
    "\023\127\031\130\030\131\016\001\002\000\072\004\uffdc" +
    "\010\uffdc\011\uffdc\015\uffdc\016\uffdc\021\uffdc\022\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\036\uffdc\042\uffdc" +
    "\044\uffdc\074\uffdc\075\uffdc\112\uffdc\116\uffdc\117\uffdc\120" +
    "\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc\130\uffdc" +
    "\131\uffdc\001\002\000\072\004\010\010\005\011\173\015" +
    "\041\016\256\021\044\022\171\024\204\025\045\026\042" +
    "\030\177\031\013\036\203\042\035\044\213\074\004\075" +
    "\022\112\007\116\175\117\uffb2\120\214\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\072\004\uffde\010\uffde\011\uffde\015\uffde\016\uffde\021\uffde" +
    "\022\uffde\024\uffde\025\uffde\026\uffde\030\uffde\031\uffde\036" +
    "\uffde\042\uffde\044\uffde\074\uffde\075\uffde\112\uffde\116\uffde" +
    "\117\uffde\120\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127" +
    "\uffde\130\uffde\131\uffde\001\002\000\022\004\306\074\004" +
    "\075\022\123\316\124\312\126\313\127\307\131\311\001" +
    "\002\000\110\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b" +
    "\053\uff8b\054\uff8b\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061" +
    "\uff8b\062\uff8b\063\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b" +
    "\070\uff8b\071\uff8b\072\uff8b\073\uff8b\076\uff8b\077\uff8b\100" +
    "\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b" +
    "\107\uff8b\110\uff8b\112\353\113\uff8b\001\002\000\110\045" +
    "\uff76\046\uff76\047\uff76\050\uff76\051\uff76\053\uff76\054\uff76" +
    "\055\uff76\056\uff76\057\uff76\060\uff76\061\uff76\062\uff76\063" +
    "\uff76\064\uff76\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76" +
    "\072\uff76\073\uff76\076\uff76\077\uff76\100\uff76\101\uff76\102" +
    "\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76\110\uff76" +
    "\113\uff76\120\uff76\001\002\000\106\045\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\053\uff89\054\uff89\055\uff89\056\uff89" +
    "\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\065" +
    "\uff89\066\uff89\067\uff89\070\uff89\071\uff89\072\uff89\073\uff89" +
    "\076\uff89\077\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104" +
    "\uff89\105\uff89\106\uff89\107\uff89\110\uff89\113\uff89\001\002" +
    "\000\110\045\uff75\046\uff75\047\uff75\050\uff75\051\uff75\053" +
    "\uff75\054\uff75\055\uff75\056\uff75\057\uff75\060\uff75\061\uff75" +
    "\062\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067\uff75\070" +
    "\uff75\071\uff75\072\uff75\073\uff75\076\uff75\077\uff75\100\uff75" +
    "\101\uff75\102\uff75\103\uff75\104\uff75\105\uff75\106\uff75\107" +
    "\uff75\110\uff75\113\uff75\120\uff75\001\002\000\110\045\uff78" +
    "\046\uff78\047\uff78\050\uff78\051\uff78\053\uff78\054\uff78\055" +
    "\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062\uff78\063\uff78" +
    "\064\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072" +
    "\uff78\073\uff78\076\uff78\077\uff78\100\uff78\101\uff78\102\uff78" +
    "\103\uff78\104\uff78\105\uff78\106\uff78\107\uff78\110\uff78\113" +
    "\uff78\120\uff78\001\002\000\110\045\uff77\046\uff77\047\uff77" +
    "\050\uff77\051\uff77\053\uff77\054\uff77\055\uff77\056\uff77\057" +
    "\uff77\060\uff77\061\uff77\062\uff77\063\uff77\064\uff77\065\uff77" +
    "\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77\073\uff77\076" +
    "\uff77\077\uff77\100\uff77\101\uff77\102\uff77\103\uff77\104\uff77" +
    "\105\uff77\106\uff77\107\uff77\110\uff77\113\uff77\120\uff77\001" +
    "\002\000\106\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a" +
    "\053\uff8a\054\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061" +
    "\uff8a\062\uff8a\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a" +
    "\070\uff8a\071\uff8a\072\uff8a\073\uff8a\076\uff8a\077\uff8a\100" +
    "\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106\uff8a" +
    "\107\uff8a\110\uff8a\113\uff8a\001\002\000\104\045\116\046" +
    "\102\047\113\050\121\051\070\053\110\054\076\055\101" +
    "\056\114\057\127\060\074\061\115\062\077\063\071\064" +
    "\124\065\103\066\100\067\072\070\104\071\112\072\125" +
    "\073\067\076\066\077\117\100\126\101\120\102\123\103" +
    "\122\104\322\106\073\107\075\110\107\113\327\001\002" +
    "\000\110\045\uff79\046\uff79\047\uff79\050\uff79\051\uff79\053" +
    "\uff79\054\uff79\055\uff79\056\uff79\057\uff79\060\uff79\061\uff79" +
    "\062\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070" +
    "\uff79\071\uff79\072\uff79\073\uff79\076\uff79\077\uff79\100\uff79" +
    "\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79\106\uff79\107" +
    "\uff79\110\uff79\113\uff79\120\uff79\001\002\000\022\004\306" +
    "\074\004\075\022\123\316\124\312\126\313\127\307\131" +
    "\311\001\002\000\106\045\116\046\102\047\113\050\121" +
    "\051\070\053\110\054\076\055\101\056\114\057\127\060" +
    "\074\061\115\062\077\063\071\064\124\065\103\066\100" +
    "\067\072\070\104\071\112\072\125\073\067\076\066\077" +
    "\117\100\126\101\120\102\123\103\122\104\322\105\uff88" +
    "\106\073\107\075\110\107\113\uff88\001\002\000\022\004" +
    "\306\074\004\075\022\123\316\124\312\126\313\127\307" +
    "\131\311\001\002\000\022\004\306\074\004\075\022\123" +
    "\316\124\312\126\313\127\307\131\311\001\002\000\104" +
    "\045\116\046\102\047\113\050\121\051\070\053\110\054" +
    "\076\055\101\056\114\057\127\060\074\061\115\062\077" +
    "\063\071\064\124\065\103\066\100\067\072\070\104\071" +
    "\112\072\125\073\067\076\066\077\117\100\126\101\120" +
    "\102\123\103\122\104\322\105\324\106\073\107\075\110" +
    "\107\001\002\000\022\004\306\074\004\075\022\123\316" +
    "\124\312\126\313\127\307\131\311\001\002\000\106\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\051\uff86\053\110\054\076" +
    "\055\101\056\114\057\127\060\074\061\115\062\077\063" +
    "\071\064\124\065\103\066\100\067\072\070\104\071\112" +
    "\072\125\073\067\076\066\077\117\100\126\101\120\102" +
    "\123\103\122\104\uff86\105\uff86\106\073\107\075\110\107" +
    "\113\uff86\001\002\000\106\045\116\046\102\047\113\050" +
    "\121\051\070\053\110\054\076\055\101\056\114\057\127" +
    "\060\074\061\115\062\077\063\071\064\124\065\103\066" +
    "\100\067\072\070\104\071\112\072\125\073\067\076\066" +
    "\077\117\100\126\101\120\102\123\103\122\104\322\105" +
    "\uff87\106\073\107\075\110\107\113\uff87\001\002\000\100" +
    "\004\010\006\332\007\330\010\005\011\173\013\334\015" +
    "\041\016\211\021\044\022\171\024\204\025\045\026\042" +
    "\030\177\031\013\036\203\042\035\044\213\074\004\075" +
    "\022\112\007\116\331\117\uffb2\120\214\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\022\004\306\074\004\075\022\123\316\124\312\126\313" +
    "\127\307\131\311\001\002\000\100\004\010\006\332\007" +
    "\330\010\005\011\173\013\334\015\041\016\211\021\044" +
    "\022\171\024\204\025\045\026\042\030\177\031\013\036" +
    "\203\042\035\044\213\074\004\075\022\112\007\116\331" +
    "\117\uffb2\120\214\123\026\124\006\125\017\126\023\127" +
    "\031\130\030\131\016\001\002\000\004\120\341\001\002" +
    "\000\072\004\uffd6\010\uffd6\011\uffd6\015\uffd6\016\uffd6\021" +
    "\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\036\uffd6\042\uffd6\044\uffd6\074\uffd6\075\uffd6\112\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6" +
    "\127\uffd6\130\uffd6\131\uffd6\001\002\000\022\004\306\074" +
    "\004\075\022\123\316\124\312\126\313\127\307\131\311" +
    "\001\002\000\072\004\uffdb\010\uffdb\011\uffdb\015\uffdb\016" +
    "\uffdb\021\uffdb\022\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb" +
    "\031\uffdb\036\uffdb\042\uffdb\044\uffdb\074\uffdb\075\uffdb\112" +
    "\uffdb\116\uffdb\117\uffdb\120\uffdb\123\uffdb\124\uffdb\125\uffdb" +
    "\126\uffdb\127\uffdb\130\uffdb\131\uffdb\001\002\000\104\045" +
    "\116\046\102\047\113\050\121\051\070\053\110\054\076" +
    "\055\101\056\114\057\127\060\074\061\115\062\077\063" +
    "\071\064\124\065\103\066\100\067\072\070\104\071\112" +
    "\072\125\073\067\076\066\077\117\100\126\101\120\102" +
    "\123\103\122\104\322\105\337\106\073\107\075\110\107" +
    "\001\002\000\100\004\010\006\332\007\330\010\005\011" +
    "\173\013\334\015\041\016\211\021\044\022\171\024\204" +
    "\025\045\026\042\030\177\031\013\036\203\042\035\044" +
    "\213\074\004\075\022\112\007\116\331\117\uffb2\120\214" +
    "\123\026\124\006\125\017\126\023\127\031\130\030\131" +
    "\016\001\002\000\072\004\uffd8\010\uffd8\011\uffd8\015\uffd8" +
    "\016\uffd8\021\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\030" +
    "\uffd8\031\uffd8\036\uffd8\042\uffd8\044\uffd8\074\uffd8\075\uffd8" +
    "\112\uffd8\116\uffd8\117\uffd8\120\uffd8\123\uffd8\124\uffd8\125" +
    "\uffd8\126\uffd8\127\uffd8\130\uffd8\131\uffd8\001\002\000\100" +
    "\004\010\006\332\007\330\010\005\011\173\013\334\015" +
    "\041\016\211\021\044\022\171\024\204\025\045\026\042" +
    "\030\177\031\013\036\203\042\035\044\213\074\004\075" +
    "\022\112\007\116\331\117\uffb2\120\214\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\072\004\uffd7\010\uffd7\011\uffd7\015\uffd7\016\uffd7\021\uffd7" +
    "\022\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7\036" +
    "\uffd7\042\uffd7\044\uffd7\074\uffd7\075\uffd7\112\uffd7\116\uffd7" +
    "\117\uffd7\120\uffd7\123\uffd7\124\uffd7\125\uffd7\126\uffd7\127" +
    "\uffd7\130\uffd7\131\uffd7\001\002\000\004\117\347\001\002" +
    "\000\004\117\345\001\002\000\100\004\010\006\332\007" +
    "\330\010\005\011\173\013\334\015\041\016\211\021\044" +
    "\022\171\024\204\025\045\026\042\030\177\031\013\036" +
    "\203\042\035\044\213\074\004\075\022\112\007\116\331" +
    "\117\uffb2\120\214\123\026\124\006\125\017\126\023\127" +
    "\031\130\030\131\016\001\002\000\072\004\uffda\010\uffda" +
    "\011\uffda\015\uffda\016\uffda\021\uffda\022\uffda\024\uffda\025" +
    "\uffda\026\uffda\030\uffda\031\uffda\036\uffda\042\uffda\044\uffda" +
    "\074\uffda\075\uffda\112\uffda\116\uffda\117\uffda\120\uffda\123" +
    "\uffda\124\uffda\125\uffda\126\uffda\127\uffda\130\uffda\131\uffda" +
    "\001\002\000\072\004\uffbb\010\uffbb\011\uffbb\015\uffbb\016" +
    "\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\030\uffbb" +
    "\031\uffbb\036\uffbb\042\uffbb\044\uffbb\074\uffbb\075\uffbb\112" +
    "\uffbb\116\uffbb\117\uffbb\120\uffbb\123\uffbb\124\uffbb\125\uffbb" +
    "\126\uffbb\127\uffbb\130\uffbb\131\uffbb\001\002\000\104\045" +
    "\116\046\102\047\113\050\121\051\070\053\110\054\076" +
    "\055\101\056\114\057\127\060\074\061\115\062\077\063" +
    "\071\064\124\065\103\066\100\067\072\070\104\071\112" +
    "\072\125\073\067\076\066\077\117\100\126\101\120\102" +
    "\123\103\122\104\322\105\351\106\073\107\075\110\107" +
    "\001\002\000\100\004\010\006\332\007\330\010\005\011" +
    "\173\013\334\015\041\016\211\021\044\022\171\024\204" +
    "\025\045\026\042\030\177\031\013\036\203\042\035\044" +
    "\213\074\004\075\022\112\007\116\331\117\uffb2\120\214" +
    "\123\026\124\006\125\017\126\023\127\031\130\030\131" +
    "\016\001\002\000\072\004\uffd9\010\uffd9\011\uffd9\015\uffd9" +
    "\016\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9\030" +
    "\uffd9\031\uffd9\036\uffd9\042\uffd9\044\uffd9\074\uffd9\075\uffd9" +
    "\112\uffd9\116\uffd9\117\uffd9\120\uffd9\123\uffd9\124\uffd9\125" +
    "\uffd9\126\uffd9\127\uffd9\130\uffd9\131\uffd9\001\002\000\032" +
    "\004\064\074\004\075\022\112\007\113\355\123\026\124" +
    "\006\125\017\126\023\127\031\130\030\131\016\001\002" +
    "\000\004\113\356\001\002\000\106\045\uff74\046\uff74\047" +
    "\uff74\050\uff74\051\uff74\053\uff74\054\uff74\055\uff74\056\uff74" +
    "\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065" +
    "\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74" +
    "\076\uff74\077\uff74\100\uff74\101\uff74\102\uff74\103\uff74\104" +
    "\uff74\105\uff74\106\uff74\107\uff74\110\uff74\113\uff74\001\002" +
    "\000\106\045\uff73\046\uff73\047\uff73\050\uff73\051\uff73\053" +
    "\uff73\054\uff73\055\uff73\056\uff73\057\uff73\060\uff73\061\uff73" +
    "\062\uff73\063\uff73\064\uff73\065\uff73\066\uff73\067\uff73\070" +
    "\uff73\071\uff73\072\uff73\073\uff73\076\uff73\077\uff73\100\uff73" +
    "\101\uff73\102\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107" +
    "\uff73\110\uff73\113\uff73\001\002\000\072\004\uffba\010\uffba" +
    "\011\uffba\015\uffba\016\uffba\021\uffba\022\uffba\024\uffba\025" +
    "\uffba\026\uffba\030\uffba\031\uffba\036\uffba\042\uffba\044\uffba" +
    "\074\uffba\075\uffba\112\uffba\116\uffba\117\uffba\120\uffba\123" +
    "\uffba\124\uffba\125\uffba\126\uffba\127\uffba\130\uffba\131\uffba" +
    "\001\002\000\104\045\116\046\102\047\113\050\121\051" +
    "\070\053\110\054\076\055\101\056\114\057\127\060\074" +
    "\061\115\062\077\063\071\064\124\065\103\066\100\067" +
    "\072\070\104\071\112\072\125\073\067\076\066\077\117" +
    "\100\126\101\120\102\123\103\122\104\111\106\073\107" +
    "\075\110\107\120\361\001\002\000\072\004\010\010\005" +
    "\011\173\015\041\016\211\021\044\022\171\024\204\025" +
    "\045\026\042\030\177\031\013\036\203\042\035\044\213" +
    "\074\004\075\022\112\007\116\175\117\uffb2\120\214\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\072\004\uffb4\010\uffb4\011\uffb4\015\uffb4\016" +
    "\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\030\uffb4" +
    "\031\uffb4\036\uffb4\042\uffb4\044\uffb4\074\uffb4\075\uffb4\112" +
    "\uffb4\116\uffb4\117\uffb4\120\uffb4\123\uffb4\124\uffb4\125\uffb4" +
    "\126\uffb4\127\uffb4\130\uffb4\131\uffb4\001\002\000\004\117" +
    "\347\001\002\000\004\004\365\001\002\000\004\106\366" +
    "\001\002\000\014\123\316\124\312\126\313\127\307\131" +
    "\311\001\002\000\004\120\370\001\002\000\076\002\uffae" +
    "\003\uffae\004\uffae\010\uffae\011\uffae\015\uffae\016\uffae\021" +
    "\uffae\022\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031\uffae" +
    "\036\uffae\042\uffae\044\uffae\074\uffae\075\uffae\112\uffae\116" +
    "\uffae\117\uffae\120\uffae\123\uffae\124\uffae\125\uffae\126\uffae" +
    "\127\uffae\130\uffae\131\uffae\001\002\000\052\003\uffbf\004" +
    "\373\010\005\015\041\021\044\025\045\026\042\031\013" +
    "\042\035\074\004\075\022\112\007\120\uffbf\123\026\124" +
    "\006\125\017\126\023\127\031\130\030\131\016\001\002" +
    "\000\050\004\373\010\005\015\041\021\044\025\045\026" +
    "\042\031\013\042\035\074\004\075\022\112\007\120\uffbf" +
    "\123\026\124\006\125\017\126\023\127\031\130\030\131" +
    "\016\001\002\000\114\003\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056\uff85\057" +
    "\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85\065\uff85" +
    "\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073\uff85\074" +
    "\004\075\022\076\uff85\077\uff85\100\uff85\101\uff85\102\uff85" +
    "\103\uff85\104\uff85\106\u0109\107\uff85\110\uff85\112\136\120" +
    "\uff85\001\002\000\106\003\uffc0\045\116\046\102\047\113" +
    "\050\121\051\070\053\110\054\076\055\101\056\114\057" +
    "\127\060\074\061\115\062\077\063\071\064\124\065\103" +
    "\066\100\067\072\070\104\071\112\072\125\073\067\076" +
    "\066\077\117\100\126\101\120\102\123\103\122\104\111" +
    "\106\073\107\075\110\107\120\uffc0\001\002\000\006\003" +
    "\uffc2\120\uffc2\001\002\000\004\120\377\001\002\000\030" +
    "\004\064\074\004\075\022\112\007\123\026\124\006\125" +
    "\017\126\023\127\031\130\030\131\016\001\002\000\104" +
    "\045\116\046\102\047\113\050\121\051\070\053\110\054" +
    "\076\055\101\056\114\057\127\060\074\061\115\062\077" +
    "\063\071\064\124\065\103\066\100\067\072\070\104\071" +
    "\112\072\125\073\067\076\066\077\117\100\126\101\120" +
    "\102\123\103\122\104\111\106\073\107\075\110\107\120" +
    "\u0101\001\002\000\032\004\u0102\074\004\075\022\112\007" +
    "\113\uffbc\123\026\124\006\125\017\126\023\127\031\130" +
    "\030\131\016\001\002\000\114\003\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\053\uff85\054\uff85\055\uff85\056" +
    "\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85\064\uff85" +
    "\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072\uff85\073" +
    "\uff85\074\004\075\022\076\uff85\077\uff85\100\uff85\101\uff85" +
    "\102\uff85\103\uff85\104\uff85\106\u0107\107\uff85\110\uff85\112" +
    "\136\113\uff85\001\002\000\004\113\u0105\001\002\000\104" +
    "\045\116\046\102\047\113\050\121\051\070\053\110\054" +
    "\076\055\101\056\114\057\127\060\074\061\115\062\077" +
    "\063\071\064\124\065\103\066\100\067\072\070\104\071" +
    "\112\072\125\073\067\076\066\077\117\100\126\101\120" +
    "\102\123\103\122\104\111\106\073\107\075\110\107\113" +
    "\uffbd\001\002\000\072\004\010\010\005\011\173\015\041" +
    "\016\211\021\044\022\171\024\204\025\045\026\042\030" +
    "\177\031\013\036\203\042\035\044\213\074\004\075\022" +
    "\112\007\116\175\117\uffb2\120\214\123\026\124\006\125" +
    "\017\126\023\127\031\130\030\131\016\001\002\000\072" +
    "\004\uffc8\010\uffc8\011\uffc8\015\uffc8\016\uffc8\021\uffc8\022" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\036\uffc8" +
    "\042\uffc8\044\uffc8\074\uffc8\075\uffc8\112\uffc8\116\uffc8\117" +
    "\uffc8\120\uffc8\123\uffc8\124\uffc8\125\uffc8\126\uffc8\127\uffc8" +
    "\130\uffc8\131\uffc8\001\002\000\030\004\064\074\004\075" +
    "\022\112\007\123\026\124\006\125\017\126\023\127\031" +
    "\130\030\131\016\001\002\000\104\045\116\046\102\047" +
    "\113\050\121\051\070\053\110\054\076\055\101\056\114" +
    "\057\127\060\074\061\115\062\077\063\071\064\124\065" +
    "\103\066\100\067\072\070\104\071\112\072\125\073\067" +
    "\076\066\077\117\100\126\101\120\102\123\103\122\104" +
    "\111\106\073\107\075\110\107\113\uffbe\001\002\000\030" +
    "\004\064\074\004\075\022\112\007\123\026\124\006\125" +
    "\017\126\023\127\031\130\030\131\016\001\002\000\106" +
    "\003\uffc1\045\116\046\102\047\113\050\121\051\070\053" +
    "\110\054\076\055\101\056\114\057\127\060\074\061\115" +
    "\062\077\063\071\064\124\065\103\066\100\067\072\070" +
    "\104\071\112\072\125\073\067\076\066\077\117\100\126" +
    "\101\120\102\123\103\122\104\111\106\073\107\075\110" +
    "\107\120\uffc1\001\002\000\006\003\u010d\120\u010c\001\002" +
    "\000\032\003\u0114\004\064\074\004\075\022\112\007\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\030\004\064\074\004\075\022\112\007\123" +
    "\026\124\006\125\017\126\023\127\031\130\030\131\016" +
    "\001\002\000\104\045\116\046\102\047\113\050\121\051" +
    "\070\053\110\054\076\055\101\056\114\057\127\060\074" +
    "\061\115\062\077\063\071\064\124\065\103\066\100\067" +
    "\072\070\104\071\112\072\125\073\067\076\066\077\117" +
    "\100\126\101\120\102\123\103\122\104\111\106\073\107" +
    "\075\110\107\120\u010f\001\002\000\032\004\u0102\074\004" +
    "\075\022\112\007\113\uffbc\123\026\124\006\125\017\126" +
    "\023\127\031\130\030\131\016\001\002\000\004\113\u0111" +
    "\001\002\000\072\004\010\010\005\011\173\015\041\016" +
    "\211\021\044\022\171\024\204\025\045\026\042\030\177" +
    "\031\013\036\203\042\035\044\213\074\004\075\022\112" +
    "\007\116\175\117\uffb2\120\214\123\026\124\006\125\017" +
    "\126\023\127\031\130\030\131\016\001\002\000\072\004" +
    "\uffc7\010\uffc7\011\uffc7\015\uffc7\016\uffc7\021\uffc7\022\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\030\uffc7\031\uffc7\036\uffc7\042" +
    "\uffc7\044\uffc7\074\uffc7\075\uffc7\112\uffc7\116\uffc7\117\uffc7" +
    "\120\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127\uffc7\130" +
    "\uffc7\131\uffc7\001\002\000\106\003\u011a\045\116\046\102" +
    "\047\113\050\121\051\070\053\110\054\076\055\101\056" +
    "\114\057\127\060\074\061\115\062\077\063\071\064\124" +
    "\065\103\066\100\067\072\070\104\071\112\072\125\073" +
    "\067\076\066\077\117\100\126\101\120\102\123\103\122" +
    "\104\111\106\073\107\075\110\107\120\u0119\001\002\000" +
    "\004\120\u0115\001\002\000\032\004\u0102\074\004\075\022" +
    "\112\007\113\uffbc\123\026\124\006\125\017\126\023\127" +
    "\031\130\030\131\016\001\002\000\004\113\u0117\001\002" +
    "\000\072\004\010\010\005\011\173\015\041\016\211\021" +
    "\044\022\171\024\204\025\045\026\042\030\177\031\013" +
    "\036\203\042\035\044\213\074\004\075\022\112\007\116" +
    "\175\117\uffb2\120\214\123\026\124\006\125\017\126\023" +
    "\127\031\130\030\131\016\001\002\000\072\004\uffc6\010" +
    "\uffc6\011\uffc6\015\uffc6\016\uffc6\021\uffc6\022\uffc6\024\uffc6" +
    "\025\uffc6\026\uffc6\030\uffc6\031\uffc6\036\uffc6\042\uffc6\044" +
    "\uffc6\074\uffc6\075\uffc6\112\uffc6\116\uffc6\117\uffc6\120\uffc6" +
    "\123\uffc6\124\uffc6\125\uffc6\126\uffc6\127\uffc6\130\uffc6\131" +
    "\uffc6\001\002\000\034\003\u0120\004\u0102\074\004\075\022" +
    "\112\007\113\uffbc\123\026\124\006\125\017\126\023\127" +
    "\031\130\030\131\016\001\002\000\032\004\u0102\074\004" +
    "\075\022\112\007\113\uffbc\123\026\124\006\125\017\126" +
    "\023\127\031\130\030\131\016\001\002\000\004\113\u011c" +
    "\001\002\000\072\004\010\010\005\011\173\015\041\016" +
    "\211\021\044\022\171\024\204\025\045\026\042\030\177" +
    "\031\013\036\203\042\035\044\213\074\004\075\022\112" +
    "\007\116\175\117\uffb2\120\214\123\026\124\006\125\017" +
    "\126\023\127\031\130\030\131\016\001\002\000\072\004" +
    "\uffc5\010\uffc5\011\uffc5\015\uffc5\016\uffc5\021\uffc5\022\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\030\uffc5\031\uffc5\036\uffc5\042" +
    "\uffc5\044\uffc5\074\uffc5\075\uffc5\112\uffc5\116\uffc5\117\uffc5" +
    "\120\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\127\uffc5\130" +
    "\uffc5\131\uffc5\001\002\000\004\113\u0125\001\002\000\106" +
    "\003\u0123\045\116\046\102\047\113\050\121\051\070\053" +
    "\110\054\076\055\101\056\114\057\127\060\074\061\115" +
    "\062\077\063\071\064\124\065\103\066\100\067\072\070" +
    "\104\071\112\072\125\073\067\076\066\077\117\100\126" +
    "\101\120\102\123\103\122\104\111\106\073\107\075\110" +
    "\107\113\uffbd\001\002\000\004\113\u0121\001\002\000\072" +
    "\004\010\010\005\011\173\015\041\016\211\021\044\022" +
    "\171\024\204\025\045\026\042\030\177\031\013\036\203" +
    "\042\035\044\213\074\004\075\022\112\007\116\175\117" +
    "\uffb2\120\214\123\026\124\006\125\017\126\023\127\031" +
    "\130\030\131\016\001\002\000\072\004\uffc4\010\uffc4\011" +
    "\uffc4\015\uffc4\016\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\030\uffc4\031\uffc4\036\uffc4\042\uffc4\044\uffc4\074" +
    "\uffc4\075\uffc4\112\uffc4\116\uffc4\117\uffc4\120\uffc4\123\uffc4" +
    "\124\uffc4\125\uffc4\126\uffc4\127\uffc4\130\uffc4\131\uffc4\001" +
    "\002\000\072\004\010\010\005\011\173\015\041\016\211" +
    "\021\044\022\171\024\204\025\045\026\042\030\177\031" +
    "\013\036\203\042\035\044\213\074\004\075\022\112\007" +
    "\116\175\117\uffb2\120\214\123\026\124\006\125\017\126" +
    "\023\127\031\130\030\131\016\001\002\000\072\004\uffc3" +
    "\010\uffc3\011\uffc3\015\uffc3\016\uffc3\021\uffc3\022\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\030\uffc3\031\uffc3\036\uffc3\042\uffc3" +
    "\044\uffc3\074\uffc3\075\uffc3\112\uffc3\116\uffc3\117\uffc3\120" +
    "\uffc3\123\uffc3\124\uffc3\125\uffc3\126\uffc3\127\uffc3\130\uffc3" +
    "\131\uffc3\001\002\000\072\004\010\010\005\011\173\015" +
    "\041\016\211\021\044\022\171\024\204\025\045\026\042" +
    "\030\177\031\013\036\203\042\035\044\213\074\004\075" +
    "\022\112\007\116\175\117\uffb2\120\214\123\026\124\006" +
    "\125\017\126\023\127\031\130\030\131\016\001\002\000" +
    "\072\004\uffca\010\uffca\011\uffca\015\uffca\016\uffca\021\uffca" +
    "\022\uffca\024\uffca\025\uffca\026\uffca\030\uffca\031\uffca\036" +
    "\uffca\042\uffca\044\uffca\074\uffca\075\uffca\112\uffca\116\uffca" +
    "\117\uffca\120\uffca\123\uffca\124\uffca\125\uffca\126\uffca\127" +
    "\uffca\130\uffca\131\uffca\001\002\000\006\052\uff9b\113\uff9b" +
    "\001\002\000\004\116\ufff2\001\002\000\022\010\005\011" +
    "\155\015\041\021\044\025\045\026\042\031\013\042\035" +
    "\001\002\000\004\113\uff9d\001\002\000\054\002\ufff8\003" +
    "\ufff8\004\ufff8\010\ufff8\011\ufff8\015\ufff8\021\ufff8\025\ufff8" +
    "\026\ufff8\031\ufff8\042\ufff8\074\ufff8\075\ufff8\112\ufff8\123" +
    "\ufff8\124\ufff8\125\ufff8\126\ufff8\127\ufff8\130\ufff8\131\ufff8" +
    "\001\002\000\004\002\ufffc\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\001\001\002\000\004\002\ufffd\001\002" +
    "\000\004\004\u0131\001\002\000\006\003\u0132\106\u0133\001" +
    "\002\000\004\120\u0145\001\002\000\016\003\u0137\123\u0139" +
    "\124\u0135\126\u0138\127\u0134\131\u0136\001\002\000\006\003" +
    "\u0143\120\uff76\001\002\000\006\003\u0141\120\uff78\001\002" +
    "\000\006\003\u013f\120\uff75\001\002\000\004\120\u013e\001" +
    "\002\000\006\003\u013c\120\uff77\001\002\000\006\003\u013a" +
    "\120\uff79\001\002\000\004\120\u013b\001\002\000\054\002" +
    "\uffab\003\uffab\004\uffab\010\uffab\011\uffab\015\uffab\021\uffab" +
    "\025\uffab\026\uffab\031\uffab\042\uffab\074\uffab\075\uffab\112" +
    "\uffab\123\uffab\124\uffab\125\uffab\126\uffab\127\uffab\130\uffab" +
    "\131\uffab\001\002\000\004\120\u013d\001\002\000\054\002" +
    "\uffa9\003\uffa9\004\uffa9\010\uffa9\011\uffa9\015\uffa9\021\uffa9" +
    "\025\uffa9\026\uffa9\031\uffa9\042\uffa9\074\uffa9\075\uffa9\112" +
    "\uffa9\123\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9\130\uffa9" +
    "\131\uffa9\001\002\000\054\002\uffac\003\uffac\004\uffac\010" +
    "\uffac\011\uffac\015\uffac\021\uffac\025\uffac\026\uffac\031\uffac" +
    "\042\uffac\074\uffac\075\uffac\112\uffac\123\uffac\124\uffac\125" +
    "\uffac\126\uffac\127\uffac\130\uffac\131\uffac\001\002\000\004" +
    "\120\u0140\001\002\000\054\002\uffa7\003\uffa7\004\uffa7\010" +
    "\uffa7\011\uffa7\015\uffa7\021\uffa7\025\uffa7\026\uffa7\031\uffa7" +
    "\042\uffa7\074\uffa7\075\uffa7\112\uffa7\123\uffa7\124\uffa7\125" +
    "\uffa7\126\uffa7\127\uffa7\130\uffa7\131\uffa7\001\002\000\004" +
    "\120\u0142\001\002\000\054\002\uffaa\003\uffaa\004\uffaa\010" +
    "\uffaa\011\uffaa\015\uffaa\021\uffaa\025\uffaa\026\uffaa\031\uffaa" +
    "\042\uffaa\074\uffaa\075\uffaa\112\uffaa\123\uffaa\124\uffaa\125" +
    "\uffaa\126\uffaa\127\uffaa\130\uffaa\131\uffaa\001\002\000\004" +
    "\120\u0144\001\002\000\054\002\uffa8\003\uffa8\004\uffa8\010" +
    "\uffa8\011\uffa8\015\uffa8\021\uffa8\025\uffa8\026\uffa8\031\uffa8" +
    "\042\uffa8\074\uffa8\075\uffa8\112\uffa8\123\uffa8\124\uffa8\125" +
    "\uffa8\126\uffa8\127\uffa8\130\uffa8\131\uffa8\001\002\000\054" +
    "\002\uffad\003\uffad\004\uffad\010\uffad\011\uffad\015\uffad\021" +
    "\uffad\025\uffad\026\uffad\031\uffad\042\uffad\074\uffad\075\uffad" +
    "\112\uffad\123\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130" +
    "\uffad\131\uffad\001\002\000\030\004\064\074\004\075\022" +
    "\112\007\123\026\124\006\125\017\126\023\127\031\130" +
    "\030\131\016\001\002\000\172\004\uff95\010\uff95\011\uff95" +
    "\015\uff95\016\uff95\021\uff95\022\uff95\024\uff95\025\uff95\026" +
    "\uff95\030\uff95\031\uff95\036\uff95\042\uff95\044\uff95\045\116" +
    "\046\102\047\113\050\121\051\070\053\110\054\076\055" +
    "\101\056\114\057\127\060\074\061\115\062\077\063\071" +
    "\064\124\065\103\066\100\067\072\070\104\071\112\072" +
    "\125\073\067\074\uff95\075\uff95\076\066\077\117\100\126" +
    "\101\120\102\123\103\122\104\111\106\073\107\075\110" +
    "\107\112\uff95\116\uff95\117\uff95\120\uff95\123\uff95\124\uff95" +
    "\125\uff95\126\uff95\127\uff95\130\uff95\131\uff95\001\002\000" +
    "\104\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\053\uff91" +
    "\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91" +
    "\071\uff91\072\uff91\073\uff91\076\uff91\077\uff91\100\uff91\101" +
    "\uff91\102\uff91\103\uff91\104\uff91\106\uff91\107\uff91\110\uff91" +
    "\113\u014a\001\002\000\102\045\116\046\102\047\113\050" +
    "\121\051\070\053\110\054\076\055\101\056\114\057\127" +
    "\060\074\061\115\062\077\063\071\064\124\065\103\066" +
    "\100\067\072\070\104\071\112\072\125\073\067\076\066" +
    "\077\117\100\126\101\120\102\123\103\122\104\111\106" +
    "\073\107\075\110\107\001\002\000\202\003\uff92\004\uff92" +
    "\010\uff92\011\uff92\015\uff92\016\uff92\021\uff92\022\uff92\024" +
    "\uff92\025\uff92\026\uff92\030\uff92\031\uff92\036\uff92\042\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052" +
    "\uff92\053\uff92\054\uff92\055\uff92\056\uff92\057\uff92\060\uff92" +
    "\061\uff92\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067" +
    "\uff92\070\uff92\071\uff92\072\uff92\073\uff92\074\uff92\075\uff92" +
    "\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92\103\uff92\104" +
    "\uff92\105\uff92\106\uff92\107\uff92\110\uff92\112\uff92\113\uff92" +
    "\116\uff92\117\uff92\120\uff92\123\uff92\124\uff92\125\uff92\126" +
    "\uff92\127\uff92\130\uff92\131\uff92\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0148\000\036\004\017\005\026\012\013\015\037\016" +
    "\023\017\020\021\042\022\036\027\031\030\011\031\033" +
    "\047\014\057\035\062\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\u0148\017\u0147" +
    "\021\042\022\036\001\001\000\004\022\136\001\001\000" +
    "\004\005\u012f\001\001\000\034\004\017\005\026\012\u012e" +
    "\015\037\016\023\017\020\021\042\022\036\027\031\030" +
    "\011\031\033\057\035\062\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\017\005\026\012\u012c\015\037" +
    "\016\023\017\020\021\042\022\036\027\031\030\011\031" +
    "\033\057\035\062\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\104\001\001\000" +
    "\034\004\017\005\026\012\u012b\015\037\016\023\017\020" +
    "\021\042\022\036\027\031\030\011\031\033\057\035\062" +
    "\024\001\001\000\002\001\001\000\004\032\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\017\005" +
    "\026\012\053\015\037\016\023\017\020\021\042\022\036" +
    "\027\031\030\011\031\033\057\035\062\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\153" +
    "\005\152\010\150\011\147\001\001\000\004\032\146\001" +
    "\001\000\012\016\064\017\020\021\042\022\036\001\001" +
    "\000\004\022\136\001\001\000\004\023\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\134\017\020" +
    "\021\042\022\036\001\001\000\004\032\133\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\127\017\020" +
    "\021\042\022\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\104\001\001\000\012\016\131\017\020\021\042\022\036" +
    "\001\001\000\004\023\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\104\001\001\000\016\006\140" +
    "\007\137\016\141\017\020\021\042\022\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\006\145\007\137\016\141\017\020\021\042\022\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\163\001\001\000\004\005\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\046\005\173\013" +
    "\211\015\175\016\177\017\020\021\042\022\036\030\201" +
    "\031\207\033\206\034\171\035\205\037\204\041\200\043" +
    "\165\050\166\051\164\052\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\363\001\001\000\004\032\056\001\001\000\046\005" +
    "\173\013\362\015\175\016\177\017\020\021\042\022\036" +
    "\030\201\031\207\033\206\034\171\035\205\037\204\041" +
    "\200\043\165\050\166\051\164\052\167\001\001\000\002" +
    "\001\001\000\012\016\357\017\020\021\042\022\036\001" +
    "\001\000\004\023\104\001\001\000\002\001\001\000\046" +
    "\005\173\013\356\015\175\016\177\017\020\021\042\022" +
    "\036\030\201\031\207\033\206\034\171\035\205\037\204" +
    "\041\200\043\165\050\166\051\164\052\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\005\173\013\246\015\175\016\177\017" +
    "\020\021\042\022\036\030\201\031\207\033\206\034\171" +
    "\035\205\037\204\041\200\043\165\050\166\051\164\052" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\005\173\013\214\015" +
    "\175\016\177\017\020\021\042\022\036\030\201\031\207" +
    "\033\206\034\171\035\205\037\204\041\200\043\165\050" +
    "\166\051\164\052\167\001\001\000\002\001\001\000\012" +
    "\016\231\017\020\021\042\022\036\001\001\000\050\005" +
    "\173\013\222\015\175\016\220\017\020\021\042\022\036" +
    "\030\201\031\207\033\206\034\171\035\205\037\204\041" +
    "\200\042\217\043\165\050\166\051\164\052\167\001\001" +
    "\000\002\001\001\000\004\023\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\005\173\013\222\015\175" +
    "\016\177\017\020\021\042\022\036\030\201\031\207\033" +
    "\206\034\171\035\205\037\204\041\200\042\224\043\165" +
    "\050\166\051\164\052\167\001\001\000\002\001\001\000" +
    "\046\005\173\013\230\015\175\016\177\017\020\021\042" +
    "\022\036\030\201\031\207\033\206\034\171\035\205\037" +
    "\204\041\200\043\165\050\166\051\164\052\167\001\001" +
    "\000\050\005\173\013\222\015\175\016\177\017\020\021" +
    "\042\022\036\030\201\031\207\033\206\034\171\035\205" +
    "\037\204\041\200\042\227\043\165\050\166\051\164\052" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\104\001\001\000\002\001\001\000\050\005\173\013" +
    "\222\015\175\016\177\017\020\021\042\022\036\030\201" +
    "\031\207\033\206\034\171\035\205\037\204\041\200\042" +
    "\234\043\165\050\166\051\164\052\167\001\001\000\002" +
    "\001\001\000\050\005\173\013\222\015\175\016\177\017" +
    "\020\021\042\022\036\030\201\031\207\033\206\034\171" +
    "\035\205\037\204\041\200\042\240\043\165\050\166\051" +
    "\164\052\167\001\001\000\050\005\173\013\222\015\175" +
    "\016\177\017\020\021\042\022\036\030\201\031\207\033" +
    "\206\034\171\035\205\037\204\041\200\042\237\043\165" +
    "\050\166\051\164\052\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\046\005\173\013\243" +
    "\015\175\016\177\017\020\021\042\022\036\030\201\031" +
    "\207\033\206\034\171\035\205\037\204\041\200\043\165" +
    "\050\166\051\164\052\167\001\001\000\002\001\001\000" +
    "\046\005\173\013\245\015\175\016\177\017\020\021\042" +
    "\022\036\030\201\031\207\033\206\034\171\035\205\037" +
    "\204\041\200\043\165\050\166\051\164\052\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\266\017" +
    "\020\021\042\022\036\001\001\000\046\005\173\013\252" +
    "\015\175\016\251\017\020\021\042\022\036\030\201\031" +
    "\207\033\206\034\171\035\205\037\204\041\200\043\165" +
    "\050\166\051\164\052\167\001\001\000\004\023\104\001" +
    "\001\000\050\005\173\013\256\015\254\016\177\017\020" +
    "\021\042\022\036\030\201\031\207\033\206\034\171\035" +
    "\205\036\253\037\204\041\200\043\165\050\166\051\164" +
    "\052\167\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\005\173\013\260\015\257\016\177\017\020\021\042" +
    "\022\036\030\201\031\207\033\206\034\171\035\205\037" +
    "\204\041\200\043\165\050\166\051\164\052\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\005\173\013\262\015\175\016\177\017\020\021\042" +
    "\022\036\030\201\031\207\033\206\034\171\035\205\037" +
    "\204\041\200\043\165\050\166\051\164\052\167\001\001" +
    "\000\002\001\001\000\046\005\173\013\264\015\175\016" +
    "\177\017\020\021\042\022\036\030\201\031\207\033\206" +
    "\034\171\035\205\037\204\041\200\043\165\050\166\051" +
    "\164\052\167\001\001\000\050\005\173\013\256\015\254" +
    "\016\177\017\020\021\042\022\036\030\201\031\207\033" +
    "\206\034\171\035\205\036\265\037\204\041\200\043\165" +
    "\050\166\051\164\052\167\001\001\000\002\001\001\000" +
    "\004\023\104\001\001\000\002\001\001\000\046\005\173" +
    "\013\271\015\175\016\177\017\020\021\042\022\036\030" +
    "\201\031\207\033\206\034\171\035\205\037\204\041\200" +
    "\043\165\050\166\051\164\052\167\001\001\000\050\005" +
    "\173\013\256\015\254\016\177\017\020\021\042\022\036" +
    "\030\201\031\207\033\206\034\171\035\205\036\272\037" +
    "\204\041\200\043\165\050\166\051\164\052\167\001\001" +
    "\000\002\001\001\000\046\005\173\013\302\015\175\016" +
    "\177\017\020\021\042\022\036\030\201\031\207\033\206" +
    "\034\171\035\205\037\204\041\200\043\165\050\166\051" +
    "\164\052\167\001\001\000\046\005\173\013\276\015\175" +
    "\016\177\017\020\021\042\022\036\030\201\031\207\033" +
    "\206\034\171\035\205\037\204\041\200\043\165\050\166" +
    "\051\164\052\167\001\001\000\046\005\173\013\300\015" +
    "\175\016\177\017\020\021\042\022\036\030\201\031\207" +
    "\033\206\034\171\035\205\037\204\041\200\043\165\050" +
    "\166\051\164\052\167\001\001\000\050\005\173\013\256" +
    "\015\254\016\177\017\020\021\042\022\036\030\201\031" +
    "\207\033\206\034\171\035\205\036\277\037\204\041\200" +
    "\043\165\050\166\051\164\052\167\001\001\000\002\001" +
    "\001\000\050\005\173\013\256\015\254\016\177\017\020" +
    "\021\042\022\036\030\201\031\207\033\206\034\171\035" +
    "\205\036\301\037\204\041\200\043\165\050\166\051\164" +
    "\052\167\001\001\000\002\001\001\000\050\005\173\013" +
    "\256\015\254\016\177\017\020\021\042\022\036\030\201" +
    "\031\207\033\206\034\171\035\205\036\303\037\204\041" +
    "\200\043\165\050\166\051\164\052\167\001\001\000\002" +
    "\001\001\000\012\020\314\022\316\024\313\026\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\320\001\001\000\002\001\001" +
    "\000\012\020\317\022\316\024\313\026\307\001\001\000" +
    "\004\023\320\001\001\000\012\020\325\022\316\024\313" +
    "\026\307\001\001\000\012\020\322\022\316\024\313\026" +
    "\307\001\001\000\004\023\320\001\001\000\012\020\324" +
    "\022\316\024\313\026\307\001\001\000\004\023\320\001" +
    "\001\000\004\023\320\001\001\000\050\005\173\013\332" +
    "\015\175\016\177\017\020\021\042\022\036\030\201\031" +
    "\207\033\206\034\171\035\205\037\204\040\334\041\200" +
    "\043\165\050\166\051\164\052\167\001\001\000\012\020" +
    "\347\022\316\024\313\026\307\001\001\000\050\005\173" +
    "\013\342\015\175\016\177\017\020\021\042\022\036\030" +
    "\201\031\207\033\206\034\171\035\205\037\204\040\343" +
    "\041\200\043\165\050\166\051\164\052\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\335\022\316" +
    "\024\313\026\307\001\001\000\002\001\001\000\004\023" +
    "\320\001\001\000\050\005\173\013\332\015\175\016\177" +
    "\017\020\021\042\022\036\030\201\031\207\033\206\034" +
    "\171\035\205\037\204\040\337\041\200\043\165\050\166" +
    "\051\164\052\167\001\001\000\002\001\001\000\050\005" +
    "\173\013\332\015\175\016\177\017\020\021\042\022\036" +
    "\030\201\031\207\033\206\034\171\035\205\037\204\040" +
    "\341\041\200\043\165\050\166\051\164\052\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\005\173\013\332\015\175\016\177\017\020\021\042" +
    "\022\036\030\201\031\207\033\206\034\171\035\205\037" +
    "\204\040\345\041\200\043\165\050\166\051\164\052\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\320\001\001\000\050\005\173\013\332\015\175\016\177" +
    "\017\020\021\042\022\036\030\201\031\207\033\206\034" +
    "\171\035\205\037\204\040\351\041\200\043\165\050\166" +
    "\051\164\052\167\001\001\000\002\001\001\000\016\006" +
    "\353\007\137\016\141\017\020\021\042\022\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\104\001\001\000\046\005\173" +
    "\013\361\015\175\016\177\017\020\021\042\022\036\030" +
    "\201\031\207\033\206\034\171\035\205\037\204\041\200" +
    "\043\165\050\166\051\164\052\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\366\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\005\173\016\373\017\020\021\042\022\036" +
    "\031\374\044\u010a\001\001\000\020\005\173\016\373\017" +
    "\020\021\042\022\036\031\374\044\375\001\001\000\004" +
    "\022\136\001\001\000\004\023\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\377\017\020\021\042" +
    "\022\036\001\001\000\004\023\104\001\001\000\014\016" +
    "\u0103\017\020\021\042\022\036\045\u0102\001\001\000\004" +
    "\022\136\001\001\000\002\001\001\000\004\023\104\001" +
    "\001\000\046\005\173\013\u0105\015\175\016\177\017\020" +
    "\021\042\022\036\030\201\031\207\033\206\034\171\035" +
    "\205\037\204\041\200\043\165\050\166\051\164\052\167" +
    "\001\001\000\002\001\001\000\012\016\u0107\017\020\021" +
    "\042\022\036\001\001\000\004\023\104\001\001\000\012" +
    "\016\u0109\017\020\021\042\022\036\001\001\000\004\023" +
    "\104\001\001\000\002\001\001\000\012\016\u0112\017\020" +
    "\021\042\022\036\001\001\000\012\016\u010d\017\020\021" +
    "\042\022\036\001\001\000\004\023\104\001\001\000\014" +
    "\016\u0103\017\020\021\042\022\036\045\u010f\001\001\000" +
    "\002\001\001\000\046\005\173\013\u0111\015\175\016\177" +
    "\017\020\021\042\022\036\030\201\031\207\033\206\034" +
    "\171\035\205\037\204\041\200\043\165\050\166\051\164" +
    "\052\167\001\001\000\002\001\001\000\004\023\104\001" +
    "\001\000\002\001\001\000\014\016\u0103\017\020\021\042" +
    "\022\036\045\u0115\001\001\000\002\001\001\000\046\005" +
    "\173\013\u0117\015\175\016\177\017\020\021\042\022\036" +
    "\030\201\031\207\033\206\034\171\035\205\037\204\041" +
    "\200\043\165\050\166\051\164\052\167\001\001\000\002" +
    "\001\001\000\014\016\u011e\017\020\021\042\022\036\045" +
    "\u011d\001\001\000\014\016\u0103\017\020\021\042\022\036" +
    "\045\u011a\001\001\000\002\001\001\000\046\005\173\013" +
    "\u011c\015\175\016\177\017\020\021\042\022\036\030\201" +
    "\031\207\033\206\034\171\035\205\037\204\041\200\043" +
    "\165\050\166\051\164\052\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\104\001\001\000\002\001" +
    "\001\000\046\005\173\013\u0121\015\175\016\177\017\020" +
    "\021\042\022\036\030\201\031\207\033\206\034\171\035" +
    "\205\037\204\041\200\043\165\050\166\051\164\052\167" +
    "\001\001\000\002\001\001\000\046\005\173\013\u0123\015" +
    "\175\016\177\017\020\021\042\022\036\030\201\031\207" +
    "\033\206\034\171\035\205\037\204\041\200\043\165\050" +
    "\166\051\164\052\167\001\001\000\002\001\001\000\046" +
    "\005\173\013\u0125\015\175\016\177\017\020\021\042\022" +
    "\036\030\201\031\207\033\206\034\171\035\205\037\204" +
    "\041\200\043\165\050\166\051\164\052\167\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\152\010\u0129\011\147\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\u0146\017\020\021\042" +
    "\022\036\001\001\000\004\023\104\001\001\000\002\001" +
    "\001\000\004\023\104\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }



    CLexer s;
    Analyzer a;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message + " at line:" + s.getCurrentLine(), null));
        }
    }

    public void syntax_error(Symbol cur_token) 
    {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token) 
    {
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= constant program_definition 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_definition ::= error_program_definition program_definition 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // program_definition ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // error_program_definition ::= keyword_types OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int kw_typeleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int kw_typeright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object kw_type = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Must give a name for a global variable", "Global variable", kw_type);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // error_program_definition ::= instruction OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int instrleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int instrright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object instr = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Instruction out of place", "Global variable", instr);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // error_program_definition ::= keyword_types error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // error_program_definition ::= error_constant 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // error_program_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // error_program_definition ::= error OP_WRAPPERKEYPARENTHESISLEFT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_program_definition",48, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_declaration_1 ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // error_function_declaration ::= error IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object fn = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Type function missing", "int, float,...", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // error_function_declaration ::= keyword_types error OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Function identifier missing", "getSalary", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // error_function_declaration ::= keyword_types IDENT error function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // error_function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Error parameters declaration", "int a, float b", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_function_declaration",41, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // control_structure ::= control_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // control_structure ::= control_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // control_structure ::= control_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // control_structure ::= control_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // control_if ::= control_if_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // control_if ::= error_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // control_else ::= KW_ELSE gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // control_else ::= KW_ELSE instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // control_else ::= instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // control_else ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // error_if ::= KW_IF error expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("IF: Left parenthesis missing", "(", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("IF: Expression missing in conditional structure", "expression", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Right parenthesis missing", ")", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // error_if ::= KW_IF error gramatic_body control_else 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Some code between if and conditional expression", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT error gramatic_body control_else 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		    
        parser.generateSyntaxError("IF: Syntax error, illegal code inside of the if", "If", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // control_switch_case ::= OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // control_switch_case ::= KW_CASE expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // control_switch_case ::= KW_DEFAULT expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // control_switch_case ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // control_switch_case ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // error_switch ::= KW_SWITCH error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Numeric expresion expected", "expression", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", s);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // control_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // control_while ::= error_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control_while_body ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // control_while_body ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // error_while ::= KW_WHILE error expression OP_WRAPPERPARENTHESISRIGHT control_while_body 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		
        parser.generateSyntaxError("Left parenthesis missing", "(", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERPARENTHESISRIGHT control_while_body 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		
        parser.generateSyntaxError("Expression missing in conditional structure", "expression", null);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression error control_while_body 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Right parenthesis missing", ")", w);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // error_while ::= KW_WHILE error control_while_body 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Some code between while and conditional expression", "While", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // control_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // control_for ::= error_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // error_for ::= KW_FOR error control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-7)).value;
		 
        parser.generateSyntaxError("FOR: Left parenthesis missing", "(", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction error expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR error OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		 
        parser.generateSyntaxError("FOR: Conditional expression missing", "a<b", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression error control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR error OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		 
        parser.generateSyntaxError("FOR: Incremental o decremental instruction expected", "a++", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR expression error gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
        parser.generateSyntaxError("FOR: Right parenthesis missing", ")", e); 
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",40, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // control_for_instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // control_for_instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // control_for_instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // control_for_instruction ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // control_for_instruction1 ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // control_for_instruction1 ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // control_for_instruction1 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",35, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // gramatic_body ::= constant gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // gramatic_body ::= OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // gramatic_body ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // gramatic_body ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // gramatic_body ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // gramatic_body ::= control_structure gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // gramatic_body ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // gramatic_body ::= KW_ELSE error gramatic_body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // gramatic_body ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // error_gramatic ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_gramatic",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // error_gramatic ::= KW_ELSE error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		    
      parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_gramatic",47, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // error_constant ::= KW_CONST keyword_types IDENT error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be defined as literal", "=", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Constant must be asigned with literal", "literal", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_HEXVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_DECIMALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_CHARVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_OCTALVALUE error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG LIT_EXPONENTIALDEF error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // variable ::= keyword_types variable_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // variable_definition ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable_definition ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // error_variable_definition ::= error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_variable_definition",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // parameters_definition ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // parameter_definition ::= keyword_types IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // parameter_definition ::= KW_CONST keyword_types IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // error_parameter ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // error_parameter ::= KW_CONST error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Const params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // error_parameter ::= IDENT error OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Params must be typed", "type", e);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_parameter",46, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_any_type OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression ::= expression_any_type 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_any_type ::= expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression_any_type ::= expression_unary_operator IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression_any_type ::= IDENT expression_unary_operator 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression_any_type ::= expression expression_binary_operators expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_any_type ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression_numeric ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_numeric ::= expression_atomic_literal_int 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_numeric ::= expression_atomic_call_functions_anytype 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_numeric ::= expression_unary_operator expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_numeric ::= expression_numeric expression_binary_operators expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_numeric ::= expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_atomic ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression_atomic ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_atomic ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_atomic ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_atomic ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_atomic ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression_binary_operators ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // expression_binary_operators ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // expression_binary_operators ::= OP_ORASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // keyword_types ::= KW_INT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // keyword_types ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // keyword_types ::= KW_LONG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // keyword_types ::= KW_SHORT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // keyword_types ::= KW_VOID 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // keyword_types ::= KW_FLOAT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // keyword_types ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
