
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.CLexer;
import handler.Analyzer;
import model.Token;
import errors.SyntaxError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\236\000\002\002\004\000\002\046\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\004\000\002\012\002" +
    "\000\002\004\007\000\002\002\004\000\002\002\003\000" +
    "\002\003\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\010\000\002\035\004\000\002\035\004" +
    "\000\002\035\003\000\002\035\003\000\002\047\005\000" +
    "\002\047\006\000\002\047\007\000\002\036\007\000\002" +
    "\036\003\000\002\037\006\000\002\037\006\000\002\037" +
    "\006\000\002\037\005\000\002\037\003\000\002\056\005" +
    "\000\002\056\006\000\002\056\007\000\002\040\007\000" +
    "\002\040\003\000\002\041\005\000\002\041\003\000\002" +
    "\050\005\000\002\050\006\000\002\050\007\000\002\042" +
    "\013\000\002\042\003\000\002\051\005\000\002\051\013" +
    "\000\002\043\003\000\002\043\005\000\002\043\003\000" +
    "\002\043\002\000\002\044\005\000\002\044\003\000\002" +
    "\044\002\000\002\013\005\000\002\013\004\000\002\013" +
    "\004\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\006\000\002\013\002\000" +
    "\002\026\004\000\002\026\004\000\002\027\010\000\002" +
    "\027\003\000\002\057\007\000\002\057\010\000\002\057" +
    "\011\000\002\030\004\000\002\031\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\007\000\002\031\003\000" +
    "\002\055\006\000\002\006\005\000\002\006\003\000\002" +
    "\007\003\000\002\010\005\000\002\010\003\000\002\011" +
    "\004\000\002\011\005\000\002\011\007\000\002\014\005" +
    "\000\002\014\003\000\002\014\003\000\002\015\005\000" +
    "\002\015\003\000\002\016\003\000\002\016\004\000\002" +
    "\016\004\000\002\016\005\000\002\016\007\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\004" +
    "\000\002\017\005\000\002\017\007\000\002\020\003\000" +
    "\002\020\006\000\002\020\005\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\024\003" +
    "\000\002\024\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\025\005\000\002\025\006\000\002\021\003\000\002\021" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\024\002\ufffc\010\006\011\021\015\023\021" +
    "\022\025\017\026\010\031\020\042\013\001\002\000\004" +
    "\002\000\001\002\000\024\002\ufffc\010\006\011\021\015" +
    "\023\021\022\025\017\026\010\031\020\042\013\001\002" +
    "\000\004\004\uff69\001\002\000\024\002\ufffc\010\006\011" +
    "\021\015\023\021\022\025\017\026\010\031\020\042\013" +
    "\001\002\000\004\004\uff68\001\002\000\006\003\u010a\120" +
    "\u0109\001\002\000\004\002\u0108\001\002\000\004\004\uff66" +
    "\001\002\000\004\004\046\001\002\000\024\002\ufffc\010" +
    "\006\011\021\015\023\021\022\025\017\026\010\031\020" +
    "\042\013\001\002\000\074\002\uffc1\004\uffc1\010\uffc1\011" +
    "\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\030\uffc1\031\uffc1\036\uffc1\042\uffc1\044\uffc1\074" +
    "\uffc1\075\uffc1\112\uffc1\116\uffc1\117\uffc1\120\uffc1\123\uffc1" +
    "\124\uffc1\125\uffc1\126\uffc1\127\uffc1\130\uffc1\131\uffc1\001" +
    "\002\000\004\004\uff6a\001\002\000\004\004\uff67\001\002" +
    "\000\020\010\006\015\023\021\022\025\017\026\010\031" +
    "\020\042\013\001\002\000\004\004\uff65\001\002\000\004" +
    "\004\uff64\001\002\000\004\004\025\001\002\000\006\003" +
    "\026\106\027\001\002\000\004\120\043\001\002\000\016" +
    "\003\033\123\036\124\031\126\035\127\030\131\032\001" +
    "\002\000\112\003\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\053\uff8f\054\uff8f\055\uff8f\056\uff8f\057\uff8f\060" +
    "\uff8f\061\uff8f\062\uff8f\063\uff8f\064\uff8f\065\uff8f\066\uff8f" +
    "\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f\076\uff8f\077" +
    "\uff8f\100\uff8f\101\uff8f\102\uff8f\103\uff8f\104\uff8f\105\uff8f" +
    "\106\uff8f\107\uff8f\110\uff8f\113\uff8f\120\uff8f\001\002\000" +
    "\112\003\uff91\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\053\uff91\054\uff91\055\uff91\056\uff91\057\uff91\060\uff91\061" +
    "\uff91\062\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91" +
    "\070\uff91\071\uff91\072\uff91\073\uff91\076\uff91\077\uff91\100" +
    "\uff91\101\uff91\102\uff91\103\uff91\104\uff91\105\uff91\106\uff91" +
    "\107\uff91\110\uff91\113\uff91\120\uff91\001\002\000\112\003" +
    "\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\053\uff8e" +
    "\054\uff8e\055\uff8e\056\uff8e\057\uff8e\060\uff8e\061\uff8e\062" +
    "\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e" +
    "\071\uff8e\072\uff8e\073\uff8e\076\uff8e\077\uff8e\100\uff8e\101" +
    "\uff8e\102\uff8e\103\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e" +
    "\110\uff8e\113\uff8e\120\uff8e\001\002\000\004\120\042\001" +
    "\002\000\006\003\040\120\037\001\002\000\112\003\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\053\uff90\054" +
    "\uff90\055\uff90\056\uff90\057\uff90\060\uff90\061\uff90\062\uff90" +
    "\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071" +
    "\uff90\072\uff90\073\uff90\076\uff90\077\uff90\100\uff90\101\uff90" +
    "\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107\uff90\110" +
    "\uff90\113\uff90\120\uff90\001\002\000\112\003\uff92\045\uff92" +
    "\046\uff92\047\uff92\050\uff92\051\uff92\053\uff92\054\uff92\055" +
    "\uff92\056\uff92\057\uff92\060\uff92\061\uff92\062\uff92\063\uff92" +
    "\064\uff92\065\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072" +
    "\uff92\073\uff92\076\uff92\077\uff92\100\uff92\101\uff92\102\uff92" +
    "\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\113" +
    "\uff92\120\uff92\001\002\000\074\002\uffc2\004\uffc2\010\uffc2" +
    "\011\uffc2\015\uffc2\016\uffc2\021\uffc2\022\uffc2\024\uffc2\025" +
    "\uffc2\026\uffc2\030\uffc2\031\uffc2\036\uffc2\042\uffc2\044\uffc2" +
    "\074\uffc2\075\uffc2\112\uffc2\116\uffc2\117\uffc2\120\uffc2\123" +
    "\uffc2\124\uffc2\125\uffc2\126\uffc2\127\uffc2\130\uffc2\131\uffc2" +
    "\001\002\000\004\120\041\001\002\000\074\002\uffbe\004" +
    "\uffbe\010\uffbe\011\uffbe\015\uffbe\016\uffbe\021\uffbe\022\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\030\uffbe\031\uffbe\036\uffbe\042" +
    "\uffbe\044\uffbe\074\uffbe\075\uffbe\112\uffbe\116\uffbe\117\uffbe" +
    "\120\uffbe\123\uffbe\124\uffbe\125\uffbe\126\uffbe\127\uffbe\130" +
    "\uffbe\131\uffbe\001\002\000\074\002\uffbf\004\uffbf\010\uffbf" +
    "\011\uffbf\015\uffbf\016\uffbf\021\uffbf\022\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\030\uffbf\031\uffbf\036\uffbf\042\uffbf\044\uffbf" +
    "\074\uffbf\075\uffbf\112\uffbf\116\uffbf\117\uffbf\120\uffbf\123" +
    "\uffbf\124\uffbf\125\uffbf\126\uffbf\127\uffbf\130\uffbf\131\uffbf" +
    "\001\002\000\074\002\uffc0\004\uffc0\010\uffc0\011\uffc0\015" +
    "\uffc0\016\uffc0\021\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\030\uffc0\031\uffc0\036\uffc0\042\uffc0\044\uffc0\074\uffc0\075" +
    "\uffc0\112\uffc0\116\uffc0\117\uffc0\120\uffc0\123\uffc0\124\uffc0" +
    "\125\uffc0\126\uffc0\127\uffc0\130\uffc0\131\uffc0\001\002\000" +
    "\004\002\ufffd\001\002\000\076\002\uffbd\003\uffbd\004\uffbd" +
    "\010\uffbd\011\uffbd\015\uffbd\016\uffbd\021\uffbd\022\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\030\uffbd\031\uffbd\036\uffbd\042\uffbd" +
    "\044\uffbd\074\uffbd\075\uffbd\112\uffbd\116\uffbd\117\uffbd\120" +
    "\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\127\uffbd\130\uffbd" +
    "\131\uffbd\001\002\000\016\003\uffbc\004\052\052\051\106" +
    "\053\112\050\120\uffbc\001\002\000\076\002\uffb8\003\uffb8" +
    "\004\uffb8\010\uffb8\011\uffb8\015\uffb8\016\uffb8\021\uffb8\022" +
    "\uffb8\024\uffb8\025\uffb8\026\uffb8\030\uffb8\031\uffb8\036\uffb8" +
    "\042\uffb8\044\uffb8\074\uffb8\075\uffb8\112\uffb8\116\uffb8\117" +
    "\uffb8\120\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8\127\uffb8" +
    "\130\uffb8\131\uffb8\001\002\000\024\010\006\011\170\015" +
    "\023\021\022\025\017\026\010\031\020\042\013\113\165" +
    "\001\002\000\004\004\146\001\002\000\004\003\160\001" +
    "\002\000\030\004\056\074\057\075\054\112\071\123\070" +
    "\124\061\125\066\126\062\127\055\130\064\131\060\001" +
    "\002\000\204\002\uff8a\003\uff8a\004\uff8a\010\uff8a\011\uff8a" +
    "\015\uff8a\016\uff8a\021\uff8a\022\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\030\uff8a\031\uff8a\036\uff8a\042\uff8a\044\uff8a\045\uff8a" +
    "\046\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054" +
    "\uff8a\055\uff8a\056\uff8a\057\uff8a\060\uff8a\061\uff8a\062\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\075\uff8a\076\uff8a\077\uff8a" +
    "\100\uff8a\101\uff8a\102\uff8a\103\uff8a\104\uff8a\105\uff8a\106" +
    "\uff8a\107\uff8a\110\uff8a\112\uff8a\113\uff8a\116\uff8a\117\uff8a" +
    "\120\uff8a\123\uff8a\124\uff8a\125\uff8a\126\uff8a\127\uff8a\130" +
    "\uff8a\131\uff8a\001\002\000\204\002\uff97\003\uff97\004\uff97" +
    "\010\uff97\011\uff97\015\uff97\016\uff97\021\uff97\022\uff97\024" +
    "\uff97\025\uff97\026\uff97\030\uff97\031\uff97\036\uff97\042\uff97" +
    "\044\uff97\045\uff97\046\uff97\047\uff97\050\uff97\051\uff97\052" +
    "\uff97\053\uff97\054\uff97\055\uff97\056\uff97\057\uff97\060\uff97" +
    "\061\uff97\062\uff97\063\uff97\064\uff97\065\uff97\066\uff97\067" +
    "\uff97\070\uff97\071\uff97\072\uff97\073\uff97\074\uff97\075\uff97" +
    "\076\uff97\077\uff97\100\uff97\101\uff97\102\uff97\103\uff97\104" +
    "\uff97\105\uff97\106\uff97\107\uff97\110\uff97\112\uff97\113\uff97" +
    "\116\uff97\117\uff97\120\uff97\123\uff97\124\uff97\125\uff97\126" +
    "\uff97\127\uff97\130\uff97\131\uff97\001\002\000\204\002\uff9e" +
    "\003\uff9e\004\uff9e\010\uff9e\011\uff9e\015\uff9e\016\uff9e\021" +
    "\uff9e\022\uff9e\024\uff9e\025\uff9e\026\uff9e\030\uff9e\031\uff9e" +
    "\036\uff9e\042\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e\073\uff9e" +
    "\074\057\075\054\076\uff9e\077\uff9e\100\uff9e\101\uff9e\102" +
    "\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e" +
    "\112\147\113\uff9e\116\uff9e\117\uff9e\120\uff9e\123\uff9e\124" +
    "\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\001\002" +
    "\000\204\002\uff8b\003\uff8b\004\uff8b\010\uff8b\011\uff8b\015" +
    "\uff8b\016\uff8b\021\uff8b\022\uff8b\024\uff8b\025\uff8b\026\uff8b" +
    "\030\uff8b\031\uff8b\036\uff8b\042\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b" +
    "\055\uff8b\056\uff8b\057\uff8b\060\uff8b\061\uff8b\062\uff8b\063" +
    "\uff8b\064\uff8b\065\uff8b\066\uff8b\067\uff8b\070\uff8b\071\uff8b" +
    "\072\uff8b\073\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\100" +
    "\uff8b\101\uff8b\102\uff8b\103\uff8b\104\uff8b\105\uff8b\106\uff8b" +
    "\107\uff8b\110\uff8b\112\uff8b\113\uff8b\116\uff8b\117\uff8b\120" +
    "\uff8b\123\uff8b\124\uff8b\125\uff8b\126\uff8b\127\uff8b\130\uff8b" +
    "\131\uff8b\001\002\000\204\002\uff95\003\uff95\004\uff95\010" +
    "\uff95\011\uff95\015\uff95\016\uff95\021\uff95\022\uff95\024\uff95" +
    "\025\uff95\026\uff95\030\uff95\031\uff95\036\uff95\042\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\050\uff95\051\uff95\052\uff95" +
    "\053\uff95\054\uff95\055\uff95\056\uff95\057\uff95\060\uff95\061" +
    "\uff95\062\uff95\063\uff95\064\uff95\065\uff95\066\uff95\067\uff95" +
    "\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95\075\uff95\076" +
    "\uff95\077\uff95\100\uff95\101\uff95\102\uff95\103\uff95\104\uff95" +
    "\105\uff95\106\uff95\107\uff95\110\uff95\112\uff95\113\uff95\116" +
    "\uff95\117\uff95\120\uff95\123\uff95\124\uff95\125\uff95\126\uff95" +
    "\127\uff95\130\uff95\131\uff95\001\002\000\204\002\uff9a\003" +
    "\uff9a\004\uff9a\010\uff9a\011\uff9a\015\uff9a\016\uff9a\021\uff9a" +
    "\022\uff9a\024\uff9a\025\uff9a\026\uff9a\030\uff9a\031\uff9a\036" +
    "\uff9a\042\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\056\uff9a\057" +
    "\uff9a\060\uff9a\061\uff9a\062\uff9a\063\uff9a\064\uff9a\065\uff9a" +
    "\066\uff9a\067\uff9a\070\uff9a\071\uff9a\072\uff9a\073\uff9a\074" +
    "\uff9a\075\uff9a\076\uff9a\077\uff9a\100\uff9a\101\uff9a\102\uff9a" +
    "\103\uff9a\104\uff9a\105\uff9a\106\uff9a\107\uff9a\110\uff9a\112" +
    "\uff9a\113\uff9a\116\uff9a\117\uff9a\120\uff9a\123\uff9a\124\uff9a" +
    "\125\uff9a\126\uff9a\127\uff9a\130\uff9a\131\uff9a\001\002\000" +
    "\204\002\uff98\003\uff98\004\uff98\010\uff98\011\uff98\015\uff98" +
    "\016\uff98\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98\030" +
    "\uff98\031\uff98\036\uff98\042\uff98\044\uff98\045\uff98\046\uff98" +
    "\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\056\uff98\057\uff98\060\uff98\061\uff98\062\uff98\063\uff98" +
    "\064\uff98\065\uff98\066\uff98\067\uff98\070\uff98\071\uff98\072" +
    "\uff98\073\uff98\074\uff98\075\uff98\076\uff98\077\uff98\100\uff98" +
    "\101\uff98\102\uff98\103\uff98\104\uff98\105\uff98\106\uff98\107" +
    "\uff98\110\uff98\112\uff98\113\uff98\116\uff98\117\uff98\120\uff98" +
    "\123\uff98\124\uff98\125\uff98\126\uff98\127\uff98\130\uff98\131" +
    "\uff98\001\002\000\204\002\uffaa\003\uffaa\004\uffaa\010\uffaa" +
    "\011\uffaa\015\uffaa\016\uffaa\021\uffaa\022\uffaa\024\uffaa\025" +
    "\uffaa\026\uffaa\030\uffaa\031\uffaa\036\uffaa\042\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\064\uffaa\065\uffaa\066\uffaa\067\uffaa\070" +
    "\uffaa\071\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\076\uffaa" +
    "\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa\104\uffaa\105" +
    "\uffaa\106\uffaa\107\uffaa\110\uffaa\112\uffaa\113\uffaa\116\uffaa" +
    "\117\uffaa\120\uffaa\123\uffaa\124\uffaa\125\uffaa\126\uffaa\127" +
    "\uffaa\130\uffaa\131\uffaa\001\002\000\204\002\uff96\003\uff96" +
    "\004\uff96\010\uff96\011\uff96\015\uff96\016\uff96\021\uff96\022" +
    "\uff96\024\uff96\025\uff96\026\uff96\030\uff96\031\uff96\036\uff96" +
    "\042\uff96\044\uff96\045\uff96\046\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\057\uff96" +
    "\060\uff96\061\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066" +
    "\uff96\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\074\uff96" +
    "\075\uff96\076\uff96\077\uff96\100\uff96\101\uff96\102\uff96\103" +
    "\uff96\104\uff96\105\uff96\106\uff96\107\uff96\110\uff96\112\uff96" +
    "\113\uff96\116\uff96\117\uff96\120\uff96\123\uff96\124\uff96\125" +
    "\uff96\126\uff96\127\uff96\130\uff96\131\uff96\001\002\000\204" +
    "\002\uffa9\003\uffa9\004\uffa9\010\uffa9\011\uffa9\015\uffa9\016" +
    "\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\030\uffa9" +
    "\031\uffa9\036\uffa9\042\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\064" +
    "\uffa9\065\uffa9\066\uffa9\067\uffa9\070\uffa9\071\uffa9\072\uffa9" +
    "\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9\101" +
    "\uffa9\102\uffa9\103\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9" +
    "\110\uffa9\112\uffa9\113\uffa9\116\uffa9\117\uffa9\120\uffa9\123" +
    "\uffa9\124\uffa9\125\uffa9\126\uffa9\127\uffa9\130\uffa9\131\uffa9" +
    "\001\002\000\204\002\uff99\003\uff99\004\uff99\010\uff99\011" +
    "\uff99\015\uff99\016\uff99\021\uff99\022\uff99\024\uff99\025\uff99" +
    "\026\uff99\030\uff99\031\uff99\036\uff99\042\uff99\044\uff99\045" +
    "\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\064\uff99\065\uff99\066\uff99\067\uff99\070\uff99" +
    "\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99\076\uff99\077" +
    "\uff99\100\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105\uff99" +
    "\106\uff99\107\uff99\110\uff99\112\uff99\113\uff99\116\uff99\117" +
    "\uff99\120\uff99\123\uff99\124\uff99\125\uff99\126\uff99\127\uff99" +
    "\130\uff99\131\uff99\001\002\000\200\002\uffbb\003\uffbb\004" +
    "\uffbb\010\uffbb\011\uffbb\015\uffbb\016\uffbb\021\uffbb\022\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\030\uffbb\031\uffbb\036\uffbb\042" +
    "\uffbb\044\uffbb\045\125\046\112\047\122\050\130\051\100" +
    "\052\144\053\117\054\106\055\111\056\123\057\136\060" +
    "\104\061\124\062\107\063\101\064\133\065\114\066\110" +
    "\067\102\070\113\071\121\072\134\073\077\074\uffbb\075" +
    "\uffbb\076\076\077\126\100\135\101\127\102\131\103\132" +
    "\104\120\106\103\107\105\110\116\112\uffbb\116\uffbb\117" +
    "\uffbb\120\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb" +
    "\130\uffbb\131\uffbb\001\002\000\204\002\uff9b\003\uff9b\004" +
    "\uff9b\010\uff9b\011\uff9b\015\uff9b\016\uff9b\021\uff9b\022\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\030\uff9b\031\uff9b\036\uff9b\042" +
    "\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b" +
    "\052\uff9b\053\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\061\uff9b\062\uff9b\063\uff9b\064\uff9b\065\uff9b\066\uff9b" +
    "\067\uff9b\070\uff9b\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075" +
    "\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b\103\uff9b" +
    "\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\112\uff9b\113" +
    "\uff9b\116\uff9b\117\uff9b\120\uff9b\123\uff9b\124\uff9b\125\uff9b" +
    "\126\uff9b\127\uff9b\130\uff9b\131\uff9b\001\002\000\030\004" +
    "\056\074\057\075\054\112\071\123\070\124\061\125\066" +
    "\126\062\127\055\130\064\131\060\001\002\000\004\004" +
    "\073\001\002\000\204\002\uffa8\003\uffa8\004\uffa8\010\uffa8" +
    "\011\uffa8\015\uffa8\016\uffa8\021\uffa8\022\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\030\uffa8\031\uffa8\036\uffa8\042\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053" +
    "\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070" +
    "\uffa8\071\uffa8\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8" +
    "\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8\104\uffa8\105" +
    "\uffa8\106\uffa8\107\uffa8\110\uffa8\112\uffa8\113\uffa8\116\uffa8" +
    "\117\uffa8\120\uffa8\123\uffa8\124\uffa8\125\uffa8\126\uffa8\127" +
    "\uffa8\130\uffa8\131\uffa8\001\002\000\104\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\064\uffaa" +
    "\065\uffaa\066\uffaa\067\uffaa\070\uffaa\071\uffaa\072\uffaa\073" +
    "\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103\uffaa" +
    "\104\uffaa\106\uffaa\107\uffaa\110\uffaa\113\143\001\002\000" +
    "\102\045\125\046\112\047\122\050\130\051\100\053\117" +
    "\054\106\055\111\056\123\057\136\060\104\061\124\062" +
    "\107\063\101\064\133\065\114\066\110\067\102\070\113" +
    "\071\121\072\134\073\077\076\076\077\126\100\135\101" +
    "\127\102\131\103\132\104\120\106\103\107\105\110\116" +
    "\001\002\000\030\004\uff70\074\uff70\075\uff70\112\uff70\123" +
    "\uff70\124\uff70\125\uff70\126\uff70\127\uff70\130\uff70\131\uff70" +
    "\001\002\000\030\004\uff71\074\uff71\075\uff71\112\uff71\123" +
    "\uff71\124\uff71\125\uff71\126\uff71\127\uff71\130\uff71\131\uff71" +
    "\001\002\000\030\004\uff85\074\uff85\075\uff85\112\uff85\123" +
    "\uff85\124\uff85\125\uff85\126\uff85\127\uff85\130\uff85\131\uff85" +
    "\001\002\000\030\004\uff7b\074\uff7b\075\uff7b\112\uff7b\123" +
    "\uff7b\124\uff7b\125\uff7b\126\uff7b\127\uff7b\130\uff7b\131\uff7b" +
    "\001\002\000\030\004\uff7c\074\uff7c\075\uff7c\112\uff7c\123" +
    "\uff7c\124\uff7c\125\uff7c\126\uff7c\127\uff7c\130\uff7c\131\uff7c" +
    "\001\002\000\030\004\uff75\074\uff75\075\uff75\112\uff75\123" +
    "\uff75\124\uff75\125\uff75\126\uff75\127\uff75\130\uff75\131\uff75" +
    "\001\002\000\030\004\uff7d\074\uff7d\075\uff7d\112\uff7d\123" +
    "\uff7d\124\uff7d\125\uff7d\126\uff7d\127\uff7d\130\uff7d\131\uff7d" +
    "\001\002\000\030\004\uff78\074\uff78\075\uff78\112\uff78\123" +
    "\uff78\124\uff78\125\uff78\126\uff78\127\uff78\130\uff78\131\uff78" +
    "\001\002\000\030\004\uff83\074\uff83\075\uff83\112\uff83\123" +
    "\uff83\124\uff83\125\uff83\126\uff83\127\uff83\130\uff83\131\uff83" +
    "\001\002\000\030\004\uff80\074\uff80\075\uff80\112\uff80\123" +
    "\uff80\124\uff80\125\uff80\126\uff80\127\uff80\130\uff80\131\uff80" +
    "\001\002\000\030\004\uff77\074\uff77\075\uff77\112\uff77\123" +
    "\uff77\124\uff77\125\uff77\126\uff77\127\uff77\130\uff77\131\uff77" +
    "\001\002\000\030\004\uff84\074\uff84\075\uff84\112\uff84\123" +
    "\uff84\124\uff84\125\uff84\126\uff84\127\uff84\130\uff84\131\uff84" +
    "\001\002\000\030\004\uff87\074\uff87\075\uff87\112\uff87\123" +
    "\uff87\124\uff87\125\uff87\126\uff87\127\uff87\130\uff87\131\uff87" +
    "\001\002\000\030\004\uff74\074\uff74\075\uff74\112\uff74\123" +
    "\uff74\124\uff74\125\uff74\126\uff74\127\uff74\130\uff74\131\uff74" +
    "\001\002\000\030\004\uff7a\074\uff7a\075\uff7a\112\uff7a\123" +
    "\uff7a\124\uff7a\125\uff7a\126\uff7a\127\uff7a\130\uff7a\131\uff7a" +
    "\001\002\000\030\004\056\074\057\075\054\112\071\123" +
    "\070\124\061\125\066\126\062\127\055\130\064\131\060" +
    "\001\002\000\030\004\uff79\074\uff79\075\uff79\112\uff79\123" +
    "\uff79\124\uff79\125\uff79\126\uff79\127\uff79\130\uff79\131\uff79" +
    "\001\002\000\030\004\uff81\074\uff81\075\uff81\112\uff81\123" +
    "\uff81\124\uff81\125\uff81\126\uff81\127\uff81\130\uff81\131\uff81" +
    "\001\002\000\030\004\056\074\057\075\054\112\071\123" +
    "\070\124\061\125\066\126\062\127\055\130\064\131\060" +
    "\001\002\000\030\004\uff73\074\uff73\075\uff73\112\uff73\123" +
    "\uff73\124\uff73\125\uff73\126\uff73\127\uff73\130\uff73\131\uff73" +
    "\001\002\000\030\004\uff89\074\uff89\075\uff89\112\uff89\123" +
    "\uff89\124\uff89\125\uff89\126\uff89\127\uff89\130\uff89\131\uff89" +
    "\001\002\000\030\004\uff82\074\uff82\075\uff82\112\uff82\123" +
    "\uff82\124\uff82\125\uff82\126\uff82\127\uff82\130\uff82\131\uff82" +
    "\001\002\000\030\004\uff7e\074\uff7e\075\uff7e\112\uff7e\123" +
    "\uff7e\124\uff7e\125\uff7e\126\uff7e\127\uff7e\130\uff7e\131\uff7e" +
    "\001\002\000\030\004\uff88\074\uff88\075\uff88\112\uff88\123" +
    "\uff88\124\uff88\125\uff88\126\uff88\127\uff88\130\uff88\131\uff88" +
    "\001\002\000\030\004\uff6b\074\uff6b\075\uff6b\112\uff6b\123" +
    "\uff6b\124\uff6b\125\uff6b\126\uff6b\127\uff6b\130\uff6b\131\uff6b" +
    "\001\002\000\030\004\uff6c\074\uff6c\075\uff6c\112\uff6c\123" +
    "\uff6c\124\uff6c\125\uff6c\126\uff6c\127\uff6c\130\uff6c\131\uff6c" +
    "\001\002\000\030\004\uff86\074\uff86\075\uff86\112\uff86\123" +
    "\uff86\124\uff86\125\uff86\126\uff86\127\uff86\130\uff86\131\uff86" +
    "\001\002\000\030\004\uff6f\074\uff6f\075\uff6f\112\uff6f\123" +
    "\uff6f\124\uff6f\125\uff6f\126\uff6f\127\uff6f\130\uff6f\131\uff6f" +
    "\001\002\000\030\004\uff6e\074\uff6e\075\uff6e\112\uff6e\123" +
    "\uff6e\124\uff6e\125\uff6e\126\uff6e\127\uff6e\130\uff6e\131\uff6e" +
    "\001\002\000\030\004\uff76\074\uff76\075\uff76\112\uff76\123" +
    "\uff76\124\uff76\125\uff76\126\uff76\127\uff76\130\uff76\131\uff76" +
    "\001\002\000\030\004\uff72\074\uff72\075\uff72\112\uff72\123" +
    "\uff72\124\uff72\125\uff72\126\uff72\127\uff72\130\uff72\131\uff72" +
    "\001\002\000\030\004\uff6d\074\uff6d\075\uff6d\112\uff6d\123" +
    "\uff6d\124\uff6d\125\uff6d\126\uff6d\127\uff6d\130\uff6d\131\uff6d" +
    "\001\002\000\030\004\uff7f\074\uff7f\075\uff7f\112\uff7f\123" +
    "\uff7f\124\uff7f\125\uff7f\126\uff7f\127\uff7f\130\uff7f\131\uff7f" +
    "\001\002\000\104\045\125\046\112\047\122\050\130\051" +
    "\100\053\117\054\106\055\111\056\123\057\136\060\104" +
    "\061\124\062\107\063\101\064\133\065\114\066\110\067" +
    "\102\070\113\071\121\072\134\073\077\076\076\077\126" +
    "\100\135\101\127\102\131\103\132\104\120\105\140\106" +
    "\103\107\105\110\116\001\002\000\030\004\056\074\057" +
    "\075\054\112\071\123\070\124\061\125\066\126\062\127" +
    "\055\130\064\131\060\001\002\000\204\002\uffa5\003\uffa5" +
    "\004\uffa5\010\uffa5\011\uffa5\015\uffa5\016\uffa5\021\uffa5\022" +
    "\uffa5\024\uffa5\025\uffa5\026\uffa5\030\uffa5\031\uffa5\036\uffa5" +
    "\042\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\117\054\106\055\111\056\123\057\136" +
    "\060\104\061\124\062\107\063\101\064\133\065\114\066" +
    "\110\067\102\070\113\071\121\072\134\073\077\074\uffa5" +
    "\075\uffa5\076\076\077\126\100\135\101\127\102\131\103" +
    "\132\104\uffa5\105\uffa5\106\103\107\105\110\116\112\uffa5" +
    "\113\uffa5\116\uffa5\117\uffa5\120\uffa5\123\uffa5\124\uffa5\125" +
    "\uffa5\126\uffa5\127\uffa5\130\uffa5\131\uffa5\001\002\000\204" +
    "\002\uffa6\003\uffa6\004\uffa6\010\uffa6\011\uffa6\015\uffa6\016" +
    "\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6\026\uffa6\030\uffa6" +
    "\031\uffa6\036\uffa6\042\uffa6\044\uffa6\045\125\046\112\047" +
    "\122\050\130\051\100\052\uffa6\053\117\054\106\055\111" +
    "\056\123\057\136\060\104\061\124\062\107\063\101\064" +
    "\133\065\114\066\110\067\102\070\113\071\121\072\134" +
    "\073\077\074\uffa6\075\uffa6\076\076\077\126\100\135\101" +
    "\127\102\131\103\132\104\120\105\uffa6\106\103\107\105" +
    "\110\116\112\uffa6\113\uffa6\116\uffa6\117\uffa6\120\uffa6\123" +
    "\uffa6\124\uffa6\125\uffa6\126\uffa6\127\uffa6\130\uffa6\131\uffa6" +
    "\001\002\000\204\002\uffab\003\uffab\004\uffab\010\uffab\011" +
    "\uffab\015\uffab\016\uffab\021\uffab\022\uffab\024\uffab\025\uffab" +
    "\026\uffab\030\uffab\031\uffab\036\uffab\042\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\052\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\057\uffab\060\uffab\061\uffab\062" +
    "\uffab\063\uffab\064\uffab\065\uffab\066\uffab\067\uffab\070\uffab" +
    "\071\uffab\072\uffab\073\uffab\074\uffab\075\uffab\076\uffab\077" +
    "\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104\uffab\105\uffab" +
    "\106\uffab\107\uffab\110\uffab\112\uffab\113\uffab\116\uffab\117" +
    "\uffab\120\uffab\123\uffab\124\uffab\125\uffab\126\uffab\127\uffab" +
    "\130\uffab\131\uffab\001\002\000\004\004\146\001\002\000" +
    "\076\002\uffb9\003\uffb9\004\uffb9\010\uffb9\011\uffb9\015\uffb9" +
    "\016\uffb9\021\uffb9\022\uffb9\024\uffb9\025\uffb9\026\uffb9\030" +
    "\uffb9\031\uffb9\036\uffb9\042\uffb9\044\uffb9\074\uffb9\075\uffb9" +
    "\112\uffb9\116\uffb9\117\uffb9\120\uffb9\123\uffb9\124\uffb9\125" +
    "\uffb9\126\uffb9\127\uffb9\130\uffb9\131\uffb9\001\002\000\102" +
    "\002\uffbc\003\uffbc\004\uffbc\010\uffbc\011\uffbc\015\uffbc\016" +
    "\uffbc\021\uffbc\022\uffbc\024\uffbc\025\uffbc\026\uffbc\030\uffbc" +
    "\031\uffbc\036\uffbc\042\uffbc\044\uffbc\052\051\074\uffbc\075" +
    "\uffbc\106\053\112\uffbc\116\uffbc\117\uffbc\120\uffbc\123\uffbc" +
    "\124\uffbc\125\uffbc\126\uffbc\127\uffbc\130\uffbc\131\uffbc\001" +
    "\002\000\032\004\056\074\057\075\054\112\071\113\154" +
    "\123\070\124\061\125\066\126\062\127\055\130\064\131" +
    "\060\001\002\000\204\002\uffa7\003\uffa7\004\uffa7\010\uffa7" +
    "\011\uffa7\015\uffa7\016\uffa7\021\uffa7\022\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\030\uffa7\031\uffa7\036\uffa7\042\uffa7\044\uffa7" +
    "\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\052\uffa7\053" +
    "\uffa7\054\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7" +
    "\062\uffa7\063\uffa7\064\uffa7\065\uffa7\066\uffa7\067\uffa7\070" +
    "\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\076\uffa7" +
    "\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105" +
    "\uffa7\106\uffa7\107\uffa7\110\uffa7\112\uffa7\113\uffa7\116\uffa7" +
    "\117\uffa7\120\uffa7\123\uffa7\124\uffa7\125\uffa7\126\uffa7\127" +
    "\uffa7\130\uffa7\131\uffa7\001\002\000\006\052\156\113\uffb5" +
    "\001\002\000\004\113\155\001\002\000\106\045\125\046" +
    "\112\047\122\050\130\051\100\052\uffb4\053\117\054\106" +
    "\055\111\056\123\057\136\060\104\061\124\062\107\063" +
    "\101\064\133\065\114\066\110\067\102\070\113\071\121" +
    "\072\134\073\077\076\076\077\126\100\135\101\127\102" +
    "\131\103\132\104\120\106\103\107\105\110\116\113\uffb4" +
    "\001\002\000\204\002\uff9c\003\uff9c\004\uff9c\010\uff9c\011" +
    "\uff9c\015\uff9c\016\uff9c\021\uff9c\022\uff9c\024\uff9c\025\uff9c" +
    "\026\uff9c\030\uff9c\031\uff9c\036\uff9c\042\uff9c\044\uff9c\045" +
    "\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\065\uff9c\066\uff9c\067\uff9c\070\uff9c" +
    "\071\uff9c\072\uff9c\073\uff9c\074\uff9c\075\uff9c\076\uff9c\077" +
    "\uff9c\100\uff9c\101\uff9c\102\uff9c\103\uff9c\104\uff9c\105\uff9c" +
    "\106\uff9c\107\uff9c\110\uff9c\112\uff9c\113\uff9c\116\uff9c\117" +
    "\uff9c\120\uff9c\123\uff9c\124\uff9c\125\uff9c\126\uff9c\127\uff9c" +
    "\130\uff9c\131\uff9c\001\002\000\204\002\uff9d\003\uff9d\004" +
    "\uff9d\010\uff9d\011\uff9d\015\uff9d\016\uff9d\021\uff9d\022\uff9d" +
    "\024\uff9d\025\uff9d\026\uff9d\030\uff9d\031\uff9d\036\uff9d\042" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057\uff9d\060" +
    "\uff9d\061\uff9d\062\uff9d\063\uff9d\064\uff9d\065\uff9d\066\uff9d" +
    "\067\uff9d\070\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d\075" +
    "\uff9d\076\uff9d\077\uff9d\100\uff9d\101\uff9d\102\uff9d\103\uff9d" +
    "\104\uff9d\105\uff9d\106\uff9d\107\uff9d\110\uff9d\112\uff9d\113" +
    "\uff9d\116\uff9d\117\uff9d\120\uff9d\123\uff9d\124\uff9d\125\uff9d" +
    "\126\uff9d\127\uff9d\130\uff9d\131\uff9d\001\002\000\030\004" +
    "\056\074\057\075\054\112\071\123\070\124\061\125\066" +
    "\126\062\127\055\130\064\131\060\001\002\000\004\113" +
    "\uffb6\001\002\000\004\120\161\001\002\000\076\002\uffb7" +
    "\003\uffb7\004\uffb7\010\uffb7\011\uffb7\015\uffb7\016\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\030\uffb7\031\uffb7" +
    "\036\uffb7\042\uffb7\044\uffb7\074\uffb7\075\uffb7\112\uffb7\116" +
    "\uffb7\117\uffb7\120\uffb7\123\uffb7\124\uffb7\125\uffb7\126\uffb7" +
    "\127\uffb7\130\uffb7\131\uffb7\001\002\000\076\002\uffba\003" +
    "\uffba\004\uffba\010\uffba\011\uffba\015\uffba\016\uffba\021\uffba" +
    "\022\uffba\024\uffba\025\uffba\026\uffba\030\uffba\031\uffba\036" +
    "\uffba\042\uffba\044\uffba\074\uffba\075\uffba\112\uffba\116\uffba" +
    "\117\uffba\120\uffba\123\uffba\124\uffba\125\uffba\126\uffba\127" +
    "\uffba\130\uffba\131\uffba\001\002\000\006\052\u0106\113\uffb2" +
    "\001\002\000\004\113\u0105\001\002\000\070\002\ufff9\004" +
    "\ufff9\010\ufff9\011\ufff9\015\ufff9\021\ufff9\022\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\030\ufff9\031\ufff9\036\ufff9\042\ufff9\044" +
    "\ufff9\074\ufff9\075\ufff9\112\ufff9\116\ufff9\120\ufff9\123\ufff9" +
    "\124\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9\001" +
    "\002\000\004\004\u0104\001\002\000\070\002\uffc5\004\214" +
    "\010\006\011\021\015\023\021\022\022\202\024\216\025" +
    "\017\026\010\030\210\031\020\036\215\042\013\044\225" +
    "\074\057\075\054\112\071\116\206\120\226\123\070\124" +
    "\061\125\066\126\062\127\055\130\064\131\060\001\002" +
    "\000\020\010\006\015\023\021\022\025\017\026\010\031" +
    "\020\042\013\001\002\000\004\004\172\001\002\000\010" +
    "\052\uffb0\106\173\113\uffb0\001\002\000\022\004\174\123" +
    "\070\124\061\125\066\126\062\127\055\130\064\131\060" +
    "\001\002\000\010\052\uff9e\112\147\113\uff9e\001\002\000" +
    "\006\052\uffaf\113\uffaf\001\002\000\074\002\uffde\004\uffde" +
    "\010\uffde\011\uffde\015\uffde\016\uffde\021\uffde\022\uffde\024" +
    "\uffde\025\uffde\026\uffde\030\uffde\031\uffde\036\uffde\042\uffde" +
    "\044\uffde\074\uffde\075\uffde\112\uffde\116\uffde\117\uffde\120" +
    "\uffde\123\uffde\124\uffde\125\uffde\126\uffde\127\uffde\130\uffde" +
    "\131\uffde\001\002\000\074\002\ufff4\004\ufff4\010\ufff4\011" +
    "\ufff4\015\ufff4\016\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\030\ufff4\031\ufff4\036\ufff4\042\ufff4\044\ufff4\074" +
    "\ufff4\075\ufff4\112\ufff4\116\ufff4\117\ufff4\120\ufff4\123\ufff4" +
    "\124\ufff4\125\ufff4\126\ufff4\127\ufff4\130\ufff4\131\ufff4\001" +
    "\002\000\074\002\ufff2\004\ufff2\010\ufff2\011\ufff2\015\ufff2" +
    "\016\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\030" +
    "\ufff2\031\ufff2\036\ufff2\042\ufff2\044\ufff2\074\ufff2\075\ufff2" +
    "\112\ufff2\116\ufff2\117\ufff2\120\ufff2\123\ufff2\124\ufff2\125" +
    "\ufff2\126\ufff2\127\ufff2\130\ufff2\131\ufff2\001\002\000\074" +
    "\002\uffd7\004\uffd7\010\uffd7\011\uffd7\015\uffd7\016\uffd7\021" +
    "\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\030\uffd7\031\uffd7" +
    "\036\uffd7\042\uffd7\044\uffd7\074\uffd7\075\uffd7\112\uffd7\116" +
    "\uffd7\117\uffd7\120\uffd7\123\uffd7\124\uffd7\125\uffd7\126\uffd7" +
    "\127\uffd7\130\uffd7\131\uffd7\001\002\000\006\003\360\112" +
    "\357\001\002\000\074\002\ufff7\004\ufff7\010\ufff7\011\ufff7" +
    "\015\ufff7\016\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7\026" +
    "\ufff7\030\ufff7\031\ufff7\036\ufff7\042\ufff7\044\ufff7\074\ufff7" +
    "\075\ufff7\112\ufff7\116\ufff7\117\ufff7\120\ufff7\123\ufff7\124" +
    "\ufff7\125\ufff7\126\ufff7\127\ufff7\130\ufff7\131\ufff7\001\002" +
    "\000\004\004\146\001\002\000\074\002\uffe8\004\uffe8\010" +
    "\uffe8\011\uffe8\015\uffe8\016\uffe8\021\uffe8\022\uffe8\024\uffe8" +
    "\025\uffe8\026\uffe8\030\uffe8\031\uffe8\036\uffe8\042\uffe8\044" +
    "\uffe8\074\uffe8\075\uffe8\112\uffe8\116\uffe8\117\uffe8\120\uffe8" +
    "\123\uffe8\124\uffe8\125\uffe8\126\uffe8\127\uffe8\130\uffe8\131" +
    "\uffe8\001\002\000\070\004\214\010\006\011\021\015\023" +
    "\021\022\022\202\024\216\025\017\026\010\030\210\031" +
    "\020\036\215\042\013\044\225\074\057\075\054\112\071" +
    "\116\206\117\uffc5\120\226\123\070\124\061\125\066\126" +
    "\062\127\055\130\064\131\060\001\002\000\004\120\270" +
    "\001\002\000\030\004\056\074\057\075\054\112\071\123" +
    "\070\124\061\125\066\126\062\127\055\130\064\131\060" +
    "\001\002\000\174\002\uffac\004\uffac\010\uffac\011\uffac\015" +
    "\uffac\016\uffac\021\uffac\022\uffac\024\uffac\025\uffac\026\uffac" +
    "\030\uffac\031\uffac\036\uffac\042\uffac\044\uffac\045\125\046" +
    "\112\047\122\050\130\051\100\053\117\054\106\055\111" +
    "\056\123\057\136\060\104\061\124\062\107\063\101\064" +
    "\133\065\114\066\110\067\102\070\113\071\121\072\134" +
    "\073\077\074\uffac\075\uffac\076\076\077\126\100\135\101" +
    "\127\102\131\103\132\104\120\106\103\107\105\110\116" +
    "\112\uffac\116\uffac\117\uffac\120\351\123\uffac\124\uffac\125" +
    "\uffac\126\uffac\127\uffac\130\uffac\131\uffac\001\002\000\074" +
    "\002\ufff5\004\ufff5\010\ufff5\011\ufff5\015\ufff5\016\ufff5\021" +
    "\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\030\ufff5\031\ufff5" +
    "\036\ufff5\042\ufff5\044\ufff5\074\ufff5\075\ufff5\112\ufff5\116" +
    "\ufff5\117\ufff5\120\ufff5\123\ufff5\124\ufff5\125\ufff5\126\ufff5" +
    "\127\ufff5\130\ufff5\131\ufff5\001\002\000\074\002\uffc5\004" +
    "\214\010\006\011\021\015\023\016\uffc5\021\022\022\202" +
    "\024\216\025\017\026\010\030\210\031\020\036\215\042" +
    "\013\044\225\074\057\075\054\112\071\116\206\117\uffc5" +
    "\120\226\123\070\124\061\125\066\126\062\127\055\130" +
    "\064\131\060\001\002\000\174\002\uff9e\004\uff9e\010\uff9e" +
    "\011\uff9e\015\uff9e\016\uff9e\021\uff9e\022\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\030\uff9e\031\uff9e\036\uff9e\042\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\053\uff9e\054" +
    "\uff9e\055\uff9e\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e" +
    "\063\uff9e\064\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071" +
    "\uff9e\072\uff9e\073\uff9e\074\057\075\054\076\uff9e\077\uff9e" +
    "\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\106\346\107" +
    "\uff9e\110\uff9e\112\147\116\uff9e\117\uff9e\120\uff9e\123\uff9e" +
    "\124\uff9e\125\uff9e\126\uff9e\127\uff9e\130\uff9e\131\uff9e\001" +
    "\002\000\006\003\274\112\273\001\002\000\006\003\252" +
    "\112\251\001\002\000\074\002\ufff6\004\ufff6\010\ufff6\011" +
    "\ufff6\015\ufff6\016\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\030\ufff6\031\ufff6\036\ufff6\042\ufff6\044\ufff6\074" +
    "\ufff6\075\ufff6\112\ufff6\116\ufff6\117\ufff6\120\ufff6\123\ufff6" +
    "\124\ufff6\125\ufff6\126\ufff6\127\ufff6\130\ufff6\131\ufff6\001" +
    "\002\000\074\002\ufff3\004\ufff3\010\ufff3\011\ufff3\015\ufff3" +
    "\016\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\030" +
    "\ufff3\031\ufff3\036\ufff3\042\ufff3\044\ufff3\074\ufff3\075\ufff3" +
    "\112\ufff3\116\ufff3\117\ufff3\120\ufff3\123\ufff3\124\ufff3\125" +
    "\ufff3\126\ufff3\127\ufff3\130\ufff3\131\ufff3\001\002\000\074" +
    "\002\uffc5\004\214\010\006\011\021\015\023\016\uffc5\021" +
    "\022\022\202\024\216\025\017\026\010\030\210\031\020" +
    "\036\215\042\013\044\225\074\057\075\054\112\071\116" +
    "\206\117\uffc5\120\226\123\070\124\061\125\066\126\062" +
    "\127\055\130\064\131\060\001\002\000\074\002\uffad\004" +
    "\uffad\010\uffad\011\uffad\015\uffad\016\uffad\021\uffad\022\uffad" +
    "\024\uffad\025\uffad\026\uffad\030\uffad\031\uffad\036\uffad\042" +
    "\uffad\044\uffad\074\uffad\075\uffad\112\uffad\116\uffad\117\uffad" +
    "\120\246\123\uffad\124\uffad\125\uffad\126\uffad\127\uffad\130" +
    "\uffad\131\uffad\001\002\000\024\002\ufffb\010\ufffb\011\ufffb" +
    "\015\ufffb\021\ufffb\025\ufffb\026\ufffb\031\ufffb\042\ufffb\001" +
    "\002\000\024\002\ufff8\010\ufff8\011\ufff8\015\ufff8\021\ufff8" +
    "\025\ufff8\026\ufff8\031\ufff8\042\ufff8\001\002\000\006\003" +
    "\231\112\230\001\002\000\074\002\uffc5\004\214\010\006" +
    "\011\021\015\023\016\uffc5\021\022\022\202\024\216\025" +
    "\017\026\010\030\210\031\020\036\215\042\013\044\225" +
    "\074\057\075\054\112\071\116\206\117\uffc5\120\226\123" +
    "\070\124\061\125\066\126\062\127\055\130\064\131\060" +
    "\001\002\000\074\002\uffcb\004\uffcb\010\uffcb\011\uffcb\015" +
    "\uffcb\016\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\030\uffcb\031\uffcb\036\uffcb\042\uffcb\044\uffcb\074\uffcb\075" +
    "\uffcb\112\uffcb\116\uffcb\117\uffcb\120\uffcb\123\uffcb\124\uffcb" +
    "\125\uffcb\126\uffcb\127\uffcb\130\uffcb\131\uffcb\001\002\000" +
    "\032\003\234\004\056\074\057\075\054\112\071\123\070" +
    "\124\061\125\066\126\062\127\055\130\064\131\060\001" +
    "\002\000\004\117\232\001\002\000\074\002\uffdb\004\uffdb" +
    "\010\uffdb\011\uffdb\015\uffdb\016\uffdb\021\uffdb\022\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\030\uffdb\031\uffdb\036\uffdb\042\uffdb" +
    "\044\uffdb\074\uffdb\075\uffdb\112\uffdb\116\uffdb\117\uffdb\120" +
    "\uffdb\123\uffdb\124\uffdb\125\uffdb\126\uffdb\127\uffdb\130\uffdb" +
    "\131\uffdb\001\002\000\106\003\236\045\125\046\112\047" +
    "\122\050\130\051\100\053\117\054\106\055\111\056\123" +
    "\057\136\060\104\061\124\062\107\063\101\064\133\065" +
    "\114\066\110\067\102\070\113\071\121\072\134\073\077" +
    "\076\076\077\126\100\135\101\127\102\131\103\132\104" +
    "\120\106\103\107\105\110\116\113\237\001\002\000\004" +
    "\117\235\001\002\000\074\002\uffda\004\uffda\010\uffda\011" +
    "\uffda\015\uffda\016\uffda\021\uffda\022\uffda\024\uffda\025\uffda" +
    "\026\uffda\030\uffda\031\uffda\036\uffda\042\uffda\044\uffda\074" +
    "\uffda\075\uffda\112\uffda\116\uffda\117\uffda\120\uffda\123\uffda" +
    "\124\uffda\125\uffda\126\uffda\127\uffda\130\uffda\131\uffda\001" +
    "\002\000\004\117\245\001\002\000\076\002\uffc5\004\214" +
    "\006\241\010\006\011\021\015\023\016\uffc5\021\022\022" +
    "\202\024\216\025\017\026\010\030\210\031\020\036\215" +
    "\042\013\044\225\074\057\075\054\112\071\116\206\117" +
    "\uffc5\120\226\123\070\124\061\125\066\126\062\127\055" +
    "\130\064\131\060\001\002\000\074\002\uffdf\004\uffdf\010" +
    "\uffdf\011\uffdf\015\uffdf\016\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\030\uffdf\031\uffdf\036\uffdf\042\uffdf\044" +
    "\uffdf\074\uffdf\075\uffdf\112\uffdf\116\uffdf\117\uffdf\120\uffdf" +
    "\123\uffdf\124\uffdf\125\uffdf\126\uffdf\127\uffdf\130\uffdf\131" +
    "\uffdf\001\002\000\004\120\243\001\002\000\074\002\uffdc" +
    "\004\uffdc\010\uffdc\011\uffdc\015\uffdc\016\uffdc\021\uffdc\022" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\030\uffdc\031\uffdc\036\uffdc" +
    "\042\uffdc\044\uffdc\074\uffdc\075\uffdc\112\uffdc\116\uffdc\117" +
    "\uffdc\120\uffdc\123\uffdc\124\uffdc\125\uffdc\126\uffdc\127\uffdc" +
    "\130\uffdc\131\uffdc\001\002\000\076\002\uffc5\004\214\006" +
    "\241\010\006\011\021\015\023\016\uffc5\021\022\022\202" +
    "\024\216\025\017\026\010\030\210\031\020\036\215\042" +
    "\013\044\225\074\057\075\054\112\071\116\206\117\uffc5" +
    "\120\226\123\070\124\061\125\066\126\062\127\055\130" +
    "\064\131\060\001\002\000\074\002\uffdd\004\uffdd\010\uffdd" +
    "\011\uffdd\015\uffdd\016\uffdd\021\uffdd\022\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\030\uffdd\031\uffdd\036\uffdd\042\uffdd\044\uffdd" +
    "\074\uffdd\075\uffdd\112\uffdd\116\uffdd\117\uffdd\120\uffdd\123" +
    "\uffdd\124\uffdd\125\uffdd\126\uffdd\127\uffdd\130\uffdd\131\uffdd" +
    "\001\002\000\074\002\uffd9\004\uffd9\010\uffd9\011\uffd9\015" +
    "\uffd9\016\uffd9\021\uffd9\022\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\030\uffd9\031\uffd9\036\uffd9\042\uffd9\044\uffd9\074\uffd9\075" +
    "\uffd9\112\uffd9\116\uffd9\117\uffd9\120\uffd9\123\uffd9\124\uffd9" +
    "\125\uffd9\126\uffd9\127\uffd9\130\uffd9\131\uffd9\001\002\000" +
    "\074\002\uffc5\004\214\010\006\011\021\015\023\016\uffc5" +
    "\021\022\022\202\024\216\025\017\026\010\030\210\031" +
    "\020\036\215\042\013\044\225\074\057\075\054\112\071" +
    "\116\206\117\uffc5\120\226\123\070\124\061\125\066\126" +
    "\062\127\055\130\064\131\060\001\002\000\074\002\uffca" +
    "\004\uffca\010\uffca\011\uffca\015\uffca\016\uffca\021\uffca\022" +
    "\uffca\024\uffca\025\uffca\026\uffca\030\uffca\031\uffca\036\uffca" +
    "\042\uffca\044\uffca\074\uffca\075\uffca\112\uffca\116\uffca\117" +
    "\uffca\120\uffca\123\uffca\124\uffca\125\uffca\126\uffca\127\uffca" +
    "\130\uffca\131\uffca\001\002\000\074\002\uffc7\004\uffc7\010" +
    "\uffc7\011\uffc7\015\uffc7\016\uffc7\021\uffc7\022\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\030\uffc7\031\uffc7\036\uffc7\042\uffc7\044" +
    "\uffc7\074\uffc7\075\uffc7\112\uffc7\116\uffc7\117\uffc7\120\uffc7" +
    "\123\uffc7\124\uffc7\125\uffc7\126\uffc7\127\uffc7\130\uffc7\131" +
    "\uffc7\001\002\000\032\003\255\004\056\074\057\075\054" +
    "\112\071\123\070\124\061\125\066\126\062\127\055\130" +
    "\064\131\060\001\002\000\004\117\253\001\002\000\074" +
    "\002\uffec\004\uffec\010\uffec\011\uffec\015\uffec\016\uffec\021" +
    "\uffec\022\uffec\024\uffec\025\uffec\026\uffec\030\uffec\031\uffec" +
    "\036\uffec\042\uffec\044\uffec\074\uffec\075\uffec\112\uffec\116" +
    "\uffec\117\uffec\120\uffec\123\uffec\124\uffec\125\uffec\126\uffec" +
    "\127\uffec\130\uffec\131\uffec\001\002\000\106\003\257\045" +
    "\125\046\112\047\122\050\130\051\100\053\117\054\106" +
    "\055\111\056\123\057\136\060\104\061\124\062\107\063" +
    "\101\064\133\065\114\066\110\067\102\070\113\071\121" +
    "\072\134\073\077\076\076\077\126\100\135\101\127\102" +
    "\131\103\132\104\120\106\103\107\105\110\116\113\260" +
    "\001\002\000\004\117\256\001\002\000\074\002\uffeb\004" +
    "\uffeb\010\uffeb\011\uffeb\015\uffeb\016\uffeb\021\uffeb\022\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\030\uffeb\031\uffeb\036\uffeb\042" +
    "\uffeb\044\uffeb\074\uffeb\075\uffeb\112\uffeb\116\uffeb\117\uffeb" +
    "\120\uffeb\123\uffeb\124\uffeb\125\uffeb\126\uffeb\127\uffeb\130" +
    "\uffeb\131\uffeb\001\002\000\004\117\272\001\002\000\074" +
    "\002\uffc5\004\214\010\006\011\021\015\023\016\uffc5\021" +
    "\022\022\202\024\216\025\017\026\010\030\210\031\020" +
    "\036\215\042\013\044\225\074\057\075\054\112\071\116" +
    "\206\117\uffc5\120\226\123\070\124\061\125\066\126\062" +
    "\127\055\130\064\131\060\001\002\000\074\002\uffc5\004" +
    "\214\010\006\011\021\015\023\016\264\021\022\022\202" +
    "\024\216\025\017\026\010\030\210\031\020\036\215\042" +
    "\013\044\225\074\057\075\054\112\071\116\206\117\uffc5" +
    "\120\226\123\070\124\061\125\066\126\062\127\055\130" +
    "\064\131\060\001\002\000\074\002\ufff1\004\ufff1\010\ufff1" +
    "\011\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1\024\ufff1\025" +
    "\ufff1\026\ufff1\030\ufff1\031\ufff1\036\ufff1\042\ufff1\044\ufff1" +
    "\074\ufff1\075\ufff1\112\ufff1\116\ufff1\117\ufff1\120\ufff1\123" +
    "\ufff1\124\ufff1\125\ufff1\126\ufff1\127\ufff1\130\ufff1\131\ufff1" +
    "\001\002\000\074\002\uffee\004\uffee\010\uffee\011\uffee\015" +
    "\uffee\016\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee" +
    "\030\uffee\031\uffee\036\uffee\042\uffee\044\uffee\074\uffee\075" +
    "\uffee\112\uffee\116\uffee\117\uffee\120\270\123\uffee\124\uffee" +
    "\125\uffee\126\uffee\127\uffee\130\uffee\131\uffee\001\002\000" +
    "\074\002\uffc5\004\214\010\006\011\021\015\023\016\uffc5" +
    "\021\022\022\202\024\216\025\017\026\010\030\210\031" +
    "\020\036\215\042\013\044\225\074\057\075\054\112\071" +
    "\116\206\117\uffc5\120\226\123\070\124\061\125\066\126" +
    "\062\127\055\130\064\131\060\001\002\000\074\002\uffed" +
    "\004\uffed\010\uffed\011\uffed\015\uffed\016\uffed\021\uffed\022" +
    "\uffed\024\uffed\025\uffed\026\uffed\030\uffed\031\uffed\036\uffed" +
    "\042\uffed\044\uffed\074\uffed\075\uffed\112\uffed\116\uffed\117" +
    "\uffed\120\uffed\123\uffed\124\uffed\125\uffed\126\uffed\127\uffed" +
    "\130\uffed\131\uffed\001\002\000\074\002\uffef\004\uffef\010" +
    "\uffef\011\uffef\015\uffef\016\uffef\021\uffef\022\uffef\024\uffef" +
    "\025\uffef\026\uffef\030\uffef\031\uffef\036\uffef\042\uffef\044" +
    "\uffef\074\uffef\075\uffef\112\uffef\116\uffef\117\uffef\120\uffef" +
    "\123\uffef\124\uffef\125\uffef\126\uffef\127\uffef\130\uffef\131" +
    "\uffef\001\002\000\074\002\ufff0\004\ufff0\010\ufff0\011\ufff0" +
    "\015\ufff0\016\ufff0\021\ufff0\022\ufff0\024\ufff0\025\ufff0\026" +
    "\ufff0\030\ufff0\031\ufff0\036\ufff0\042\ufff0\044\ufff0\074\ufff0" +
    "\075\ufff0\112\ufff0\116\ufff0\117\ufff0\120\ufff0\123\ufff0\124" +
    "\ufff0\125\ufff0\126\ufff0\127\ufff0\130\ufff0\131\ufff0\001\002" +
    "\000\074\002\uffc5\004\214\010\006\011\021\015\023\016" +
    "\uffc5\021\022\022\202\024\216\025\017\026\010\030\210" +
    "\031\020\036\215\042\013\044\225\074\057\075\054\112" +
    "\071\116\206\117\uffc5\120\226\123\070\124\061\125\066" +
    "\126\062\127\055\130\064\131\060\001\002\000\074\002" +
    "\uffc8\004\uffc8\010\uffc8\011\uffc8\015\uffc8\016\uffc8\021\uffc8" +
    "\022\uffc8\024\uffc8\025\uffc8\026\uffc8\030\uffc8\031\uffc8\036" +
    "\uffc8\042\uffc8\044\uffc8\074\uffc8\075\uffc8\112\uffc8\116\uffc8" +
    "\117\uffc8\120\uffc8\123\uffc8\124\uffc8\125\uffc8\126\uffc8\127" +
    "\uffc8\130\uffc8\131\uffc8\001\002\000\074\002\uffea\004\uffea" +
    "\010\uffea\011\uffea\015\uffea\016\uffea\021\uffea\022\uffea\024" +
    "\uffea\025\uffea\026\uffea\030\uffea\031\uffea\036\uffea\042\uffea" +
    "\044\uffea\074\uffea\075\uffea\112\uffea\116\uffea\117\uffea\120" +
    "\uffea\123\uffea\124\uffea\125\uffea\126\uffea\127\uffea\130\uffea" +
    "\131\uffea\001\002\000\024\003\302\004\276\074\057\075" +
    "\054\123\036\124\031\126\035\127\030\131\032\001\002" +
    "\000\004\117\275\001\002\000\074\002\uffe2\004\uffe2\010" +
    "\uffe2\011\uffe2\015\uffe2\016\uffe2\021\uffe2\022\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\030\uffe2\031\uffe2\036\uffe2\042\uffe2\044" +
    "\uffe2\074\uffe2\075\uffe2\112\uffe2\116\uffe2\117\uffe2\120\uffe2" +
    "\123\uffe2\124\uffe2\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131" +
    "\uffe2\001\002\000\112\003\uffa4\045\uffa4\046\uffa4\047\uffa4" +
    "\050\uffa4\051\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057" +
    "\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\066\uffa4\067\uffa4\070\uffa4\071\uffa4\072\uffa4\073\uffa4\076" +
    "\uffa4\077\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4" +
    "\105\uffa4\106\uffa4\107\uffa4\110\uffa4\112\342\113\uffa4\001" +
    "\002\000\110\003\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\053\uffa2\054\uffa2\055\uffa2\056\uffa2\057\uffa2\060" +
    "\uffa2\061\uffa2\062\uffa2\063\uffa2\064\uffa2\065\uffa2\066\uffa2" +
    "\067\uffa2\070\uffa2\071\uffa2\072\uffa2\073\uffa2\076\uffa2\077" +
    "\uffa2\100\uffa2\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2" +
    "\106\uffa2\107\uffa2\110\uffa2\113\uffa2\001\002\000\110\003" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062" +
    "\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3\067\uffa3\070\uffa3" +
    "\071\uffa3\072\uffa3\073\uffa3\076\uffa3\077\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\106\uffa3\107\uffa3" +
    "\110\uffa3\113\uffa3\001\002\000\106\003\314\045\125\046" +
    "\112\047\122\050\130\051\100\053\117\054\106\055\111" +
    "\056\123\057\136\060\104\061\124\062\107\063\101\064" +
    "\133\065\114\066\110\067\102\070\113\071\121\072\134" +
    "\073\077\076\076\077\126\100\135\101\127\102\131\103" +
    "\132\104\306\106\103\107\105\110\116\113\315\001\002" +
    "\000\004\117\313\001\002\000\022\004\276\074\057\075" +
    "\054\123\036\124\031\126\035\127\030\131\032\001\002" +
    "\000\110\003\uffa1\045\125\046\112\047\122\050\130\051" +
    "\100\053\117\054\106\055\111\056\123\057\136\060\104" +
    "\061\124\062\107\063\101\064\133\065\114\066\110\067" +
    "\102\070\113\071\121\072\134\073\077\076\076\077\126" +
    "\100\135\101\127\102\131\103\132\104\306\105\uffa1\106" +
    "\103\107\105\110\116\113\uffa1\001\002\000\022\004\276" +
    "\074\057\075\054\123\036\124\031\126\035\127\030\131" +
    "\032\001\002\000\022\004\276\074\057\075\054\123\036" +
    "\124\031\126\035\127\030\131\032\001\002\000\104\045" +
    "\125\046\112\047\122\050\130\051\100\053\117\054\106" +
    "\055\111\056\123\057\136\060\104\061\124\062\107\063" +
    "\101\064\133\065\114\066\110\067\102\070\113\071\121" +
    "\072\134\073\077\076\076\077\126\100\135\101\127\102" +
    "\131\103\132\104\306\105\310\106\103\107\105\110\116" +
    "\001\002\000\022\004\276\074\057\075\054\123\036\124" +
    "\031\126\035\127\030\131\032\001\002\000\110\003\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\053\117\054" +
    "\106\055\111\056\123\057\136\060\104\061\124\062\107" +
    "\063\101\064\133\065\114\066\110\067\102\070\113\071" +
    "\121\072\134\073\077\076\076\077\126\100\135\101\127" +
    "\102\131\103\132\104\uff9f\105\uff9f\106\103\107\105\110" +
    "\116\113\uff9f\001\002\000\110\003\uffa0\045\125\046\112" +
    "\047\122\050\130\051\100\053\117\054\106\055\111\056" +
    "\123\057\136\060\104\061\124\062\107\063\101\064\133" +
    "\065\114\066\110\067\102\070\113\071\121\072\134\073" +
    "\077\076\076\077\126\100\135\101\127\102\131\103\132" +
    "\104\306\105\uffa0\106\103\107\105\110\116\113\uffa0\001" +
    "\002\000\074\002\uffe1\004\uffe1\010\uffe1\011\uffe1\015\uffe1" +
    "\016\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\030" +
    "\uffe1\031\uffe1\036\uffe1\042\uffe1\044\uffe1\074\uffe1\075\uffe1" +
    "\112\uffe1\116\uffe1\117\uffe1\120\uffe1\123\uffe1\124\uffe1\125" +
    "\uffe1\126\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002\000\004" +
    "\117\341\001\002\000\102\002\uffc5\004\214\006\320\007" +
    "\316\010\006\011\021\013\322\015\023\016\uffc5\021\022" +
    "\022\202\024\216\025\017\026\010\030\210\031\020\036" +
    "\215\042\013\044\225\074\057\075\054\112\071\116\317" +
    "\117\uffc5\120\226\123\070\124\061\125\066\126\062\127" +
    "\055\130\064\131\060\001\002\000\022\004\276\074\057" +
    "\075\054\123\036\124\031\126\035\127\030\131\032\001" +
    "\002\000\076\004\214\006\320\007\316\010\006\011\021" +
    "\013\322\015\023\021\022\022\202\024\216\025\017\026" +
    "\010\030\210\031\020\036\215\042\013\044\225\074\057" +
    "\075\054\112\071\116\317\117\uffc5\120\226\123\070\124" +
    "\061\125\066\126\062\127\055\130\064\131\060\001\002" +
    "\000\004\120\327\001\002\000\074\002\uffe3\004\uffe3\010" +
    "\uffe3\011\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\030\uffe3\031\uffe3\036\uffe3\042\uffe3\044" +
    "\uffe3\074\uffe3\075\uffe3\112\uffe3\116\uffe3\117\uffe3\120\uffe3" +
    "\123\uffe3\124\uffe3\125\uffe3\126\uffe3\127\uffe3\130\uffe3\131" +
    "\uffe3\001\002\000\022\004\276\074\057\075\054\123\036" +
    "\124\031\126\035\127\030\131\032\001\002\000\074\002" +
    "\uffe9\004\uffe9\010\uffe9\011\uffe9\015\uffe9\016\uffe9\021\uffe9" +
    "\022\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\031\uffe9\036" +
    "\uffe9\042\uffe9\044\uffe9\074\uffe9\075\uffe9\112\uffe9\116\uffe9" +
    "\117\uffe9\120\uffe9\123\uffe9\124\uffe9\125\uffe9\126\uffe9\127" +
    "\uffe9\130\uffe9\131\uffe9\001\002\000\104\045\125\046\112" +
    "\047\122\050\130\051\100\053\117\054\106\055\111\056" +
    "\123\057\136\060\104\061\124\062\107\063\101\064\133" +
    "\065\114\066\110\067\102\070\113\071\121\072\134\073" +
    "\077\076\076\077\126\100\135\101\127\102\131\103\132" +
    "\104\306\105\325\106\103\107\105\110\116\001\002\000" +
    "\102\002\uffc5\004\214\006\320\007\316\010\006\011\021" +
    "\013\322\015\023\016\uffc5\021\022\022\202\024\216\025" +
    "\017\026\010\030\210\031\020\036\215\042\013\044\225" +
    "\074\057\075\054\112\071\116\317\117\uffc5\120\226\123" +
    "\070\124\061\125\066\126\062\127\055\130\064\131\060" +
    "\001\002\000\074\002\uffe5\004\uffe5\010\uffe5\011\uffe5\015" +
    "\uffe5\016\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\030\uffe5\031\uffe5\036\uffe5\042\uffe5\044\uffe5\074\uffe5\075" +
    "\uffe5\112\uffe5\116\uffe5\117\uffe5\120\uffe5\123\uffe5\124\uffe5" +
    "\125\uffe5\126\uffe5\127\uffe5\130\uffe5\131\uffe5\001\002\000" +
    "\102\002\uffc5\004\214\006\320\007\316\010\006\011\021" +
    "\013\322\015\023\016\uffc5\021\022\022\202\024\216\025" +
    "\017\026\010\030\210\031\020\036\215\042\013\044\225" +
    "\074\057\075\054\112\071\116\317\117\uffc5\120\226\123" +
    "\070\124\061\125\066\126\062\127\055\130\064\131\060" +
    "\001\002\000\074\002\uffe4\004\uffe4\010\uffe4\011\uffe4\015" +
    "\uffe4\016\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\030\uffe4\031\uffe4\036\uffe4\042\uffe4\044\uffe4\074\uffe4\075" +
    "\uffe4\112\uffe4\116\uffe4\117\uffe4\120\uffe4\123\uffe4\124\uffe4" +
    "\125\uffe4\126\uffe4\127\uffe4\130\uffe4\131\uffe4\001\002\000" +
    "\004\117\335\001\002\000\004\117\333\001\002\000\102" +
    "\002\uffc5\004\214\006\320\007\316\010\006\011\021\013" +
    "\322\015\023\016\uffc5\021\022\022\202\024\216\025\017" +
    "\026\010\030\210\031\020\036\215\042\013\044\225\074" +
    "\057\075\054\112\071\116\317\117\uffc5\120\226\123\070" +
    "\124\061\125\066\126\062\127\055\130\064\131\060\001" +
    "\002\000\074\002\uffe7\004\uffe7\010\uffe7\011\uffe7\015\uffe7" +
    "\016\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\030" +
    "\uffe7\031\uffe7\036\uffe7\042\uffe7\044\uffe7\074\uffe7\075\uffe7" +
    "\112\uffe7\116\uffe7\117\uffe7\120\uffe7\123\uffe7\124\uffe7\125" +
    "\uffe7\126\uffe7\127\uffe7\130\uffe7\131\uffe7\001\002\000\074" +
    "\002\uffcd\004\uffcd\010\uffcd\011\uffcd\015\uffcd\016\uffcd\021" +
    "\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\030\uffcd\031\uffcd" +
    "\036\uffcd\042\uffcd\044\uffcd\074\uffcd\075\uffcd\112\uffcd\116" +
    "\uffcd\117\uffcd\120\uffcd\123\uffcd\124\uffcd\125\uffcd\126\uffcd" +
    "\127\uffcd\130\uffcd\131\uffcd\001\002\000\104\045\125\046" +
    "\112\047\122\050\130\051\100\053\117\054\106\055\111" +
    "\056\123\057\136\060\104\061\124\062\107\063\101\064" +
    "\133\065\114\066\110\067\102\070\113\071\121\072\134" +
    "\073\077\076\076\077\126\100\135\101\127\102\131\103" +
    "\132\104\306\105\337\106\103\107\105\110\116\001\002" +
    "\000\102\002\uffc5\004\214\006\320\007\316\010\006\011" +
    "\021\013\322\015\023\016\uffc5\021\022\022\202\024\216" +
    "\025\017\026\010\030\210\031\020\036\215\042\013\044" +
    "\225\074\057\075\054\112\071\116\317\117\uffc5\120\226" +
    "\123\070\124\061\125\066\126\062\127\055\130\064\131" +
    "\060\001\002\000\074\002\uffe6\004\uffe6\010\uffe6\011\uffe6" +
    "\015\uffe6\016\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\030\uffe6\031\uffe6\036\uffe6\042\uffe6\044\uffe6\074\uffe6" +
    "\075\uffe6\112\uffe6\116\uffe6\117\uffe6\120\uffe6\123\uffe6\124" +
    "\uffe6\125\uffe6\126\uffe6\127\uffe6\130\uffe6\131\uffe6\001\002" +
    "\000\074\002\uffe0\004\uffe0\010\uffe0\011\uffe0\015\uffe0\016" +
    "\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\030\uffe0" +
    "\031\uffe0\036\uffe0\042\uffe0\044\uffe0\074\uffe0\075\uffe0\112" +
    "\uffe0\116\uffe0\117\uffe0\120\uffe0\123\uffe0\124\uffe0\125\uffe0" +
    "\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002\000\032\004" +
    "\056\074\057\075\054\112\071\113\344\123\070\124\061" +
    "\125\066\126\062\127\055\130\064\131\060\001\002\000" +
    "\004\113\345\001\002\000\110\003\uff8d\045\uff8d\046\uff8d" +
    "\047\uff8d\050\uff8d\051\uff8d\053\uff8d\054\uff8d\055\uff8d\056" +
    "\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063\uff8d\064\uff8d" +
    "\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073" +
    "\uff8d\076\uff8d\077\uff8d\100\uff8d\101\uff8d\102\uff8d\103\uff8d" +
    "\104\uff8d\105\uff8d\106\uff8d\107\uff8d\110\uff8d\113\uff8d\001" +
    "\002\000\110\003\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\053\uff8c\054\uff8c\055\uff8c\056\uff8c\057\uff8c\060" +
    "\uff8c\061\uff8c\062\uff8c\063\uff8c\064\uff8c\065\uff8c\066\uff8c" +
    "\067\uff8c\070\uff8c\071\uff8c\072\uff8c\073\uff8c\076\uff8c\077" +
    "\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105\uff8c" +
    "\106\uff8c\107\uff8c\110\uff8c\113\uff8c\001\002\000\030\004" +
    "\056\074\057\075\054\112\071\123\070\124\061\125\066" +
    "\126\062\127\055\130\064\131\060\001\002\000\174\002" +
    "\uffae\004\uffae\010\uffae\011\uffae\015\uffae\016\uffae\021\uffae" +
    "\022\uffae\024\uffae\025\uffae\026\uffae\030\uffae\031\uffae\036" +
    "\uffae\042\uffae\044\uffae\045\125\046\112\047\122\050\130" +
    "\051\100\053\117\054\106\055\111\056\123\057\136\060" +
    "\104\061\124\062\107\063\101\064\133\065\114\066\110" +
    "\067\102\070\113\071\121\072\134\073\077\074\uffae\075" +
    "\uffae\076\076\077\126\100\135\101\127\102\131\103\132" +
    "\104\120\106\103\107\105\110\116\112\uffae\116\uffae\117" +
    "\uffae\120\uffae\123\uffae\124\uffae\125\uffae\126\uffae\127\uffae" +
    "\130\uffae\131\uffae\001\002\000\074\002\uffcc\004\uffcc\010" +
    "\uffcc\011\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\030\uffcc\031\uffcc\036\uffcc\042\uffcc\044" +
    "\uffcc\074\uffcc\075\uffcc\112\uffcc\116\uffcc\117\uffcc\120\uffcc" +
    "\123\uffcc\124\uffcc\125\uffcc\126\uffcc\127\uffcc\130\uffcc\131" +
    "\uffcc\001\002\000\074\002\uffc5\004\214\010\006\011\021" +
    "\015\023\016\uffc5\021\022\022\202\024\216\025\017\026" +
    "\010\030\210\031\020\036\215\042\013\044\225\074\057" +
    "\075\054\112\071\116\206\117\uffc5\120\226\123\070\124" +
    "\061\125\066\126\062\127\055\130\064\131\060\001\002" +
    "\000\074\002\uffc9\004\uffc9\010\uffc9\011\uffc9\015\uffc9\016" +
    "\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\030\uffc9" +
    "\031\uffc9\036\uffc9\042\uffc9\044\uffc9\074\uffc9\075\uffc9\112" +
    "\uffc9\116\uffc9\117\uffc9\120\uffc9\123\uffc9\124\uffc9\125\uffc9" +
    "\126\uffc9\127\uffc9\130\uffc9\131\uffc9\001\002\000\104\045" +
    "\125\046\112\047\122\050\130\051\100\053\117\054\106" +
    "\055\111\056\123\057\136\060\104\061\124\062\107\063" +
    "\101\064\133\065\114\066\110\067\102\070\113\071\121" +
    "\072\134\073\077\076\076\077\126\100\135\101\127\102" +
    "\131\103\132\104\120\106\103\107\105\110\116\120\354" +
    "\001\002\000\074\002\uffc5\004\214\010\006\011\021\015" +
    "\023\016\uffc5\021\022\022\202\024\216\025\017\026\010" +
    "\030\210\031\020\036\215\042\013\044\225\074\057\075" +
    "\054\112\071\116\206\117\uffc5\120\226\123\070\124\061" +
    "\125\066\126\062\127\055\130\064\131\060\001\002\000" +
    "\074\002\uffc6\004\uffc6\010\uffc6\011\uffc6\015\uffc6\016\uffc6" +
    "\021\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\030\uffc6\031" +
    "\uffc6\036\uffc6\042\uffc6\044\uffc6\074\uffc6\075\uffc6\112\uffc6" +
    "\116\uffc6\117\uffc6\120\uffc6\123\uffc6\124\uffc6\125\uffc6\126" +
    "\uffc6\127\uffc6\130\uffc6\131\uffc6\001\002\000\004\117\335" +
    "\001\002\000\050\004\362\010\006\015\023\021\022\025" +
    "\017\026\010\031\020\042\013\074\057\075\054\112\071" +
    "\120\uffd1\123\070\124\061\125\066\126\062\127\055\130" +
    "\064\131\060\001\002\000\004\117\361\001\002\000\074" +
    "\002\uffd6\004\uffd6\010\uffd6\011\uffd6\015\uffd6\016\uffd6\021" +
    "\uffd6\022\uffd6\024\uffd6\025\uffd6\026\uffd6\030\uffd6\031\uffd6" +
    "\036\uffd6\042\uffd6\044\uffd6\074\uffd6\075\uffd6\112\uffd6\116" +
    "\uffd6\117\uffd6\120\uffd6\123\uffd6\124\uffd6\125\uffd6\126\uffd6" +
    "\127\uffd6\130\uffd6\131\uffd6\001\002\000\112\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e" +
    "\073\uff9e\074\057\075\054\076\uff9e\077\uff9e\100\uff9e\101" +
    "\uff9e\102\uff9e\103\uff9e\104\uff9e\106\u0102\107\uff9e\110\uff9e" +
    "\112\147\120\uff9e\001\002\000\104\045\125\046\112\047" +
    "\122\050\130\051\100\053\117\054\106\055\111\056\123" +
    "\057\136\060\104\061\124\062\107\063\101\064\133\065" +
    "\114\066\110\067\102\070\113\071\121\072\134\073\077" +
    "\076\076\077\126\100\135\101\127\102\131\103\132\104" +
    "\120\106\103\107\105\110\116\120\uffd2\001\002\000\004" +
    "\120\uffd4\001\002\000\004\120\366\001\002\000\030\004" +
    "\056\074\057\075\054\112\071\123\070\124\061\125\066" +
    "\126\062\127\055\130\064\131\060\001\002\000\104\045" +
    "\125\046\112\047\122\050\130\051\100\053\117\054\106" +
    "\055\111\056\123\057\136\060\104\061\124\062\107\063" +
    "\101\064\133\065\114\066\110\067\102\070\113\071\121" +
    "\072\134\073\077\076\076\077\126\100\135\101\127\102" +
    "\131\103\132\104\120\106\103\107\105\110\116\120\370" +
    "\001\002\000\034\003\uffce\004\371\074\057\075\054\112" +
    "\071\113\uffce\123\070\124\061\125\066\126\062\127\055" +
    "\130\064\131\060\001\002\000\114\003\uff9e\045\uff9e\046" +
    "\uff9e\047\uff9e\050\uff9e\051\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\063\uff9e\064" +
    "\uff9e\065\uff9e\066\uff9e\067\uff9e\070\uff9e\071\uff9e\072\uff9e" +
    "\073\uff9e\074\057\075\054\076\uff9e\077\uff9e\100\uff9e\101" +
    "\uff9e\102\uff9e\103\uff9e\104\uff9e\106\u0100\107\uff9e\110\uff9e" +
    "\112\147\113\uff9e\001\002\000\006\003\374\113\375\001" +
    "\002\000\106\003\uffcf\045\125\046\112\047\122\050\130" +
    "\051\100\053\117\054\106\055\111\056\123\057\136\060" +
    "\104\061\124\062\107\063\101\064\133\065\114\066\110" +
    "\067\102\070\113\071\121\072\134\073\077\076\076\077" +
    "\126\100\135\101\127\102\131\103\132\104\120\106\103" +
    "\107\105\110\116\113\uffcf\001\002\000\004\117\377\001" +
    "\002\000\074\002\uffc5\004\214\010\006\011\021\015\023" +
    "\016\uffc5\021\022\022\202\024\216\025\017\026\010\030" +
    "\210\031\020\036\215\042\013\044\225\074\057\075\054" +
    "\112\071\116\206\117\uffc5\120\226\123\070\124\061\125" +
    "\066\126\062\127\055\130\064\131\060\001\002\000\074" +
    "\002\uffd8\004\uffd8\010\uffd8\011\uffd8\015\uffd8\016\uffd8\021" +
    "\uffd8\022\uffd8\024\uffd8\025\uffd8\026\uffd8\030\uffd8\031\uffd8" +
    "\036\uffd8\042\uffd8\044\uffd8\074\uffd8\075\uffd8\112\uffd8\116" +
    "\uffd8\117\uffd8\120\uffd8\123\uffd8\124\uffd8\125\uffd8\126\uffd8" +
    "\127\uffd8\130\uffd8\131\uffd8\001\002\000\074\002\uffd5\004" +
    "\uffd5\010\uffd5\011\uffd5\015\uffd5\016\uffd5\021\uffd5\022\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\030\uffd5\031\uffd5\036\uffd5\042" +
    "\uffd5\044\uffd5\074\uffd5\075\uffd5\112\uffd5\116\uffd5\117\uffd5" +
    "\120\uffd5\123\uffd5\124\uffd5\125\uffd5\126\uffd5\127\uffd5\130" +
    "\uffd5\131\uffd5\001\002\000\030\004\056\074\057\075\054" +
    "\112\071\123\070\124\061\125\066\126\062\127\055\130" +
    "\064\131\060\001\002\000\106\003\uffd0\045\125\046\112" +
    "\047\122\050\130\051\100\053\117\054\106\055\111\056" +
    "\123\057\136\060\104\061\124\062\107\063\101\064\133" +
    "\065\114\066\110\067\102\070\113\071\121\072\134\073" +
    "\077\076\076\077\126\100\135\101\127\102\131\103\132" +
    "\104\120\106\103\107\105\110\116\113\uffd0\001\002\000" +
    "\030\004\056\074\057\075\054\112\071\123\070\124\061" +
    "\125\066\126\062\127\055\130\064\131\060\001\002\000" +
    "\104\045\125\046\112\047\122\050\130\051\100\053\117" +
    "\054\106\055\111\056\123\057\136\060\104\061\124\062" +
    "\107\063\101\064\133\065\114\066\110\067\102\070\113" +
    "\071\121\072\134\073\077\076\076\077\126\100\135\101" +
    "\127\102\131\103\132\104\120\106\103\107\105\110\116" +
    "\120\uffd3\001\002\000\006\052\uffb1\113\uffb1\001\002\000" +
    "\070\002\ufffa\004\ufffa\010\ufffa\011\ufffa\015\ufffa\021\ufffa" +
    "\022\ufffa\024\ufffa\025\ufffa\026\ufffa\030\ufffa\031\ufffa\036" +
    "\ufffa\042\ufffa\044\ufffa\074\ufffa\075\ufffa\112\ufffa\116\ufffa" +
    "\120\ufffa\123\ufffa\124\ufffa\125\ufffa\126\ufffa\127\ufffa\130" +
    "\ufffa\131\ufffa\001\002\000\022\010\006\011\170\015\023" +
    "\021\022\025\017\026\010\031\020\042\013\001\002\000" +
    "\004\113\uffb3\001\002\000\004\002\001\001\002\000\024" +
    "\002\uffc4\010\uffc4\011\uffc4\015\uffc4\021\uffc4\025\uffc4\026" +
    "\uffc4\031\uffc4\042\uffc4\001\002\000\024\002\uffc3\010\uffc3" +
    "\011\uffc3\015\uffc3\021\uffc3\025\uffc3\026\uffc3\031\uffc3\042" +
    "\uffc3\001\002\000\004\002\uffff\001\002\000\004\002\ufffe" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\022\004\006\005\013\012\003\026\004\027" +
    "\014\030\010\046\011\057\015\001\001\000\002\001\001" +
    "\000\020\004\006\005\013\012\u010b\026\004\027\014\030" +
    "\010\057\015\001\001\000\002\001\001\000\020\004\006" +
    "\005\013\012\u010a\026\004\027\014\030\010\057\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\044\055\046\001\001\000" +
    "\020\004\006\005\013\012\043\026\004\027\014\030\010" +
    "\057\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\023\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\002\166\005" +
    "\165\010\163\011\162\001\001\000\006\031\161\055\046" +
    "\001\001\000\002\001\001\000\012\015\066\016\062\020" +
    "\064\021\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\114\001\001\000\002\001\001\000\012\015\074" +
    "\016\073\020\064\021\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\141\016" +
    "\062\020\064\021\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\015\136\016\062\020\064\021\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\114\001\001\000\012" +
    "\015\140\016\062\020\064\021\071\001\001\000\004\022" +
    "\114\001\001\000\004\022\114\001\001\000\002\001\001" +
    "\000\006\031\144\055\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\006\151\007\150\015\152\016\062" +
    "\020\064\021\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\156\007\150\015" +
    "\152\016\062\020\064\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\003\222\005\203\013\223\014\206\015" +
    "\210\016\062\020\064\021\071\027\212\030\221\032\220" +
    "\033\202\034\217\036\216\040\211\042\176\047\177\050" +
    "\175\051\200\056\204\057\015\001\001\000\004\005\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\031\044" +
    "\055\046\001\001\000\002\001\001\000\052\005\203\013" +
    "\355\014\206\015\210\016\062\020\064\021\071\027\212" +
    "\030\221\032\220\033\202\034\217\036\216\040\211\042" +
    "\176\047\177\050\175\051\200\056\204\057\015\001\001" +
    "\000\002\001\001\000\012\015\352\016\062\020\064\021" +
    "\071\001\001\000\004\022\114\001\001\000\002\001\001" +
    "\000\052\005\203\013\347\014\206\015\210\016\062\020" +
    "\064\021\071\027\212\030\221\032\220\033\202\034\217" +
    "\036\216\040\211\042\176\047\177\050\175\051\200\056" +
    "\204\057\015\001\001\000\004\021\147\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\052\005\203\013\247\014\206\015\210\016\062" +
    "\020\064\021\071\027\212\030\221\032\220\033\202\034" +
    "\217\036\216\040\211\042\176\047\177\050\175\051\200" +
    "\056\204\057\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\005\203" +
    "\013\226\014\206\015\210\016\062\020\064\021\071\027" +
    "\212\030\221\032\220\033\202\034\217\036\216\040\211" +
    "\042\176\047\177\050\175\051\200\056\204\057\015\001" +
    "\001\000\002\001\001\000\012\015\232\016\062\020\064" +
    "\021\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\054\005\203\013\241\014\206\015" +
    "\210\016\062\020\064\021\071\027\212\030\221\032\220" +
    "\033\202\034\217\036\216\040\211\041\237\042\176\047" +
    "\177\050\175\051\200\056\204\057\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\005" +
    "\203\013\241\014\206\015\210\016\062\020\064\021\071" +
    "\027\212\030\221\032\220\033\202\034\217\036\216\040" +
    "\211\041\243\042\176\047\177\050\175\051\200\056\204" +
    "\057\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\052\005\203\013\246\014\206\015\210\016\062\020\064" +
    "\021\071\027\212\030\221\032\220\033\202\034\217\036" +
    "\216\040\211\042\176\047\177\050\175\051\200\056\204" +
    "\057\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\015\253\016\062\020\064\021\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\005\203\013\260\014\206\015\210\016\062\020\064\021" +
    "\071\027\212\030\221\032\220\033\202\034\217\036\216" +
    "\040\211\042\176\047\177\050\175\051\200\056\204\057" +
    "\015\001\001\000\054\005\203\013\264\014\262\015\210" +
    "\016\062\020\064\021\071\027\212\030\221\032\220\033" +
    "\202\034\217\035\261\036\216\040\211\042\176\047\177" +
    "\050\175\051\200\056\204\057\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\005\203\013\266\014\265" +
    "\015\210\016\062\020\064\021\071\027\212\030\221\032" +
    "\220\033\202\034\217\036\216\040\211\042\176\047\177" +
    "\050\175\051\200\056\204\057\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\005\203" +
    "\013\270\014\206\015\210\016\062\020\064\021\071\027" +
    "\212\030\221\032\220\033\202\034\217\036\216\040\211" +
    "\042\176\047\177\050\175\051\200\056\204\057\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\300" +
    "\021\302\023\277\025\276\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\304\001\001\000\002\001\001\000" +
    "\012\017\303\021\302\023\277\025\276\001\001\000\004" +
    "\022\304\001\001\000\012\017\311\021\302\023\277\025" +
    "\276\001\001\000\012\017\306\021\302\023\277\025\276" +
    "\001\001\000\004\022\304\001\001\000\012\017\310\021" +
    "\302\023\277\025\276\001\001\000\004\022\304\001\001" +
    "\000\004\022\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\054\005\203\013\320\014\206\015\210\016\062" +
    "\020\064\021\071\027\212\030\221\032\220\033\202\034" +
    "\217\036\216\037\322\040\211\042\176\047\177\050\175" +
    "\051\200\056\204\057\015\001\001\000\012\017\335\021" +
    "\302\023\277\025\276\001\001\000\054\005\203\013\330" +
    "\014\206\015\210\016\062\020\064\021\071\027\212\030" +
    "\221\032\220\033\202\034\217\036\216\037\331\040\211" +
    "\042\176\047\177\050\175\051\200\056\204\057\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\017\323" +
    "\021\302\023\277\025\276\001\001\000\002\001\001\000" +
    "\004\022\304\001\001\000\054\005\203\013\320\014\206" +
    "\015\210\016\062\020\064\021\071\027\212\030\221\032" +
    "\220\033\202\034\217\036\216\037\325\040\211\042\176" +
    "\047\177\050\175\051\200\056\204\057\015\001\001\000" +
    "\002\001\001\000\054\005\203\013\320\014\206\015\210" +
    "\016\062\020\064\021\071\027\212\030\221\032\220\033" +
    "\202\034\217\036\216\037\327\040\211\042\176\047\177" +
    "\050\175\051\200\056\204\057\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\005\203" +
    "\013\320\014\206\015\210\016\062\020\064\021\071\027" +
    "\212\030\221\032\220\033\202\034\217\036\216\037\333" +
    "\040\211\042\176\047\177\050\175\051\200\056\204\057" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\304\001\001\000\054\005\203\013\320\014\206\015" +
    "\210\016\062\020\064\021\071\027\212\030\221\032\220" +
    "\033\202\034\217\036\216\037\337\040\211\042\176\047" +
    "\177\050\175\051\200\056\204\057\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\006\342\007\150\015" +
    "\152\016\062\020\064\021\071\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\015\346\016" +
    "\062\020\064\021\071\001\001\000\004\022\114\001\001" +
    "\000\002\001\001\000\052\005\203\013\351\014\206\015" +
    "\210\016\062\020\064\021\071\027\212\030\221\032\220" +
    "\033\202\034\217\036\216\040\211\042\176\047\177\050" +
    "\175\051\200\056\204\057\015\001\001\000\002\001\001" +
    "\000\004\022\114\001\001\000\052\005\203\013\354\014" +
    "\206\015\210\016\062\020\064\021\071\027\212\030\221" +
    "\032\220\033\202\034\217\036\216\040\211\042\176\047" +
    "\177\050\175\051\200\056\204\057\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\005\203\015\362\016" +
    "\062\020\064\021\071\030\363\043\364\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\147\001\001\000" +
    "\004\022\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\366\016\062\020\064\021\071\001\001\000" +
    "\004\022\114\001\001\000\014\015\372\016\062\020\064" +
    "\021\071\044\371\001\001\000\004\021\147\001\001\000" +
    "\002\001\001\000\004\022\114\001\001\000\002\001\001" +
    "\000\052\005\203\013\375\014\206\015\210\016\062\020" +
    "\064\021\071\027\212\030\221\032\220\033\202\034\217" +
    "\036\216\040\211\042\176\047\177\050\175\051\200\056" +
    "\204\057\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\u0100\016\062\020\064\021\071\001\001\000" +
    "\004\022\114\001\001\000\012\015\u0102\016\062\020\064" +
    "\021\071\001\001\000\004\022\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\165\010\u0106\011\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }



    CLexer s;
    Analyzer a;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message, null));
        }
    }

    public void syntax_error(Symbol cur_token) 
    {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token) 
    {
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",36, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= constant program_definition 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_definition ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration_0 ::= parameters_definition OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_declaration_0 ::= OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_0",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_declaration_1 ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration_1",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // control_structure ::= control_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // control_structure ::= control_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // control_structure ::= control_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // control_structure ::= control_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_structure",24, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // control_if ::= control_if_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // control_if ::= error_if 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if",25, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // control_if_else ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_if_else",26, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // control_else ::= KW_ELSE gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // control_else ::= KW_ELSE instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // control_else ::= instruction 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // control_else ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_else",27, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // error_if ::= KW_IF error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
      parser.generateSyntaxError("Left parenthesis missing", "(", i);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
      parser.generateSyntaxError("Expression missing in conditional structure", "expression", null);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // error_if ::= KW_IF OP_WRAPPERPARENTHESISLEFT expression error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		    
      parser.generateSyntaxError("Right parenthesis missing", ")", i);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_if",37, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // control_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // control_switch ::= error_switch 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch",28, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // control_switch_case ::= OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // control_switch_case ::= KW_CASE expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // control_switch_case ::= KW_DEFAULT expression_numeric OP_TERNARYOPERATIONDOUBLEDOT control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // control_switch_case ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_switch_case 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // control_switch_case ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_switch_case",29, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // error_switch ::= KW_SWITCH error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Left parenthesis missing", "(", s);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Numeric expresion expected", "expression", s);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // error_switch ::= KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Right parenthesis missing", ")", s);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_switch",44, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // control_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // control_while ::= error_while 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while",30, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // control_while_body ::= KW_BREAK OP_INSTRUCTIONENDOPERATOR control_while_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // control_while_body ::= gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_while_body",31, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // error_while ::= KW_WHILE error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Left parenthesis missing", "(", w);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Expression missing in conditional structure", "expression", null);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // error_while ::= KW_WHILE OP_WRAPPERPARENTHESISLEFT expression error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
      parser.generateSyntaxError("Right parenthesis missing", ")", w);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_while",38, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // control_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 OP_WRAPPERPARENTHESISRIGHT gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // control_for ::= error_for 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for",32, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // error_for ::= KW_FOR error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
      parser.generateSyntaxError("Left parenthesis missing", "(", f); 
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // error_for ::= KW_FOR OP_WRAPPERPARENTHESISLEFT control_for_instruction OP_INSTRUCTIONENDOPERATOR expression OP_INSTRUCTIONENDOPERATOR control_for_instruction1 error OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-8)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		 
      parser.generateSyntaxError("Right parenthesis missing", ")", f);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_for",39, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-8)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // control_for_instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // control_for_instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // control_for_instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // control_for_instruction ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction",33, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // control_for_instruction1 ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // control_for_instruction1 ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // control_for_instruction1 ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("control_for_instruction1",34, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // gramatic_body ::= OP_WRAPPERKEYPARENTHESISLEFT gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // gramatic_body ::= constant gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // gramatic_body ::= OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // gramatic_body ::= variable OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // gramatic_body ::= expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // gramatic_body ::= instruction OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // gramatic_body ::= control_structure gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // gramatic_body ::= KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // gramatic_body ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("gramatic_body",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // global ::= variable error 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;
		
        parser.generateSyntaxError("Instruction end operator was expected (;)", ";", v);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",20, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // constant ::= error_constant 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("constant",21, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // error_constant ::= KW_CONST keyword_types IDENT error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Constant must be defined as literal", "=", c);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Constant must be asigned with literal", "literal", c);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // error_constant ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
      
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_constant",45, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-6)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variable ::= keyword_types variable_definition 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",22, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_definition ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable_definition ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable_definition ::= error_variable_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",23, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // error_variable_definition ::= IDENT IDENT error OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object i2 = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ")", i2);
    
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("error_variable_definition",43, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // parameters_definition ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parameter_definition ::= keyword_types IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parameter_definition ::= KW_CONST keyword_types IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parameter_definition ::= KW_CONST keyword_types IDENT OP_ASIG expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instruction ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // instruction ::= variable 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // instruction ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("instruction",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_any_type OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expression ::= expression_any_type 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expression_any_type ::= expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expression_any_type ::= expression_unary_operator IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression_any_type ::= IDENT expression_unary_operator 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expression_any_type ::= expression expression_binary_operators expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expression_any_type ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_any_type",12, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression_numeric ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expression_numeric ::= expression_atomic_literal_int 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expression_numeric ::= expression_atomic_call_functions_anytype 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expression_numeric ::= expression_unary_operator expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expression_numeric ::= expression_numeric expression_binary_operators expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expression_numeric ::= expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_numeric",13, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expression_atomic ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expression_atomic ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression_atomic ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expression_atomic ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expression_atomic ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expression_atomic ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",14, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expression_atomic_literal_nonint ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expression_atomic_literal_nonint ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_nonint",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // expression_atomic_literal_int ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // expression_atomic_literal_int ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // expression_atomic_literal_int ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // expression_atomic_literal_int ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // expression_atomic_literal_int ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_literal_int",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // expression_atomic_call_functions_anytype ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic_call_functions_anytype",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",15, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expression_binary_operators ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expression_binary_operators ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expression_binary_operators ::= OP_SHIFTLEFTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_binary_operators ::= OP_SHIFTRIGHTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_binary_operators ::= OP_NOTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expression_binary_operators ::= OP_ORASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expression_binary_operators ::= OP_ANDASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // keyword_types ::= KW_INT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // keyword_types ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // keyword_types ::= KW_LONG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // keyword_types ::= KW_SHORT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // keyword_types ::= KW_VOID 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // keyword_types ::= KW_FLOAT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // keyword_types ::= KW_DOUBLE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
