
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package parser;

import java_cup.runtime.*;
import lexer.CLexer;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class CParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public CParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public CParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\025\003\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\002" +
    "\000\002\002\010\000\002\002\007\000\002\011\004\000" +
    "\002\012\004\000\002\013\003\000\002\013\005\000\002" +
    "\013\005\000\002\013\007\000\002\015\005\000\002\015" +
    "\003\000\002\014\003\000\002\014\004\000\002\014\005" +
    "\000\002\014\006\000\002\022\003\000\002\022\006\000" +
    "\002\022\005\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\023\003\000\002\023\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\004\005" +
    "\000\002\004\003\000\002\005\003\000\002\006\005\000" +
    "\002\006\003\000\002\007\004\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\046\002\ufffc\004\011\010\004\021\035\025" +
    "\036\026\033\031\012\042\031\074\005\075\020\112\007" +
    "\123\023\124\006\125\016\126\022\127\026\130\025\131" +
    "\015\001\002\000\004\004\uffc1\001\002\000\030\004\uffe3" +
    "\074\uffe3\075\uffe3\112\uffe3\123\uffe3\124\uffe3\125\uffe3\126" +
    "\uffe3\127\uffe3\130\uffe3\131\uffe3\001\002\000\076\045\uffe9" +
    "\046\uffe9\047\uffe9\050\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9" +
    "\064\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072" +
    "\uffe9\073\uffe9\076\uffe9\104\uffe9\105\uffe9\106\uffe9\107\uffe9" +
    "\110\uffe9\113\uffe9\120\uffe9\001\002\000\030\004\011\074" +
    "\005\075\020\112\007\123\023\124\006\125\016\126\022" +
    "\127\026\130\025\131\015\001\002\000\076\045\ufff2\046" +
    "\ufff2\047\ufff2\050\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2" +
    "\073\ufff2\076\ufff2\104\ufff2\105\ufff2\106\ufff2\107\ufff2\110" +
    "\ufff2\113\ufff2\120\ufff2\001\002\000\100\045\uffed\046\uffed" +
    "\047\uffed\050\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\062\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073" +
    "\uffed\076\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed" +
    "\112\127\113\uffed\120\uffed\001\002\000\004\004\uffbf\001" +
    "\002\000\004\002\000\001\002\000\004\002\126\001\002" +
    "\000\076\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052\uffe4\053" +
    "\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070" +
    "\uffe4\071\uffe4\072\uffe4\073\uffe4\076\uffe4\104\uffe4\105\uffe4" +
    "\106\uffe4\107\uffe4\110\uffe4\113\uffe4\120\uffe4\001\002\000" +
    "\076\045\uffe8\046\uffe8\047\uffe8\050\uffe8\052\uffe8\053\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8" +
    "\071\uffe8\072\uffe8\073\uffe8\076\uffe8\104\uffe8\105\uffe8\106" +
    "\uffe8\107\uffe8\110\uffe8\113\uffe8\120\uffe8\001\002\000\046" +
    "\002\ufffc\004\011\010\004\021\035\025\036\026\033\031" +
    "\012\042\031\074\005\075\020\112\007\123\023\124\006" +
    "\125\016\126\022\127\026\130\025\131\015\001\002\000" +
    "\030\004\uffe2\074\uffe2\075\uffe2\112\uffe2\123\uffe2\124\uffe2" +
    "\125\uffe2\126\uffe2\127\uffe2\130\uffe2\131\uffe2\001\002\000" +
    "\070\045\066\046\053\047\063\050\067\053\060\054\047" +
    "\055\052\056\064\057\072\060\045\061\065\062\050\063" +
    "\042\064\070\065\054\066\051\067\043\070\055\071\062" +
    "\072\071\073\041\076\040\104\061\106\044\107\046\110" +
    "\057\120\124\001\002\000\076\045\uffe7\046\uffe7\047\uffe7" +
    "\050\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\076" +
    "\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7\113\uffe7" +
    "\120\uffe7\001\002\000\076\045\uffea\046\uffea\047\uffea\050" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\070\uffea\071\uffea\072\uffea\073\uffea\076\uffea" +
    "\104\uffea\105\uffea\106\uffea\107\uffea\110\uffea\113\uffea\120" +
    "\uffea\001\002\000\004\004\101\001\002\000\076\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\052\uffe5\053\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\065\uffe5\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072" +
    "\uffe5\073\uffe5\076\uffe5\104\uffe5\105\uffe5\106\uffe5\107\uffe5" +
    "\110\uffe5\113\uffe5\120\uffe5\001\002\000\076\045\uffe6\046" +
    "\uffe6\047\uffe6\050\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063\uffe6\064" +
    "\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6" +
    "\073\uffe6\076\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110" +
    "\uffe6\113\uffe6\120\uffe6\001\002\000\046\002\ufffc\004\011" +
    "\010\004\021\035\025\036\026\033\031\012\042\031\074" +
    "\005\075\020\112\007\123\023\124\006\125\016\126\022" +
    "\127\026\130\025\131\015\001\002\000\004\120\076\001" +
    "\002\000\004\004\uffbe\001\002\000\030\004\011\074\005" +
    "\075\020\112\007\123\023\124\006\125\016\126\022\127" +
    "\026\130\025\131\015\001\002\000\004\004\uffc0\001\002" +
    "\000\076\045\ufff1\046\ufff1\047\ufff1\050\ufff1\052\ufff1\053" +
    "\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070" +
    "\ufff1\071\ufff1\072\ufff1\073\ufff1\076\ufff1\104\ufff1\105\ufff1" +
    "\106\ufff1\107\ufff1\110\ufff1\113\ufff1\120\ufff1\001\002\000" +
    "\004\004\uffbd\001\002\000\004\004\uffc2\001\002\000\076" +
    "\045\066\046\053\047\063\050\067\052\ufff0\053\060\054" +
    "\047\055\052\056\064\057\072\060\045\061\065\062\050" +
    "\063\042\064\070\065\054\066\051\067\043\070\055\071" +
    "\062\072\071\073\041\076\040\104\061\105\ufff0\106\044" +
    "\107\046\110\057\113\ufff0\120\ufff0\001\002\000\030\004" +
    "\uffc9\074\uffc9\075\uffc9\112\uffc9\123\uffc9\124\uffc9\125\uffc9" +
    "\126\uffc9\127\uffc9\130\uffc9\131\uffc9\001\002\000\030\004" +
    "\uffca\074\uffca\075\uffca\112\uffca\123\uffca\124\uffca\125\uffca" +
    "\126\uffca\127\uffca\130\uffca\131\uffca\001\002\000\030\004" +
    "\uffd4\074\uffd4\075\uffd4\112\uffd4\123\uffd4\124\uffd4\125\uffd4" +
    "\126\uffd4\127\uffd4\130\uffd4\131\uffd4\001\002\000\030\004" +
    "\uffd5\074\uffd5\075\uffd5\112\uffd5\123\uffd5\124\uffd5\125\uffd5" +
    "\126\uffd5\127\uffd5\130\uffd5\131\uffd5\001\002\000\030\004" +
    "\uffce\074\uffce\075\uffce\112\uffce\123\uffce\124\uffce\125\uffce" +
    "\126\uffce\127\uffce\130\uffce\131\uffce\001\002\000\030\004" +
    "\uffd6\074\uffd6\075\uffd6\112\uffd6\123\uffd6\124\uffd6\125\uffd6" +
    "\126\uffd6\127\uffd6\130\uffd6\131\uffd6\001\002\000\030\004" +
    "\uffd1\074\uffd1\075\uffd1\112\uffd1\123\uffd1\124\uffd1\125\uffd1" +
    "\126\uffd1\127\uffd1\130\uffd1\131\uffd1\001\002\000\030\004" +
    "\uffdc\074\uffdc\075\uffdc\112\uffdc\123\uffdc\124\uffdc\125\uffdc" +
    "\126\uffdc\127\uffdc\130\uffdc\131\uffdc\001\002\000\030\004" +
    "\uffd9\074\uffd9\075\uffd9\112\uffd9\123\uffd9\124\uffd9\125\uffd9" +
    "\126\uffd9\127\uffd9\130\uffd9\131\uffd9\001\002\000\030\004" +
    "\uffd0\074\uffd0\075\uffd0\112\uffd0\123\uffd0\124\uffd0\125\uffd0" +
    "\126\uffd0\127\uffd0\130\uffd0\131\uffd0\001\002\000\030\004" +
    "\uffdd\074\uffdd\075\uffdd\112\uffdd\123\uffdd\124\uffdd\125\uffdd" +
    "\126\uffdd\127\uffdd\130\uffdd\131\uffdd\001\002\000\030\004" +
    "\uffdf\074\uffdf\075\uffdf\112\uffdf\123\uffdf\124\uffdf\125\uffdf" +
    "\126\uffdf\127\uffdf\130\uffdf\131\uffdf\001\002\000\030\004" +
    "\uffd3\074\uffd3\075\uffd3\112\uffd3\123\uffd3\124\uffd3\125\uffd3" +
    "\126\uffd3\127\uffd3\130\uffd3\131\uffd3\001\002\000\030\004" +
    "\uffcd\074\uffcd\075\uffcd\112\uffcd\123\uffcd\124\uffcd\125\uffcd" +
    "\126\uffcd\127\uffcd\130\uffcd\131\uffcd\001\002\000\030\004" +
    "\011\074\005\075\020\112\007\123\023\124\006\125\016" +
    "\126\022\127\026\130\025\131\015\001\002\000\030\004" +
    "\uffd2\074\uffd2\075\uffd2\112\uffd2\123\uffd2\124\uffd2\125\uffd2" +
    "\126\uffd2\127\uffd2\130\uffd2\131\uffd2\001\002\000\030\004" +
    "\uffda\074\uffda\075\uffda\112\uffda\123\uffda\124\uffda\125\uffda" +
    "\126\uffda\127\uffda\130\uffda\131\uffda\001\002\000\030\004" +
    "\011\074\005\075\020\112\007\123\023\124\006\125\016" +
    "\126\022\127\026\130\025\131\015\001\002\000\030\004" +
    "\uffcc\074\uffcc\075\uffcc\112\uffcc\123\uffcc\124\uffcc\125\uffcc" +
    "\126\uffcc\127\uffcc\130\uffcc\131\uffcc\001\002\000\030\004" +
    "\uffe1\074\uffe1\075\uffe1\112\uffe1\123\uffe1\124\uffe1\125\uffe1" +
    "\126\uffe1\127\uffe1\130\uffe1\131\uffe1\001\002\000\030\004" +
    "\uffdb\074\uffdb\075\uffdb\112\uffdb\123\uffdb\124\uffdb\125\uffdb" +
    "\126\uffdb\127\uffdb\130\uffdb\131\uffdb\001\002\000\030\004" +
    "\uffd7\074\uffd7\075\uffd7\112\uffd7\123\uffd7\124\uffd7\125\uffd7" +
    "\126\uffd7\127\uffd7\130\uffd7\131\uffd7\001\002\000\030\004" +
    "\uffe0\074\uffe0\075\uffe0\112\uffe0\123\uffe0\124\uffe0\125\uffe0" +
    "\126\uffe0\127\uffe0\130\uffe0\131\uffe0\001\002\000\030\004" +
    "\uffde\074\uffde\075\uffde\112\uffde\123\uffde\124\uffde\125\uffde" +
    "\126\uffde\127\uffde\130\uffde\131\uffde\001\002\000\030\004" +
    "\uffcf\074\uffcf\075\uffcf\112\uffcf\123\uffcf\124\uffcf\125\uffcf" +
    "\126\uffcf\127\uffcf\130\uffcf\131\uffcf\001\002\000\030\004" +
    "\uffcb\074\uffcb\075\uffcb\112\uffcb\123\uffcb\124\uffcb\125\uffcb" +
    "\126\uffcb\127\uffcb\130\uffcb\131\uffcb\001\002\000\030\004" +
    "\uffd8\074\uffd8\075\uffd8\112\uffd8\123\uffd8\124\uffd8\125\uffd8" +
    "\126\uffd8\127\uffd8\130\uffd8\131\uffd8\001\002\000\070\045" +
    "\066\046\053\047\063\050\067\053\060\054\047\055\052" +
    "\056\064\057\072\060\045\061\065\062\050\063\042\064" +
    "\070\065\054\066\051\067\043\070\055\071\062\072\071" +
    "\073\041\076\040\104\061\105\074\106\044\107\046\110" +
    "\057\001\002\000\076\045\uffee\046\uffee\047\uffee\050\uffee" +
    "\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060" +
    "\uffee\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\076\uffee\104" +
    "\uffee\105\uffee\106\uffee\107\uffee\110\uffee\113\uffee\120\uffee" +
    "\001\002\000\076\045\066\046\053\047\063\050\067\052" +
    "\uffef\053\060\054\047\055\052\056\064\057\072\060\045" +
    "\061\065\062\050\063\042\064\070\065\054\066\051\067" +
    "\043\070\055\071\062\072\071\073\041\076\040\104\061" +
    "\105\uffef\106\044\107\046\110\057\113\uffef\120\uffef\001" +
    "\002\000\046\002\ufff9\004\ufff9\010\ufff9\021\ufff9\025\ufff9" +
    "\026\ufff9\031\ufff9\042\ufff9\074\ufff9\075\ufff9\112\ufff9\123" +
    "\ufff9\124\ufff9\125\ufff9\126\ufff9\127\ufff9\130\ufff9\131\ufff9" +
    "\001\002\000\004\002\ufffe\001\002\000\004\120\ufff8\001" +
    "\002\000\012\052\103\106\104\112\102\120\ufff7\001\002" +
    "\000\020\010\004\021\035\025\036\026\033\031\012\042" +
    "\031\113\114\001\002\000\004\004\110\001\002\000\030" +
    "\004\011\074\005\075\020\112\007\123\023\124\006\125" +
    "\016\126\022\127\026\130\025\131\015\001\002\000\072" +
    "\045\066\046\053\047\063\050\067\052\106\053\060\054" +
    "\047\055\052\056\064\057\072\060\045\061\065\062\050" +
    "\063\042\064\070\065\054\066\051\067\043\070\055\071" +
    "\062\072\071\073\041\076\040\104\061\106\044\107\046" +
    "\110\057\120\ufff6\001\002\000\004\004\110\001\002\000" +
    "\004\120\ufff4\001\002\000\010\052\103\106\104\120\ufff7" +
    "\001\002\000\004\120\ufff5\001\002\000\006\052\122\113" +
    "\uffc4\001\002\000\004\113\120\001\002\000\004\120\117" +
    "\001\002\000\004\004\116\001\002\000\006\052\uffc3\113" +
    "\uffc3\001\002\000\046\002\ufffa\004\ufffa\010\ufffa\021\ufffa" +
    "\025\ufffa\026\ufffa\031\ufffa\042\ufffa\074\ufffa\075\ufffa\112" +
    "\ufffa\123\ufffa\124\ufffa\125\ufffa\126\ufffa\127\ufffa\130\ufffa" +
    "\131\ufffa\001\002\000\004\120\121\001\002\000\046\002" +
    "\ufffb\004\ufffb\010\ufffb\021\ufffb\025\ufffb\026\ufffb\031\ufffb" +
    "\042\ufffb\074\ufffb\075\ufffb\112\ufffb\123\ufffb\124\ufffb\125" +
    "\ufffb\126\ufffb\127\ufffb\130\ufffb\131\ufffb\001\002\000\016" +
    "\010\004\021\035\025\036\026\033\031\012\042\031\001" +
    "\002\000\004\113\uffc5\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\001\001\002\000" +
    "\032\004\011\074\005\075\020\112\007\113\133\123\023" +
    "\124\006\125\016\126\022\127\026\130\025\131\015\001" +
    "\002\000\006\052\135\113\uffc7\001\002\000\004\113\134" +
    "\001\002\000\072\045\066\046\053\047\063\050\067\052" +
    "\uffc6\053\060\054\047\055\052\056\064\057\072\060\045" +
    "\061\065\062\050\063\042\064\070\065\054\066\051\067" +
    "\043\070\055\071\062\072\071\073\041\076\040\104\061" +
    "\106\044\107\046\110\057\113\uffc6\001\002\000\076\045" +
    "\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\076\uffeb\104\uffeb\105\uffeb\106\uffeb\107" +
    "\uffeb\110\uffeb\113\uffeb\120\uffeb\001\002\000\076\045\uffec" +
    "\046\uffec\047\uffec\050\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\057\uffec\060\uffec\061\uffec\062\uffec\063\uffec" +
    "\064\uffec\065\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072" +
    "\uffec\073\uffec\076\uffec\104\uffec\105\uffec\106\uffec\107\uffec" +
    "\110\uffec\113\uffec\120\uffec\001\002\000\030\004\011\074" +
    "\005\075\020\112\007\123\023\124\006\125\016\126\022" +
    "\127\026\130\025\131\015\001\002\000\004\113\uffc8\001" +
    "\002\000\070\045\ufff2\046\ufff2\047\ufff2\050\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2" +
    "\071\ufff2\072\ufff2\073\ufff2\076\ufff2\104\ufff2\106\ufff2\107" +
    "\ufff2\110\ufff2\113\141\001\002\000\066\045\066\046\053" +
    "\047\063\050\067\053\060\054\047\055\052\056\064\057" +
    "\072\060\045\061\065\062\050\063\042\064\070\065\054" +
    "\066\051\067\043\070\055\071\062\072\071\073\041\076" +
    "\040\104\061\106\044\107\046\110\057\001\002\000\076" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071" +
    "\ufff3\072\ufff3\073\ufff3\076\ufff3\104\ufff3\105\ufff3\106\ufff3" +
    "\107\ufff3\110\ufff3\113\ufff3\120\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\026\002\016\003\023\010\012\011\026\012" +
    "\027\014\007\015\020\022\033\023\031\025\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\136\015\137\022\033\023\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\016\003\023\010\124\011\026\012\027\014" +
    "\007\015\020\022\033\023\031\001\001\000\002\001\001" +
    "\000\004\024\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\016\003\023\010\076\011\026\012" +
    "\027\014\007\015\020\022\033\023\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\007\015\036\022" +
    "\033\023\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\007\015\074\022\033" +
    "\023\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\007\015\072\022\033\023\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\055\001" +
    "\001\000\002\001\001\000\004\024\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\114\006\112\007\111\001\001\000\004" +
    "\013\110\001\001\000\012\014\007\015\104\022\033\023" +
    "\031\001\001\000\004\024\055\001\001\000\004\013\106" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\114\006\122" +
    "\007\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\130\005\127" +
    "\014\007\015\131\022\033\023\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\004\135\005\127\014" +
    "\007\015\131\022\033\023\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\055\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return this.s.next_token(); 
    }


    // Connect this parser to a scanner!
    CLexer s;

    public void setLexer(CLexer lexer) {
        this.s = lexer;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$CParser$actions {
  private final CParser parser;

  /** Constructor */
  CUP$CParser$actions(CParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action_part00000000(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CParser$result;

      /* select the action based on the action number */
      switch (CUP$CParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= start_program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		RESULT = start_val;
              CUP$CParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CParser$parser.done_parsing();
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // start_program ::= program_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("start_program",19, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_definition ::= function_declaration program_definition 
            {
              Object RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_definition ::= global program_definition 
            {
              Object RESULT =null;
		int gleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_definition ::= expression OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // program_definition ::= 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("program_definition",6, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT parameters_definition OP_WRAPPERPARENTHESISRIGHT OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-5)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-5)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_declaration ::= keyword_types IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-4)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("function_declaration",0, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // global ::= variable OP_INSTRUCTIONENDOPERATOR 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("global",7, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variable ::= keyword_types variable_definition 
            {
              Object RESULT =null;
		int ktleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).left;
		int ktright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)).right;
		Object kt = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable",8, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variable_definition ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variable_definition ::= IDENT OP_ASIG expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // variable_definition ::= IDENT OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // variable_definition ::= IDENT OP_ASIG expression OP_COMMA variable_definition 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.elementAt(CUP$CParser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("variable_definition",9, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-4)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= OP_WRAPPERPARENTHESISLEFT expression_0 OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression_0 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_0 ::= expression_atomic 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression_0 ::= expression_unary_operator expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression_0 ::= expression expression_binary_operators expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression_0 ::= expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_0",10, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression_atomic ::= IDENT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-3)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression_atomic ::= IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression_atomic ::= LIT_HEXVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression_atomic ::= LIT_DECIMALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression_atomic ::= LIT_FLOATVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression_atomic ::= LIT_CHARVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression_atomic ::= LIT_OCTALVALUE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression_atomic ::= LIT_STRINGDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression_atomic ::= LIT_EXPONENTIALDEF 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_atomic",16, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression_unary_operator ::= OP_MINUSMINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression_unary_operator ::= OP_PLUSPLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_unary_operator",17, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression_binary_operators ::= OP_MINUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression_binary_operators ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression_binary_operators ::= OP_PLUS 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_binary_operators ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression_binary_operators ::= OP_LT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression_binary_operators ::= OP_LTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression_binary_operators ::= OP_GT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression_binary_operators ::= OP_GTE 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression_binary_operators ::= OP_EQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression_binary_operators ::= OP_NOTEQUALCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression_binary_operators ::= OP_ANDCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression_binary_operators ::= OP_ORCOMP 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression_binary_operators ::= OP_NEGATION 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression_binary_operators ::= OP_AND 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression_binary_operators ::= OP_OR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression_binary_operators ::= OP_SHIFTOPLEFT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression_binary_operators ::= OP_SHIFTOPRIGHT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression_binary_operators ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression_binary_operators ::= OP_XOR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression_binary_operators ::= OP_ASIG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression_binary_operators ::= OP_PLUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression_binary_operators ::= OP_MINUSASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_binary_operators ::= OP_MULTASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_binary_operators ::= OP_DIVASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_binary_operators ::= OP_MODASSIGN 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("expression_binary_operators",18, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameters ::= parameter OP_COMMA parameters 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters",2, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameter ::= expression 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter",3, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameters_definition ::= parameter_definition OP_COMMA parameters_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-2)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameters_definition ::= parameter_definition 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameters_definition",4, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parameter_definition ::= keyword_types IDENT 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$CParser$stack.peek()).value;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("parameter_definition",5, ((java_cup.runtime.Symbol)CUP$CParser$stack.elementAt(CUP$CParser$top-1)), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // keyword_types ::= KW_INT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // keyword_types ::= KW_CHAR 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // keyword_types ::= KW_LONG 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // keyword_types ::= KW_SHORT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // keyword_types ::= KW_VOID 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // keyword_types ::= KW_FLOAT 
            {
              Object RESULT =null;

              CUP$CParser$result = parser.getSymbolFactory().newSymbol("keyword_types",1, ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CParser$stack.peek()), RESULT);
            }
          return CUP$CParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$CParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$CParser$do_action(
    int                        CUP$CParser$act_num,
    java_cup.runtime.lr_parser CUP$CParser$parser,
    java.util.Stack            CUP$CParser$stack,
    int                        CUP$CParser$top)
    throws java.lang.Exception
    {
              return CUP$CParser$do_action_part00000000(
                               CUP$CParser$act_num,
                               CUP$CParser$parser,
                               CUP$CParser$stack,
                               CUP$CParser$top);
    }
}

}
