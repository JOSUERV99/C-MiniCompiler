/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
import java_cup.runtime.*;
import lexer.CLexer;

/* define how to connect to the scanner! */
parser code {:
    // Connect this parser to a scanner!
    CLexer s;

    public void setLexer(CLexer lexer) {
        this.s = lexer;
    }

:}

init with {:  :};
scan with {: return this.s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal IDENT;
terminal KW_AUTO,KW_BREAK,KW_CASE,KW_CHAR,KW_CONST;
terminal KW_CONTINUE,KW_DEFAULT,KW_DO,KW_DOUBLE,KW_ELSE;
terminal KW_ENUM,KW_EXTERN,KW_FLOAT,KW_FOR,KW_GOTO;
terminal KW_IF,KW_INT,KW_LONG,KW_REGISTER,KW_RETURN;
terminal KW_SHORT,KW_SIGNED,KW_SIZEOF,KW_STATIC,KW_STRUCT;
terminal KW_SWITCH,KW_TYPEDEF,KW_UNION,KW_UNSIGNED,KW_VOID;
terminal KW_VOLATILE,KW_WHILE,OP_DIV,OP_PLUS,OP_MINUS;
terminal OP_MULT,OP_MOD,OP_COMMA,OP_GTE,OP_LTE;
terminal OP_LT,OP_GT,OP_NOTEQUALCOMP,OP_ORCOMP,OP_ANDCOMP;
terminal OP_EQUALCOMP,OP_AND,OP_XOR,OP_OR,OP_NOT;
terminal OP_NEGATION,OP_PLUSASSIGN,OP_MINUSASSIGN,OP_MULTASSIGN,OP_DIVASSIGN;
terminal OP_MINUSMINUSASSIGN,OP_PLUSPLUSASSIGN,OP_MODASSIGN,OP_ANDASSIGN,OP_NOTASSIGN;
terminal OP_ORASSIGN,OP_SHIFTLEFTASSIGN,OP_SHIFTRIGHTASSIGN,OP_TERNARYOPERATORQUESTIONMARK,OP_TERNARYOPERATIONDOUBLEDOT;
terminal OP_ASIG,OP_SHIFTOPRIGHT,OP_SHIFTOPLEFT,OP_PROPOPERATOR;
terminal OP_WRAPPERPARENTHESISLEFT,OP_WRAPPERPARENTHESISRIGHT,OP_WRAPPERSQUAREPARENTHESISLEFT,OP_WRAPPERSQUAREPARENTHESISRIGHT,OP_WRAPPERKEYPARENTHESISLEFT,OP_WRAPPERKEYPARENTHESISRIGHT;
terminal OP_INSTRUCTIONENDOPERATOR,OP_POINTEROPERATOR,OP_POINTEROPERATORASTERISC,LIT_HEXVALUE,LIT_DECIMALVALUE,LIT_FLOATVALUE,LIT_CHARVALUE,LIT_OCTALVALUE,LIT_STRINGDEF,LIT_EXPONENTIALDEF;
/* Non Terminals (generated using the terminals tokens) */


//Non-terminals function
non terminal function_declaration_0, function_declaration_1, function_declaration, keyword_types, parameters, parameter, parameters_definition, parameter_definition, program_definition;
non terminal gramatic_body_0, gramatic_body;
//Non-terminal expressions
non terminal instruction, expression_0, expression, expression_atomic, expression_unary_operator, expression_binary_operators;
//Non-terminal Variables
non terminal global, constant, variable, variable_definition;
//Non-terminal Estrucutura Control
non terminal control_structure, control_if, control_if_else, control_else, control_switch, control_switch_case, control_while, control_for, control_for_intruction;

//Non-terminal
non terminal error_if_condicion, error_if_parentesis;

//Program Start non termi
non terminal start_program;

//precedence gramatic body
precedence left     OP_WRAPPERKEYPARENTHESISLEFT, OP_WRAPPERKEYPARENTHESISRIGHT;
precedence left     OP_WRAPPERPARENTHESISLEFT, OP_WRAPPERPARENTHESISRIGHT;
//precedence operators expression
precedence left     OP_PLUS, OP_MINUS;
precedence left     OP_MULT, OP_DIV;
precedence left     OP_TERNARYOPERATORQUESTIONMARK, OP_TERNARYOPERATIONDOUBLEDOT;
precedence nonassoc 
    //RELATIONAL OPERATORS 
      OP_LT
    , OP_LTE
    , OP_GT 
    , OP_GTE 
    , OP_EQUALCOMP
    , OP_NOTEQUALCOMP
    //LOGICAL OPERATORS
    , OP_ANDCOMP
    , OP_ORCOMP
    , OP_NEGATION
    //BITWISE OPERATORS  
    , OP_AND 
    , OP_OR 
    , OP_SHIFTOPLEFT
    , OP_SHIFTOPRIGHT
    , OP_NOT
    , OP_XOR
    //ASSIGMENT OPERATORS
    , OP_ASIG
    , OP_PLUSASSIGN
    , OP_MINUSASSIGN
    , OP_MULTASSIGN
    , OP_DIVASSIGN
    , OP_MODASSIGN
    ;

start with start_program;

//https://stackoverflow.com/questions/44091680/java-cup-runtime-symbol-eof-has-not-been-declared
//https://www.cs.auckland.ac.nz/courses/compsci330s1c/lectures/330ChaptersPDF/Chapt4.pdf
start_program ::= 
    program_definition
    ;

program_definition ::= 
      function_declaration:fd program_definition:pd 
    | global:g program_definition:pd      
    |
    ;
/*
Funciones -> Tipo Identifier ( Parametros ) { CuerpoGramatica} |
			 Tipo Identifier ( Parametros )
*/
function_declaration ::= 
      keyword_types:kt IDENT OP_WRAPPERPARENTHESISLEFT  function_declaration_0 function_declaration_1
    ;
function_declaration_0 ::=
      parameters_definition OP_WRAPPERPARENTHESISRIGHT 
    | OP_WRAPPERPARENTHESISRIGHT 
    ;
function_declaration_1 ::=
      OP_INSTRUCTIONENDOPERATOR
    | gramatic_body
    ;


/*
CuerpoGramatica  	-> 	Variables ; CuerpoGramatica 		|
						Constantes CuerpoGramatica 			|
						Expresion ; CuerpoGramatica			|
						EstructuraControl CuerpoGramatica 	|
						Instruccion CuerpoGramatica 		|
						{ CuerpoGramatica } 				| { ε }

*/
gramatic_body::=
      OP_WRAPPERKEYPARENTHESISLEFT                  OP_WRAPPERKEYPARENTHESISRIGHT 
    | OP_WRAPPERKEYPARENTHESISLEFT gramatic_body_0  OP_WRAPPERKEYPARENTHESISRIGHT 
    ;  

gramatic_body_0 ::=
      constant gramatic_body_0
    | variable    OP_INSTRUCTIONENDOPERATOR  gramatic_body_0 
    | expression  OP_INSTRUCTIONENDOPERATOR  gramatic_body_0
    | instruction OP_INSTRUCTIONENDOPERATOR  gramatic_body_0
    | OP_WRAPPERKEYPARENTHESISLEFT           gramatic_body_0 OP_WRAPPERKEYPARENTHESISRIGHT 
    |
    ;

/*
EstructuraControl	->  Control-If | Control-Switch | Control-While | Control-For
*/
control_structure::=
      control_if
    | control_switch
    | control_while
    | control_for
;


/*
Control-If       	->	Control-If-Else 		| 												
						if ( ERROR-If )			|
						if ERROR-If-Parentesis	|
*/
control_if ::=
      control_if_else
    | KW_IF OP_WRAPPERPARENTHESISLEFT error_if_condicion OP_WRAPPERPARENTHESISRIGHT
    | KW_IF error_if_parentesis
;

/*
ERROR-If-condicion	->	*Terminar*
*/
error_if_condicion::=

;


/*
ERROR-if-parentesis
*/
error_if_parentesis::=

;


/*
Control-If-Else     ->	if ( Expresion ) { CuerpoGramatica } Control-Else |
						if ( Expresion ) Instruccion         Control-Else |
*/
control_if_else::=
      KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT gramatic_body                               control_else
    | KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT instruction     OP_INSTRUCTIONENDOPERATOR   control_else
;


/*
Control-Else		-> 	else { CuerpoGramatica } 	|
						else Instruccion 			| ε 
*/
control_else::=

;


/*
Control-Switch   	-> 	switch ( Literal ){ CuerpoGramatica } |
						switch ( Literal ){ Control-Switch-Case }
*/
control_switch::=

;


/*
Control-Switch-Case ->  case Literal : CuerpoGramatica 	   	|
						case Literal : Control-Switch-Case 	|
						default : CuerpoGramatica			|
						default : Control-Switch-Case
*/
 control_switch_case::=

 ;


/*
Control-While		->	while ( Expresion )	|
						while ( Expresion ) CuerpoGramatica 
*/
control_while::=

;


/*
Control-For			->	for ( Expresion ; For-Instruccion ; For-Instruccion )	|
						for ( Expresion ; For-Instruccion ; For-Instruccion ) CuerpoGramatica 
*/
control_for::=

;


/*
For-Instruccion		->	Expresion | Identifier = Expresion | ε 
*/
 control_for_intruction::=

;


/*
Global           	-> 	Variable ;
*/
global ::= 
    variable:v OP_INSTRUCTIONENDOPERATOR
    ;


/*
Constante        	-> 	const Tipo Identifier = literal ;
*/
constant ::=
    KW_CONST keyword_types IDENT OP_ASIG expression_atomic OP_INSTRUCTIONENDOPERATOR
    ;


/*
Variable         	-> 	Tipo NombreVariable 

NombreVariable   	-> 	Identifier 								|
						Identifier = Expresion 					|
						Identifier, NombreVariable 				|
						Identifier = Expresion, NombreVariable 
*/
variable ::= 
    keyword_types:kt variable_definition:vd 
    ;

variable_definition ::= 
      IDENT 								
    | IDENT OP_ASIG expression:e					
    | IDENT OP_COMMA variable_definition:vd 
    | IDENT OP_ASIG expression:e OP_COMMA variable_definition:vd 
    ;

/*
Instruccion      	-> 	Expresion ; | Identifier = Expresion ; | ;
*/
instruction ::=
      expression
    | IDENT OP_ASIG expression
    |
    ;


/*
Expresion        	->	Literal									|
 						Identifier (Parametros) 				|
 						Identifier 								|
 						Expresion BinaryOperator Expresion      |
 						Expresion CompareOperator Expresion 	|
 						Expresion AritmeticOperator Expresion  	|
 						Expresion BinaryOperator Expresion	
*/
expression ::=    
      OP_WRAPPERPARENTHESISLEFT expression_0 OP_WRAPPERPARENTHESISRIGHT
    | expression_0
    ;

expression_0 ::=
      expression_atomic
    | expression_unary_operator expression  
    | expression expression_binary_operators expression 
    | expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression
    ;
    

expression_atomic ::=
      IDENT
    | IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 				
    | IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 				 
    | LIT_HEXVALUE
    | LIT_DECIMALVALUE
    | LIT_FLOATVALUE
    | LIT_CHARVALUE
    | LIT_OCTALVALUE
    | LIT_STRINGDEF
    | LIT_EXPONENTIALDEF  
    ;

expression_unary_operator ::=
    //UNARY OPERATORS
      OP_MINUSMINUSASSIGN //--
    | OP_PLUSPLUSASSIGN   //++
    ;

expression_binary_operators ::= 

    //ARITMHMETIC OPERATORS
      OP_MINUS 
    | OP_DIV 
    | OP_PLUS
    | OP_MULT
    //RELATIONAL OPERATORS 
    | OP_LT
    | OP_LTE
    | OP_GT 
    | OP_GTE 
    | OP_EQUALCOMP
    | OP_NOTEQUALCOMP
    //LOGICAL OPERATORS
    | OP_ANDCOMP
    | OP_ORCOMP
    | OP_NEGATION
    //BITWISE OPERATORS  
    | OP_AND 
    | OP_OR 
    | OP_SHIFTOPLEFT
    | OP_SHIFTOPRIGHT
    | OP_NOT
    | OP_XOR
    //ASSIGMENT OPERATORS
    | OP_ASIG
    | OP_PLUSASSIGN
    | OP_MINUSASSIGN
    | OP_MULTASSIGN
    | OP_DIVASSIGN
    | OP_MODASSIGN
    ;


parameters ::= 
      parameter OP_COMMA parameters 
    | parameter;

parameter ::= 
      expression
    ;

parameters_definition ::= 
      parameter_definition OP_COMMA parameters_definition 
    | parameter_definition;

parameter_definition ::= 
      keyword_types IDENT:id
    | KW_CONST keyword_types IDENT
    | KW_CONST keyword_types IDENT OP_ASIG expression_atomic
      ;

keyword_types ::= 
      KW_INT 
    | KW_CHAR 
    | KW_LONG 
    | KW_SHORT 
    | KW_VOID
    | KW_FLOAT
    ;