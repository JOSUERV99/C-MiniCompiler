/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
//imports
  import java_cup.runtime.*;
  import java.util.LinkedList;
  import lexer.CLexer;
  import handler.Analyzer;
  import model.Token;
  import errors.SyntaxError;
  import interpreter.*;
  import itypes.*;
  import iexpressions.*;
  import model.*;
  import ioperators.*;
  import icontrolstructures.*;
  import compiler.Compiler;

parser code {:

    public CLexer s;
    public Analyzer a;
    public Compiler cmp;

    public boolean globalMode = true;

    public void bind(CLexer lexer, Analyzer analyzer) {
        this.s = lexer;
        this.a = analyzer;
    }

    public void generateSyntaxError(String message, String expected, Object o) {

        if (o != null)
        {
          Token findedToken = (Token) o;
          this.a.addSyntaxError(new SyntaxError(message, findedToken));
        }
        else
        {
          this.a.addSyntaxError(new SyntaxError(message + " at line:" + s.getCurrentLine(), null));
        }
    }

    public void syntax_error(Symbol cur_token) {
	    System.err.println("Syntax error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    	System.err.println("Fatal error at line: " + (cur_token.right+1) + " at column: " + (cur_token.left+1) + " on: " + cur_token.value);
    }
:}

init with {:  :};
scan with {: return this.s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
  terminal IdentifierToken IDENT;
  terminal KW_AUTO,KW_CASE;
  terminal KW_DEFAULT,KW_DO,KW_ELSE;
  terminal KeywordToken KW_CONTINUE,
                        KW_BREAK;
  terminal KW_ENUM,KW_EXTERN,KW_FOR,KW_GOTO;
  terminal KW_IF;
  terminal KW_WRITE;
  terminal KeywordToken KW_INT, KW_CONST, KW_FLOAT, KW_CHAR, KW_VOID, KW_DOUBLE;
  terminal KW_LONG,KW_REGISTER,KW_RETURN;
  terminal KW_SHORT,KW_SIGNED,KW_SIZEOF,KW_STATIC,KW_STRUCT;
  terminal KW_SWITCH,KW_TYPEDEF,KW_UNION,KW_UNSIGNED;
  terminal KW_VOLATILE,KW_WHILE;
  terminal OperatorToken OP_DIV,OP_PLUS,OP_MINUS;
  terminal OperatorToken OP_MULT,OP_MOD,OP_COMMA,OP_GTE,OP_LTE;
  terminal OperatorToken OP_LT,OP_GT,OP_NOTEQUALCOMP,OP_ORCOMP,OP_ANDCOMP;

  terminal OperatorToken OP_NEGATION,OP_PLUSASSIGN,OP_MINUSASSIGN,OP_MULTASSIGN,OP_DIVASSIGN;
  terminal OperatorToken OP_MINUSMINUSASSIGN,
                        OP_PLUSPLUSASSIGN,
                        OP_SHIFTOPRIGHT,
                        OP_SHIFTOPLEFT,
                        OP_EQUALCOMP,
                        OP_AND,
                        OP_XOR,
                        OP_OR,
                        OP_NOT;
                        
  terminal OperatorToken OP_MODASSIGN,OP_ANDASSIGN,OP_NOTASSIGN;
  terminal OperatorToken OP_ORASSIGN,OP_SHIFTLEFTASSIGN,OP_SHIFTRIGHTASSIGN,OP_TERNARYOPERATORQUESTIONMARK,OP_TERNARYOPERATIONDOUBLEDOT;
  
  terminal OperatorToken OP_ASIG,OP_PROPOPERATOR; 
  
  terminal OperatorToken OP_WRAPPERPARENTHESISLEFT,OP_WRAPPERPARENTHESISRIGHT,OP_WRAPPERSQUAREPARENTHESISLEFT,OP_WRAPPERSQUAREPARENTHESISRIGHT,OP_WRAPPERKEYPARENTHESISLEFT,OP_WRAPPERKEYPARENTHESISRIGHT;
  terminal OperatorToken OP_INSTRUCTIONENDOPERATOR,OP_POINTEROPERATOR,OP_POINTEROPERATORASTERISC;
  terminal LiteralToken LIT_HEXVALUE,LIT_FLOATVALUE,LIT_CHARVALUE,LIT_OCTALVALUE,LIT_STRINGDEF,LIT_EXPONENTIALDEF,LIT_DECIMALVALUE;
  terminal NEWLINE;

/* Non Terminals (generated using the terminals tokens) */
  //Non-terminals function
  non terminal LinkedList<ParamDefinition> function_declaration_0;
  non terminal LinkedList<IGramaticInstruction> function_declaration_1;
  non terminal FunctionDefinition function_declaration;
  non terminal LinkedList<ParamDefinition> parameters_definition;
  non terminal ParamDefinition parameter_definition;
  non terminal error_function_declaration_0,
                error_function_declaration_1,
                unknown_function_declaration_error;

  non terminal LinkedList<IExpression> parameters;
  non terminal IExpression parameter;

  non terminal ITypeToken keyword_types;
  non terminal ProgramDefinition program_definition;

  non terminal LinkedList<IGramaticInstruction> gramatic_body;

  //Non-terminal expressions
  non terminal IInstruction instruction;
  non terminal IExpression expression_any_type;
  non terminal IExpression expression_numeric;
  non terminal IExpression expression, expression_atomic;
  non terminal UnaryOperator expression_unary_operator;
  non terminal BinaryOperator expression_binary_operators;

  non terminal expression_atomic_literal_int,
              expression_atomic_literal_nonint
              ;

  non terminal expression_atomic_call_functions_anytype;
  
  //Non-terminal Variables
  non terminal GlobalVarDefinition global;
  non terminal VarDefinition variable;
  non terminal LinkedList<AssignDefinition> variable_definition;
  non terminal constant;
  
  //Non-terminal Estrucutura Control
  non terminal IControlStructure control_structure, control_if, control_if_else;
  non terminal LinkedList<IGramaticInstruction> control_else; 

  //Non-terminal switch
  non terminal control_switch, control_switch_case;

  //Non-terminal ciclo while
  non terminal ControlStructureWhile control_while; 
  non terminal LinkedList<IGramaticInstruction> control_while_body;

  //Non terminal ciclo for
  non terminal control_for, control_for_instruction, control_for_instruction1, control_for_body;

  //Program Start non termi
  non terminal ProgramDefinition start_program;

  //Error non terminal productions
  non terminal 
    error_if, 
    error_while, 
    error_for, 
    error_function_declaration, 
    error_function,
    error_variable_definition,
    error_switch,
    error_constant,
    error_parameter,
    error_gramatic,
    error_program_definition;

//Definicion de precedencias
//precedence gramatic body
  precedence left     IDENT, KW_WRITE;
  precedence left     OP_WRAPPERKEYPARENTHESISLEFT, OP_WRAPPERKEYPARENTHESISRIGHT;
  precedence left     OP_WRAPPERPARENTHESISLEFT, OP_WRAPPERPARENTHESISRIGHT;
  precedence nonassoc     LIT_DECIMALVALUE, LIT_FLOATVALUE, LIT_HEXVALUE, LIT_OCTALVALUE, LIT_EXPONENTIALDEF, LIT_CHARVALUE, LIT_STRINGDEF;     
  precedence right  OP_INSTRUCTIONENDOPERATOR;
  //predence If-ELSE
  precedence left KW_ELSE, KW_RETURN;
  precedence right KW_IF;
  precedence nonassoc KW_CONST;

  //precedence Switch
  precedence left KW_CASE,KW_SWITCH;
  precedence right KW_BREAK;

  //precedence While
  precedence left KW_WHILE, KW_FOR;
  precedence nonassoc KW_CONTINUE, KW_BREAK;

  //precedende variables
  precedence nonassoc KW_INT 
                    , KW_CHAR 
                    , KW_LONG 
                    , KW_SHORT 
                    , KW_VOID
                    , KW_FLOAT
                    , KW_DOUBLE
                    ;
  //precedence operators expression
  precedence left     OP_PLUS, OP_MINUS;
  precedence left     OP_MULT, OP_DIV, OP_MOD;
  precedence left     OP_TERNARYOPERATORQUESTIONMARK, OP_TERNARYOPERATIONDOUBLEDOT;

  precedence nonassoc 
      //RELATIONAL OPERATORS 
        OP_LT
      , OP_LTE
      , OP_GT 
      , OP_GTE 
      , OP_EQUALCOMP
      , OP_NOTEQUALCOMP
      //LOGICAL OPERATORS
      , OP_ANDCOMP
      , OP_ORCOMP
      , OP_NEGATION
      //BITWISE OPERATORS  
      , OP_AND 
      , OP_OR 
      , OP_SHIFTOPLEFT
      , OP_SHIFTOPRIGHT
      , OP_NOT
      , OP_XOR
      //ASSIGMENT OPERATORS
      , OP_ASIG
      , OP_PLUSASSIGN
      , OP_MINUSASSIGN
      , OP_MULTASSIGN
      , OP_DIVASSIGN
      , OP_MODASSIGN
      , OP_SHIFTLEFTASSIGN
      , OP_SHIFTRIGHTASSIGN
      , OP_NOTASSIGN
      , OP_ORASSIGN
      , OP_ANDASSIGN
        //UNARY OPERATORS
        //--
      , OP_MINUSMINUSASSIGN 
        //++
      , OP_PLUSPLUSASSIGN
      ;

start with start_program;

start_program ::= 
    program_definition:pd {:
      RESULT = pd;
    :}
    ;

program_definition ::= 
    function_declaration:fd program_definition:pd {:
      cmp.putFunction(fd);
      pd.addFunction(fd);
      RESULT = pd;  
    :}
    | global:g program_definition:pd {:
      pd.addGlobalVar(g);
      RESULT = pd;  
    :}     
    | constant:c program_definition:pd {:
      RESULT = pd;  
    :}
    | error_program_definition:e_p_d program_definition:pd {:
      RESULT = pd;
    :}
    | {:
      RESULT = new ProgramDefinition();
    :}
    ;

error_program_definition ::=
   keyword_types:kw_type OP_INSTRUCTIONENDOPERATOR
    {:
      parser.generateSyntaxError("Must give a name for a global variable", "Global variable", kw_type);
    :}
  | instruction:instr OP_INSTRUCTIONENDOPERATOR
    {:
      parser.generateSyntaxError("Instruction out of place", "Global variable", instr);
    :}
  | keyword_types error:e OP_INSTRUCTIONENDOPERATOR
      {:
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      :}
  | error_constant
  | error:e OP_INSTRUCTIONENDOPERATOR
    {:
      parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
    :}
  | error:e OP_WRAPPERKEYPARENTHESISRIGHT
  {:
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  :} 
  | error:e OP_WRAPPERKEYPARENTHESISLEFT
  {:
    parser.generateSyntaxError("Syntax error UNKNOWN TYPE", "UNKNOWN", e);
  :} 
  ;

/*
Funciones -> Tipo Identifier ( Parametros ) { CuerpoGramatica} | Tipo Identifier ( Parametros )*/
  function_declaration ::= 
      keyword_types:kt IDENT:i OP_WRAPPERPARENTHESISLEFT function_declaration_0:params function_declaration_1:body 
      {:
        FunctionDefinition function = new FunctionDefinition(kt, i, params, body);
        RESULT = function;
      :}
    | keyword_types:kt error:e                          function_declaration_0:params function_declaration_1:body
    {:
      parser.generateSyntaxError("Syntax error function declaration must give a name or missing parenthesis", "Function", e);
    :} 
    ;

  function_declaration_0 ::=
      parameters_definition:pd OP_WRAPPERPARENTHESISRIGHT {: 
        cmp.putParameters(pd);
        RESULT = pd; 
      :} 
    | OP_WRAPPERPARENTHESISRIGHT {: 
      globalMode = false;
      LinkedList<ParamDefinition> emptyParams = new LinkedList<>();
      RESULT = emptyParams;
    :}
    | error_function_declaration_0
    ;

  error_function_declaration_0 ::=
     error:e OP_WRAPPERPARENTHESISRIGHT
    {:
      parser.generateSyntaxError("Syntax error function declaration UNKNOWN TYPE 1", "UNKNOWN", e);
    :}
    | parameters_definition error:e OP_WRAPPERPARENTHESISRIGHT 
    {:
      parser.generateSyntaxError("Syntax error function declaration some code in parameters", "UNKNOWN", e);
    :}
    ;


  function_declaration_1 ::=
      OP_WRAPPERKEYPARENTHESISLEFT gramatic_body:gb OP_WRAPPERKEYPARENTHESISRIGHT
      {:
        RESULT = gb;
      :}

    | gramatic_body OP_WRAPPERKEYPARENTHESISRIGHT
    {:
      parser.generateSyntaxError("Left parenthesis missing", "Fuction declaration", null);
    :}
    ;


  error_function_declaration ::= 
      error:e IDENT:fn OP_WRAPPERPARENTHESISLEFT function_declaration_0 function_declaration_1 {:
        parser.generateSyntaxError("Type function missing", "int, float,...", e);
      :}
    |
       keyword_types:kt error:e OP_WRAPPERPARENTHESISLEFT  function_declaration_0 function_declaration_1 {:
        parser.generateSyntaxError("Function identifier missing", "getSalary", e);
      :}
    |
       keyword_types:kt IDENT error:e  function_declaration_0 function_declaration_1{:
        parser.generateSyntaxError("Left parenthesis missing", "(", e);
      :}
    |
       keyword_types:kt IDENT OP_WRAPPERPARENTHESISLEFT  error:e OP_WRAPPERPARENTHESISRIGHT function_declaration_1{:
        parser.generateSyntaxError("Error parameters declaration", "int a, float b", e);
      :}
    ;
/*EstructuraControl	->  Control-If | Control-Switch | Control-While | Control-For*/
  control_structure::=
      control_if:ci {:
        RESULT = ci;  
      :}
      //| control_switch
      | control_while:cw
      {:
        RESULT = cw;
      :}
      //| control_for
    ;

//Estructura de control if
  control_if ::=
        control_if_else:ife {: RESULT = ife; :}
      | error_if
      ;

  control_if_else::=  
      KW_IF OP_WRAPPERPARENTHESISLEFT expression:e OP_WRAPPERPARENTHESISRIGHT gramatic_body:ifbody control_else:elsebody
      {:
        
        ControlStructureIf ifcs = new ControlStructureIf(e, ifbody, elsebody);
        RESULT = ifcs;
      
      :}
     | KW_IF OP_WRAPPERPARENTHESISLEFT expression:e OP_WRAPPERPARENTHESISRIGHT instruction:ins
     {:   

        LinkedList<IGramaticInstruction> uniqueInstruction = new LinkedList<>();
        LinkedList<IGramaticInstruction> emptyElseBody = new LinkedList<>();
        uniqueInstruction.addLast(ins);
        ControlStructureIf ifcs = new ControlStructureIf(e, uniqueInstruction, emptyElseBody);
        RESULT = ifcs;
     
     :}
     |
     KW_IF OP_WRAPPERPARENTHESISLEFT expression:e OP_WRAPPERPARENTHESISRIGHT gramatic_body:ifbody
     {:   
        LinkedList<IGramaticInstruction> emptyElseBody = new LinkedList<>();
        ControlStructureIf ifcs = new ControlStructureIf(e, ifbody, emptyElseBody);
        RESULT = ifcs;
     :}
    ;

  control_else::=
        KW_ELSE gramatic_body:gb {: 
          RESULT = gb; 
        :}
      | KW_ELSE instruction:ins {:
        LinkedList<IGramaticInstruction> uniqueInstruction = new LinkedList<>();
        uniqueInstruction.addLast(ins);
        RESULT = uniqueInstruction;
      :}
      ;

  error_if ::=
      KW_IF:i error:e expression OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else {: 
        parser.generateSyntaxError("IF: Left parenthesis missing", "(", e);
      :}
    | 
      KW_IF:i OP_WRAPPERPARENTHESISLEFT error:e OP_WRAPPERPARENTHESISRIGHT gramatic_body control_else {: 
        parser.generateSyntaxError("IF: Expression missing in conditional structure", "expression", e);
      :}
    |
      KW_IF:i OP_WRAPPERPARENTHESISLEFT expression error:e gramatic_body control_else {:    
        parser.generateSyntaxError("IF: Right parenthesis missing", ")", e);
      :}
    |
      KW_IF:i error:e  gramatic_body control_else {:    
        parser.generateSyntaxError("IF: Some code between if and conditional expression", "If", e);
      :}
    | 
      KW_IF OP_WRAPPERPARENTHESISLEFT expression OP_WRAPPERPARENTHESISRIGHT error:e gramatic_body control_else {:    
        parser.generateSyntaxError("IF: Syntax error, illegal code inside of the if", "If", e);
      :}
    ;

//estructura de control switch
  control_switch::=
        KW_SWITCH OP_WRAPPERPARENTHESISLEFT expression_numeric OP_WRAPPERPARENTHESISRIGHT control_switch_case
      //| error_switch
      ;

  control_switch_case::=
      OP_WRAPPERKEYPARENTHESISLEFT control_switch_case OP_WRAPPERKEYPARENTHESISRIGHT  control_switch_case
    | KW_CASE     expression_numeric  OP_TERNARYOPERATIONDOUBLEDOT                    control_switch_case
    | KW_DEFAULT  expression_numeric  OP_TERNARYOPERATIONDOUBLEDOT                    control_switch_case
    | KW_BREAK OP_INSTRUCTIONENDOPERATOR                                              control_switch_case
    | gramatic_body                                                              
    ;

  error_switch ::=
      KW_SWITCH:s error:e OP_WRAPPERKEYPARENTHESISRIGHT {:
        parser.generateSyntaxError("Switch: Left parenthesis missing", "(", s);
      :}
    | KW_SWITCH:s OP_WRAPPERPARENTHESISLEFT error:e OP_WRAPPERKEYPARENTHESISRIGHT {:
        parser.generateSyntaxError("Switch: Numeric expresion expected", "expression", s);
      :}
    | KW_SWITCH:s OP_WRAPPERPARENTHESISLEFT expression_numeric error:e OP_WRAPPERKEYPARENTHESISRIGHT {:
        parser.generateSyntaxError("Switch: Right parenthesis missing", ")", s);
      :}
    ;

//estructura de control while
  control_while ::=
        KW_WHILE OP_WRAPPERPARENTHESISLEFT expression:e OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body:cwb OP_WRAPPERKEYPARENTHESISRIGHT
        {:
          ControlStructureWhile cw = new ControlStructureWhile(e, cwb);
          RESULT = cw;
        :}
      | error_while 
    ;

  control_while_body::=
      gramatic_body:gb KW_BREAK:br    OP_INSTRUCTIONENDOPERATOR control_while_body:cwb
      {:
        BreakInstruction breakIns = new BreakInstruction(br);
        cwb.addLast(breakIns);
        cwb.addAll(gb);
        RESULT = cwb;
      :}
    | gramatic_body:gb KW_CONTINUE:c OP_INSTRUCTIONENDOPERATOR control_while_body:cwb
      {:
        ContinueInstruction conIns = new ContinueInstruction(c);
        cwb.addLast(conIns);
        cwb.addAll(gb);
        RESULT = cwb;
      :}
    | gramatic_body:gb
      {:
        RESULT = gb;
      :}
    ;

  error_while ::= 
      KW_WHILE:w error:e expression OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT {:
        parser.generateSyntaxError("While: Left parenthesis missing", "(", w);
      :}
    | 
      KW_WHILE:w OP_WRAPPERPARENTHESISLEFT error:e OP_WRAPPERPARENTHESISRIGHT OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT  {:
        parser.generateSyntaxError("While: Expression missing in conditional structure", "expression", e);
      :}
    | 
      KW_WHILE:w OP_WRAPPERPARENTHESISLEFT expression error:e OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT {:
        parser.generateSyntaxError("While: Right parenthesis missing", ")", w);
      :}
    | 
      KW_WHILE:w error:e OP_WRAPPERKEYPARENTHESISLEFT control_while_body OP_WRAPPERKEYPARENTHESISRIGHT  {:
        parser.generateSyntaxError("While: Some code between while and conditional expression", "While", e);
      :}
    ;

//Estructura de control for
  control_for ::= 
      KW_FOR 
      OP_WRAPPERPARENTHESISLEFT 
        control_for_instruction OP_INSTRUCTIONENDOPERATOR 
        expression OP_INSTRUCTIONENDOPERATOR
        control_for_instruction1
      OP_WRAPPERPARENTHESISRIGHT
      gramatic_body
    | error_for
    ;

  error_for ::=
      KW_FOR 
      error:e 
        control_for_instruction OP_INSTRUCTIONENDOPERATOR 
        expression OP_INSTRUCTIONENDOPERATOR
        control_for_instruction1
      OP_WRAPPERPARENTHESISRIGHT
      gramatic_body {: 
        parser.generateSyntaxError("FOR: Left parenthesis missing", "(", e); 
      :}
    |
      KW_FOR 
      OP_WRAPPERPARENTHESISLEFT 
        control_for_instruction error:e 
        expression OP_INSTRUCTIONENDOPERATOR
        control_for_instruction1
      OP_WRAPPERPARENTHESISRIGHT
      gramatic_body {: 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      :}
    |
      KW_FOR 
      OP_WRAPPERPARENTHESISLEFT 
        control_for_instruction OP_INSTRUCTIONENDOPERATOR 
        error:e OP_INSTRUCTIONENDOPERATOR
        control_for_instruction1
      OP_WRAPPERPARENTHESISRIGHT
      gramatic_body {: 
        parser.generateSyntaxError("FOR: Conditional expression missing", "a<b", e); 
      :}
    | KW_FOR 
      OP_WRAPPERPARENTHESISLEFT 
        control_for_instruction OP_INSTRUCTIONENDOPERATOR 
        expression error:e
        control_for_instruction1
      OP_WRAPPERPARENTHESISRIGHT
      gramatic_body
      {: 
        parser.generateSyntaxError("FOR: Expected SEMICOLON", ";", e); 
      :}
    | KW_FOR 
      OP_WRAPPERPARENTHESISLEFT 
        control_for_instruction OP_INSTRUCTIONENDOPERATOR 
        expression OP_INSTRUCTIONENDOPERATOR
        error:e
      OP_WRAPPERPARENTHESISRIGHT
      gramatic_body
      {: 
        parser.generateSyntaxError("FOR: Incremental o decremental instruction expected", "a++", e); 
      :}
    | KW_FOR 
      OP_WRAPPERPARENTHESISLEFT 
        control_for_instruction OP_INSTRUCTIONENDOPERATOR 
        expression OP_INSTRUCTIONENDOPERATOR
        expression
      error:e
      gramatic_body
      {: 
        parser.generateSyntaxError("FOR: Right parenthesis missing", ")", e); 
      :}
    ;

  control_for_instruction ::=
      variable
    | IDENT OP_ASIG expression
    | expression
    |
    ;

  control_for_instruction1 ::=
      IDENT OP_ASIG expression
    | expression
    |
    ;

//Cuerpo gramatica 
  gramatic_body ::=
        OP_WRAPPERKEYPARENTHESISLEFT                   gramatic_body:gb  OP_WRAPPERKEYPARENTHESISRIGHT 
        {:
          RESULT = gb;
        :}
      | constant                                       gramatic_body:gb
        {:
          RESULT = gb;
        :}
      | OP_INSTRUCTIONENDOPERATOR          gramatic_body:gb  
        {:
          RESULT = gb;
        :}
      | variable:var OP_INSTRUCTIONENDOPERATOR          gramatic_body:gb
        {:
          gb.addLast(var);
          RESULT = gb;
        :}  
      | expression:exp  OP_INSTRUCTIONENDOPERATOR          gramatic_body:gb 
        {:
           gb.addLast(exp);
           RESULT = gb;
        :}
     | instruction:ins OP_INSTRUCTIONENDOPERATOR          gramatic_body:gb 
        {:
           gb.addLast(ins);
          RESULT = gb;
        :}
      | control_structure:cs                              gramatic_body:gb 
        {:
          gb.addLast(cs);
          RESULT = gb;
        :}
      | KW_RETURN expression OP_INSTRUCTIONENDOPERATOR gramatic_body:gb 
      {:
      
        RESULT = gb;
      :}
      | KW_RETURN            OP_INSTRUCTIONENDOPERATOR gramatic_body:gb 
      {:
      
        RESULT = gb;
      :}
      | KW_WRITE OP_WRAPPERPARENTHESISLEFT IDENT:id OP_WRAPPERPARENTHESISRIGHT gramatic_body:gb
      {:
        WriteInstruction wr = new WriteInstruction(id);
        gb.addLast(wr);
        RESULT = gb;
      :}
      | KW_ELSE error:e gramatic_body:gb 
        {:
          parser.generateSyntaxError("Syntax error, illegal code after the else or if declaration", "If", e);
          RESULT = gb;
        :}
      | expression error:e OP_INSTRUCTIONENDOPERATOR   gramatic_body:gb  
        {:  
            parser.generateSyntaxError("Error in gramatic body at expression, unknown error", "Gramatic Body", e);
            RESULT = gb;
        :}
      | KW_CONTINUE                                   gramatic_body:gb
        {:
          parser.generateSyntaxError("Continue instruction out of place", "Function declaration", null);
          RESULT = gb;
        :}
      | KW_BREAK                                      gramatic_body:gb
        {:
          parser.generateSyntaxError("Break instruction out of place", "Function declaration", null);
          RESULT = gb;
        :}
      | {:
        LinkedList<IGramaticInstruction> gramaticBody = new LinkedList<>();
        RESULT = gramaticBody;
      :}
      ;
      
//global
  global ::= 
      variable:v OP_INSTRUCTIONENDOPERATOR {:
        GlobalVarDefinition gvd = new GlobalVarDefinition(v);
        
        RESULT = gvd;
      :}
      //  | error_variable_definition //definida para atrapar errores
      // | variable:v error:e {:
      //     parser.generateSyntaxError("Instruction end operator was expected (;)", ";", v);
      //   :}
      ;

//constant
  constant ::=
        KW_CONST keyword_types IDENT OP_ASIG expression_atomic_literal_int OP_INSTRUCTIONENDOPERATOR
      //| error_constant
      ;

  error_constant ::=
        KW_CONST:c keyword_types IDENT error:e OP_INSTRUCTIONENDOPERATOR {:
          parser.generateSyntaxError("Constant must be defined as literal", "=", c);
        :}
      | KW_CONST:c keyword_types IDENT OP_ASIG error:e OP_INSTRUCTIONENDOPERATOR {:
          parser.generateSyntaxError("Constant must be asigned with literal", "literal", c);
        :}
      
      | KW_CONST:c keyword_types IDENT OP_ASIG LIT_HEXVALUE error:e OP_INSTRUCTIONENDOPERATOR {:
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        :}
      | KW_CONST:c keyword_types IDENT OP_ASIG LIT_DECIMALVALUE error:e OP_INSTRUCTIONENDOPERATOR {:
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        :}
      | KW_CONST:c keyword_types IDENT OP_ASIG LIT_CHARVALUE error:e OP_INSTRUCTIONENDOPERATOR {:
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        :}
      | KW_CONST:c keyword_types IDENT OP_ASIG LIT_OCTALVALUE error:e OP_INSTRUCTIONENDOPERATOR {:
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        :}
      | KW_CONST:c keyword_types IDENT OP_ASIG LIT_EXPONENTIALDEF error:e OP_INSTRUCTIONENDOPERATOR {:
          parser.generateSyntaxError("Instruction end operator was expected (;)", ";", c);
        :}
      ;
//Variable
  variable ::= 
      keyword_types:kt variable_definition:vd {:
        VarDefinition gv = new VarDefinition(kt, vd);

        for (AssignDefinition ad : gv.getAssignments())
        {
          cmp.putVariable(ad, globalMode);
        }

        RESULT = gv;
      :}
    ;

  variable_definition ::= 
      IDENT:i {: 
        AssignDefinition ad = new AssignDefinition(i, null);
        //cmp.putVariable(ad, globalMode);
        LinkedList<AssignDefinition> adl = new LinkedList<>();
        adl.addLast(ad);
        RESULT = adl;
      :}					
      | IDENT:i OP_ASIG expression:e {: 
          AssignDefinition ad = new AssignDefinition(i, e);
          //cmp.putVariable(ad, globalMode);
          LinkedList<AssignDefinition> adl = new LinkedList<>();
          adl.addLast(ad);
          RESULT = adl;
      :}		
      | IDENT:i OP_COMMA variable_definition:vd {: 
          AssignDefinition ad = new AssignDefinition(i, null);
          vd.addLast(ad); 
          //cmp.putVariable(ad, globalMode); 
          RESULT = vd; 
      :}
      | IDENT:i OP_ASIG expression:e OP_COMMA variable_definition:vd {:
          AssignDefinition ad = new AssignDefinition(i, e);
          //cmp.putVariable(ad, globalMode); 
          vd.addLast(ad); 
          RESULT = vd; 
      :}
      //| error_variable_definition
      ;

  error_variable_definition ::=
    error:e OP_INSTRUCTIONENDOPERATOR
      {:
        parser.generateSyntaxError("Multiple variable definition require comma as separator", ",", e);
      :}
    ;

//Parametros
  parameters ::= 
      parameter:p OP_COMMA parameters:params 
      {:
        params.addLast(p);
        RESULT = params;
      :}
      | parameter:p 
      {:
        LinkedList<IExpression> params = new LinkedList<>();
        params.addLast(p);
        RESULT = params;
      :};

  parameter ::= 
      expression:e {: 
        RESULT = e; 
      :}
      ;

  parameters_definition ::= 
        parameter_definition:pd OP_COMMA parameters_definition:params {:
          globalMode = false;
          cmp.checkArg(pd, params);
          params.addLast(pd);
          
          RESULT = params;
        :}
      | parameter_definition:pd {: 
          globalMode = false;
          LinkedList<ParamDefinition> params = new LinkedList<>();
          params.addLast(pd);
          RESULT = params;
        :}
      ;

  parameter_definition ::= 
        keyword_types:kt IDENT:id {: 
          ParamDefinition pd = new ParamDefinition(kt, id);
          RESULT = pd;
        :}
      | KW_CONST:c keyword_types:kt IDENT:id OP_ASIG expression_atomic:ea
        {:
          ConstTypeToken ctt = new ConstTypeToken(c, kt, ea);
          ParamDefinition pd = new ParamDefinition(ctt, id);

          RESULT = pd;
        :}
      //| error_parameter
        ;

  error_parameter ::=
      | KW_CONST error:e OP_WRAPPERPARENTHESISRIGHT {:
        parser.generateSyntaxError("Const params must be typed", "type", e);
      :} 
      | IDENT:id error:e OP_WRAPPERPARENTHESISRIGHT {:
        parser.generateSyntaxError("Params must be typed", "type", e);
      :}
      ;

//Expresiones e instruccion
  instruction ::=
      IDENT:i OP_ASIG expression:e {:
          DeclaredAssignDefinition dad = new DeclaredAssignDefinition(i, e);
          cmp.checkSimpleAssignment(dad);
          RESULT = dad;
      :}
      | variable:var {:
          RESULT = var;
      :}
      | expression:exp {:
          RESULT = exp;
      :}
      ;

  expression ::=    
        OP_WRAPPERPARENTHESISLEFT expression_any_type:e OP_WRAPPERPARENTHESISRIGHT {: RESULT = e; :}
      | expression_any_type:e {: RESULT = e; :}
      ;

  expression_any_type ::=
      expression_atomic:e 
        {: 
          RESULT = e; 
        :}
      | expression_unary_operator:eup IDENT:i
        {:
          IdentifierExpression id = new IdentifierExpression(i);
          cmp.checkIdentificableExpression(id);
          UnaryExpression expUnary =  new UnaryExpression(eup, id, true);
          RESULT = expUnary;
        :} 
      | IDENT:i expression_unary_operator:eup
        {:
          IdentifierExpression id = new IdentifierExpression(i);
          cmp.checkIdentificableExpression(id);
          UnaryExpression expUnary =  new UnaryExpression(eup, id, false);
          RESULT = expUnary;
        :}
      | expression:e1 expression_binary_operators:op expression:e2
        {:
          BinaryExpression bexp = new BinaryExpression(e1, op, e2);
          cmp.checkBinaryExpression(bexp);
          RESULT = bexp;
        :}  
      | expression OP_TERNARYOPERATORQUESTIONMARK expression OP_TERNARYOPERATIONDOUBLEDOT expression
      | OP_NEGATION:o expression_atomic:e
        {:
          UnaryOperator uOperator = new UnaryOperator(o);
          BooleanUnaryExpression boolExpUnary =  new BooleanUnaryExpression(uOperator,e);
          RESULT = boolExpUnary;
        :}
      | OP_NOT:o expression_atomic:e 
        {:
          UnaryOperator uOperator = new UnaryOperator(o);
          BooleanUnaryExpression boolExpUnary =  new BooleanUnaryExpression(uOperator,e);
          RESULT = boolExpUnary;
        :}

      ;

  expression_numeric ::=
      IDENT
    | expression_atomic_literal_int
    | expression_atomic_call_functions_anytype
    | expression_unary_operator expression_numeric  
    | expression_numeric expression_binary_operators expression_numeric 
    | expression_numeric OP_TERNARYOPERATORQUESTIONMARK expression_numeric OP_TERNARYOPERATIONDOUBLEDOT expression_numeric
    ;

  expression_atomic::=
      IDENT:i 
      {:
          IdentifierExpression id = new IdentifierExpression(i);
          cmp.checkIdentificableExpression(id);
          cmp.storeExpression(id);
          RESULT = id;
      :}
      | IDENT:fn OP_WRAPPERPARENTHESISLEFT parameters:params OP_WRAPPERPARENTHESISRIGHT
      {:
          FunctionCallExpression fce = new FunctionCallExpression(fn, params);
          cmp.storeCall(fce);
          cmp.storeExpression(fce);
          RESULT = fce;
      :} 				
      | IDENT:fn OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 
      {:
          LinkedList<IExpression> emptyParams = new LinkedList<>();
          FunctionCallExpression fce = new FunctionCallExpression(fn, emptyParams);
          cmp.storeCall(fce);
          cmp.storeExpression(fce);
          RESULT = fce;
      :}				 
      | LIT_HEXVALUE
      | LIT_DECIMALVALUE:l 
      {: 
          RESULT = new LiteralDecimalExpression(l); 
      :}
      | LIT_FLOATVALUE
      | LIT_CHARVALUE
      | LIT_OCTALVALUE
      | LIT_STRINGDEF
      | LIT_EXPONENTIALDEF  
      ;
    
  expression_atomic_literal_nonint::=
        LIT_STRINGDEF
      | LIT_FLOATVALUE
      ;

  expression_atomic_literal_int ::=
        LIT_HEXVALUE
      | LIT_DECIMALVALUE
      | LIT_CHARVALUE
      | LIT_OCTALVALUE
      | LIT_EXPONENTIALDEF  
      ;


  expression_atomic_call_functions_anytype::=
        IDENT OP_WRAPPERPARENTHESISLEFT OP_WRAPPERPARENTHESISRIGHT 				
      | IDENT OP_WRAPPERPARENTHESISLEFT parameters OP_WRAPPERPARENTHESISRIGHT 	
      ;
    

  expression_unary_operator ::=
      //UNARY OPERATORS
        OP_MINUSMINUSASSIGN:opmma //--
        {:
          UnaryOperator uOperator = new UnaryOperator(opmma);
          RESULT = uOperator;
        :}
      | OP_PLUSPLUSASSIGN:opppa   //++
        {:
          UnaryOperator uOperator = new UnaryOperator(opppa);
          RESULT = uOperator;
        :}
      ;

  expression_binary_operators ::= 
      //ARITMHMETIC OPERATORS
        OP_MINUS:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_DIV:o 
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_PLUS:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_MULT:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_MOD:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      //RELATIONAL OPERATORS 
      | OP_LT:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_LTE:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_GT:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :} 
      | OP_GTE:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :} 
      | OP_EQUALCOMP:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_NOTEQUALCOMP:o
      {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      //LOGICAL OPERATORS
      | OP_ANDCOMP:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_ORCOMP:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_NEGATION:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      //BITWISE OPERATORS  
      | OP_AND:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_OR:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_SHIFTOPLEFT:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_SHIFTOPRIGHT:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      //| OP_NOT
      | OP_XOR:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      //ASSIGMENT OPERATORS
      | OP_ASIG:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_PLUSASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_MINUSASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_MULTASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_DIVASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_MODASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_SHIFTLEFTASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_SHIFTRIGHTASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_NOTASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      | OP_ORASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
       | OP_ANDASSIGN:o {:
          BinaryOperator op = new BinaryOperator(o);

          RESULT = op;
        :}
      ;

//Keyword types
  keyword_types ::= 
        KW_INT:i  {: RESULT = new IntTypeToken(i); :}
      | KW_CHAR:c {: RESULT = new IntTypeToken(c); :}
      | KW_LONG 
      | KW_SHORT 
      | KW_VOID:v {: RESULT = new VoidTypeToken(v); :}
      | KW_FLOAT:f {: RESULT = new FloatTypeToken(f); :}
      | KW_DOUBLE:d {: RESULT = new DoubleTypeToken(d); :}
      ;